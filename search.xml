<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于完全对称日</title>
      <link href="2021/12/02/20211202/"/>
      <url>2021/12/02/20211202/</url>
      
        <content type="html"><![CDATA[<pre><code>高情商：太难得了，赶紧许个愿吧</code></pre><p><img "" class="lazyload placeholder" data-original="https://i.bmp.ovh/imgs/2021/12/83b1b9d383857ed1.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="2021-12-02"></p><pre><code>低情商：去年20200202也是这样说的 ​</code></pre><p><img "" class="lazyload placeholder" data-original="https://i.bmp.ovh/imgs/2021/12/64cfaf32cf724bca.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="2020-02-02"></p><p><font face="STCAIYUN" color="#311F36" size=4>下一个2021-12-02是九年后的2030-03-02,但是下一个2020-02-02可能就是是百年后的2121-12-12了,当然还有十年轮回的2040-04-02,2050-05-02……</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> day[<span class="number">2</span>][<span class="number">13</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;, &#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">huiwen</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">begin</span>() + <span class="number">4</span>) == <span class="built_in">string</span>(s.<span class="built_in">rbegin</span>(), s.<span class="built_in">rbegin</span>() + <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">abab</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s[<span class="number">0</span>] == s[<span class="number">2</span>] &amp;&amp; s[<span class="number">1</span>] == s[<span class="number">3</span>]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isleap</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> year = <span class="built_in">atoi</span>(s.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isnot</span><span class="params">(string s)</span></span>&#123; <span class="comment">//需要判断日期格式 !!!</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>(s.<span class="built_in">begin</span>() + <span class="number">4</span>, s.<span class="built_in">begin</span>() + <span class="number">6</span>) &gt; <span class="string">&quot;12&quot;</span> || <span class="built_in">string</span>(s.<span class="built_in">begin</span>() + <span class="number">6</span>, s.<span class="built_in">begin</span>() + <span class="number">8</span>) &gt; <span class="string">&quot;31&quot;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="function">string <span class="title">month</span><span class="params">(s.begin() + <span class="number">4</span>, s.begin() + <span class="number">6</span>)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">ri</span><span class="params">(s.begin() + <span class="number">6</span>, s.begin() + <span class="number">8</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">atoi</span>(ri.<span class="built_in">c_str</span>()) &gt; day[<span class="built_in">isleap</span>(<span class="built_in">string</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">begin</span>() + <span class="number">4</span>))][<span class="built_in">atoi</span>(month.<span class="built_in">c_str</span>())]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    <span class="keyword">int</span> year = a / <span class="number">10000</span>;</span><br><span class="line">    string result1, result2;</span><br><span class="line">    <span class="comment">//根据年份枚举</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = year; i &lt;= <span class="number">9999</span>; ++i)&#123; <span class="comment">// &lt;9000 错误 !!!</span></span><br><span class="line">        <span class="keyword">int</span> tmp = i;</span><br><span class="line">        string s;</span><br><span class="line">        <span class="keyword">while</span> (tmp != <span class="number">0</span>)&#123;  <span class="comment">//整型转换成字符串</span></span><br><span class="line">            s.<span class="built_in">insert</span>(s.<span class="built_in">begin</span>(), tmp % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            tmp /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s += <span class="built_in">string</span>(s.<span class="built_in">rbegin</span>(), s.<span class="built_in">rend</span>());</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isnot</span>(s)) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">atoi</span>(s.<span class="built_in">c_str</span>()) &gt; a &amp;&amp; <span class="built_in">huiwen</span>(s)) &#123;  <span class="comment">//字符串转换成整型</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (result1 == <span class="string">&quot;&quot;</span>) result1 = s;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abab</span>(s)) &#123;</span><br><span class="line">                result2 = s;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; result1 &lt;&lt; endl &lt;&lt; result2 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><p><font face="STCAIYUN" color="#311F36" size=4>然后还有就是大致算了一下吧，可能我们有生之年还会有8个这样的日子值得纪念</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m[<span class="number">13</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">leap</span><span class="params">(<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;y%<span class="number">100</span>!=<span class="number">0</span>||y%<span class="number">400</span>==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bd,ed;</span><br><span class="line">    cin&gt;&gt;bd&gt;&gt;ed;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> by=bd/<span class="number">10000</span>,ey=ed/<span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=by;i&lt;=ey;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> q=<span class="number">0</span>,w=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">            q=q*<span class="number">10</span>+w%<span class="number">10</span>;</span><br><span class="line">            w/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mon=q/<span class="number">100</span>,day=q%<span class="number">100</span>;</span><br><span class="line">        <span class="keyword">if</span>(mon&gt;=<span class="number">1</span>&amp;&amp;mon&lt;=<span class="number">12</span>&amp;&amp;day&gt;=<span class="number">1</span>&amp;&amp;day&lt;=m[mon])&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">leap</span>(i)&amp;&amp;day&gt;<span class="number">29</span>&amp;&amp;mon==<span class="number">2</span>)</span><br><span class="line">                ;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font face="STCAIYUN" color="#311F36" size=4>最后，希望2021最后一个月万事顺意吧，每天还可以继续跟朋友说一大堆屁话，看更多的书 多多散步 多多做饭，身体健康永远开心，及时行乐要多多看世界，和善良简单温柔的人共同成长，在自己喜欢的道路上越走越远</font></p><p><img "" class="lazyload placeholder" data-original="https://s3.bmp.ovh/imgs/2021/12/50caf798f35cd03c.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="end"></p>]]></content>
      
      
      <categories>
          
          <category> Person </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computed And Watch</title>
      <link href="2021/10/24/Vue_CW/"/>
      <url>2021/10/24/Vue_CW/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue的computed和watch的细节全面分析"><a href="#Vue的computed和watch的细节全面分析" class="headerlink" title="Vue的computed和watch的细节全面分析"></a><a href="">Vue的computed和watch的细节全面分析</a></h1><h2 id="1-computed"><a href="#1-computed" class="headerlink" title="1.computed"></a>1.computed</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>是一个计算属性,类似于过滤器,对绑定到view的数据进行处理</p><h3 id="1-2-get用法"><a href="#1-2-get用法" class="headerlink" title="1.2 get用法"></a>1.2 get用法</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span>: &#123;</span><br><span class="line">  firstName: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">  lastName: <span class="string">&#x27;Bar&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  fullName: function () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fullName不可在data里面定义,<br>如果定义会报如下图片的错误,因为对应的computed作为计算属性定义fullName并返回对应的结果给这个变量,变量不可被重复定义和赋值</p><h3 id="1-3-get和set用法"><a href="#1-3-get和set用法" class="headerlink" title="1.3 get和set用法"></a>1.3 get和set用法</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span>: &#123;</span><br><span class="line">    firstName: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">    lastName: <span class="string">&#x27;Bar&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">  fullName：&#123;</span><br><span class="line">   <span class="keyword">get</span>()&#123;<span class="comment">//回调函数 当需要读取当前属性值是执行，根据相关数据计算并返回当前属性的值</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">   <span class="keyword">set</span>(<span class="keyword">val</span>)&#123;<span class="comment">//监视当前属性值的变化，当属性值发生变化时执行，更新相关的属性数据</span></span><br><span class="line">       <span class="comment">//val就是fullName的最新属性值</span></span><br><span class="line">       console.log(<span class="keyword">val</span>)</span><br><span class="line">        <span class="keyword">const</span> names = <span class="keyword">val</span>.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        console.log(names)</span><br><span class="line">        <span class="keyword">this</span>.firstName = names[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">this</span>.lastName = names[<span class="number">1</span>];</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="2-watch"><a href="#2-watch" class="headerlink" title="2. watch"></a>2. watch</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><p>watch是一个观察的动作</p><h3 id="2-2-示例"><a href="#2-2-示例" class="headerlink" title="2.2 示例"></a>2.2 示例</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span>: &#123;</span><br><span class="line">  firstName: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">  lastName: <span class="string">&#x27;Bar&#x27;</span>,</span><br><span class="line">  fullName: <span class="string">&#x27;Foo Bar&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">   firstName: function (<span class="keyword">val</span>) &#123;</span><br><span class="line">   <span class="keyword">this</span>.fullName = <span class="keyword">val</span> + <span class="string">&#x27; &#x27;</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">&#125;,</span><br><span class="line">lastName: function (<span class="keyword">val</span>) &#123;</span><br><span class="line">   <span class="keyword">this</span>.fullName = <span class="keyword">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="keyword">val</span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上面是监听firstName和lastName的变化，但是仅限简单数据类型</p><h3 id="2-2-监听简单数据类型"><a href="#2-2-监听简单数据类型" class="headerlink" title="2.2 监听简单数据类型"></a>2.2 监听简单数据类型</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>:<span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">watch</span>:&#123;</span><br><span class="line">      <span class="function"><span class="title">first</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.first)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h3 id="2-3-监听复杂数据类型"><a href="#2-3-监听复杂数据类型" class="headerlink" title="2.3 监听复杂数据类型"></a>2.3 监听复杂数据类型</h3><p>1.监听复杂数据类型需用深度监听</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>:&#123;</span><br><span class="line">          <span class="attr">second</span>:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">watch</span>:&#123;</span><br><span class="line">      <span class="attr">secondChange</span>:&#123;</span><br><span class="line">        <span class="function"><span class="title">handler</span>(<span class="params">oldVal,newVal</span>)</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(oldVal)</span><br><span class="line">          <span class="built_in">console</span>.log(newVal)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">deep</span>:<span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>2.console.log打印的结果,发现oldVal和newVal值是一样的,所以深度监听虽然可以监听到对象的变化,但是无法监听到具体对象里面那个属性的变化</p><p>3.oldVal和newVal值一样的原因是它们索引同一个对象/数组。Vue 不会保留修改之前值的副本</p><p>4.深度监听对应的函数名必须为handler,否则无效果,因为watcher里面对应的是对handler的调用</p><h3 id="2-4-监听对象单个属性"><a href="#2-4-监听对象单个属性" class="headerlink" title="2.4 监听对象单个属性"></a>2.4 监听对象单个属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">方法一：可以直接对用对象.属性的方法拿到属性</span><br><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="string">&#x27;first&#x27;</span>:&#123;</span><br><span class="line">              <span class="attr">second</span>:<span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">watch</span>:&#123;</span><br><span class="line">          first.second:<span class="function"><span class="keyword">function</span>(<span class="params">newVal,oldVal</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(newVal,oldVal);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>方法二：watch如果想要监听对象的单个属性的变化,必须用computed作为中间件转化,因为computed可以取到对应的属性值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>:&#123;</span><br><span class="line">          <span class="attr">second</span>:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">computed</span>:&#123;</span><br><span class="line">      <span class="function"><span class="title">secondChange</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.first.second</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">watch</span>:&#123;</span><br><span class="line">      <span class="function"><span class="title">secondChange</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;second属性值变化了&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h2 id="3-computed和watch的区别"><a href="#3-computed和watch的区别" class="headerlink" title="3 computed和watch的区别"></a>3 computed和watch的区别</h2><h3 id="3-1-computed特性"><a href="#3-1-computed特性" class="headerlink" title="3.1 computed特性"></a>3.1 computed特性</h3><pre><code>1. 是计算值，支持缓存，只有依赖数据发生改变，才会重新进行计算，页面重新渲染值不变化,计算属性会立即返回之前的计算结果，而不必再次执行函数2. 不支持异步，当computed内有异步操作时无效，无法监听数据的变化3. computed 属性值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于data中声明过或者父组件传递的props中的数据通过计算得到的值4. 如果一个属性是由其他属性计算而来的，这个属性依赖其他属性，是一个多对一或者一对一，一般用computed5. 如果computed属性属性值是函数，那么默认会走get方法；函数的返回值就是属性的属性值；在computed中的，属性都有一个get和一个set方法，当数据变化时，调用set方法。6. 就是简化tempalte里面&#123;&#123;&#125;&#125;计算和处理props或$emit的传值</code></pre><h3 id="3-2-watch特性"><a href="#3-2-watch特性" class="headerlink" title="3.2 watch特性"></a>3.2 watch特性</h3><pre><code>1. 不支持缓存，数据变，直接会触发相应的操作，页面重新渲染时值不变化也会执行；2. watch支持异步；3. 监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；4. 当一个属性发生变化时，需要执行对应的操作；一对多；5. 监听数据必须是data中声明过或者父组件传递过来的props中的数据，当数据变化时，触发其他操作，函数有两个参数，   immediate：组件加载立即触发回调函数执行，　　deep: 深度监听，为了发现**对象内部值**的变化，复杂类型的数据时使用，例如数组中的对象内容的改变，注意监听数组的变动不需要这么做。注意：deep无法监听到数组的变动和对象的新增，参考vue数组变异,只有以响应式的方式触发才会被监听到。​    6.应用：监听props，$emit或本组件的值执行异步操作,当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。</code></pre><h2 id="3-props传值"><a href="#3-props传值" class="headerlink" title="3 props传值"></a>3 props传值</h2><h3 id="3-1-常见错误1"><a href="#3-1-常见错误1" class="headerlink" title="3.1 常见错误1"></a>3.1 常见错误1</h3><p>传入的值想作为局部变量来使用,直接使用会报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">props:[<span class="string">&#x27;listShop&#x27;</span>],</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span>&#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.listShop=<span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个错误是说的避免直接修改父组件传入的值,因为会改变父组件的值</p><h3 id="3-2-解决方案1"><a href="#3-2-解决方案1" class="headerlink" title="3.2 解决方案1"></a>3.2 解决方案1</h3><p>简单数据类型解决方案:<br>所以可以在data中重新定义一个变量,改变指向,但是也只是针对简单数据类型,因为复杂数据类型栈存贮的是指针,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">props:[<span class="string">&#x27;listShop&#x27;</span>],</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="attr">listShopChild</span>:<span class="built_in">this</span>.listShop</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.listShopChild=<span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>这样就可以愉快的更改传入的简单数据类型的数据啦!不会有任何报错,也不会影响父组件!</p><h3 id="3-4-存在的问题"><a href="#3-4-存在的问题" class="headerlink" title="3.4 存在的问题"></a>3.4 存在的问题</h3><p>复杂数据类型在栈中存贮的是指针,所以赋值给新的变量也会改变原始的变量值.那么应该咋整呢?<br>1.可以手动深度克隆一个复杂的数据出来,循环或者递归都行</p><p>数组深度克隆:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var</span> x =<span class="meta"> [1,2,3];</span></span><br><span class="line"><span class="meta">var y = [];</span></span><br><span class="line"><span class="meta">for (var i = 0; i &lt; x.length; i++) &#123;</span></span><br><span class="line"><span class="meta">    y[i]=x[i];</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta">console.log(y);  //[1,2,3]</span></span><br><span class="line"><span class="attribute">y</span>.push(<span class="number">4</span>);</span><br><span class="line"><span class="attribute">console</span>.log(y);  //[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="attribute">console</span>.log(x);  //[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>对象深度克隆:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> y = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> x)&#123;</span><br><span class="line">    y[i] = x[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(y);  <span class="comment">//Object &#123;a: 1, b: 2&#125;</span></span><br><span class="line">y.c = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(y);  <span class="comment">//Object &#123;a: 1, b: 2, c: 3&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(x);  <span class="comment">//Object &#123;a: 1, b: 2&#125;</span></span><br></pre></td></tr></table></figure><p>函数深度克隆</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">1</span>);&#125;;</span><br><span class="line"><span class="keyword">var</span> y = x;</span><br><span class="line">y = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">2</span>);&#125;;</span><br><span class="line">x();  <span class="comment">//1</span></span><br><span class="line">y();  <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>为什么函数可以直接赋值克隆?<br>由于函数对象克隆之后的对象会单独复制一次并存储实际数据，因此并不会影响克隆之前的对象。所以采用简单的复制“=”即可完成克隆。</p><p>2.Object.assign<br>只会对只是一级属性复制，比浅拷贝多深拷贝了一层而已,所以还是无法达到深度克隆的目的.</p><p>3.强大的JSON.stringify和JSON.parse</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));</span><br></pre></td></tr></table></figure><p>这是ES5新出来的API,先将对象转化为字符串,就是简单数据类型赋值,再用JSON.parse转化</p><h3 id="3-5-解决方案2"><a href="#3-5-解决方案2" class="headerlink" title="3.5 解决方案2"></a>3.5 解决方案2</h3><p>直接用computed改变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">  <span class="function"><span class="title">listShopChild</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.listShop</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-存在的问题"><a href="#3-5-存在的问题" class="headerlink" title="3.5 存在的问题"></a>3.5 存在的问题</h3><p><strong>注意:此时用computed时,如果是数组this.$set(arr,1,true)对应的值耶不更新</strong>，<br>这个很坑，这个bug我找个很久<br><strong>如果传入的值只是在data定义，并未在methods或生命周期钩子更改，直接改变也会报错</strong><br>所以还是可以先用局部变量接收,再修改，这个坑比较多</p><h2 id="4-应用"><a href="#4-应用" class="headerlink" title="4 应用"></a>4 应用</h2><h3 id="4-1-应用1"><a href="#4-1-应用1" class="headerlink" title="4.1 应用1"></a>4.1 应用1</h3><p>监听本组件计算和监听</p><h3 id="4-2-应用2"><a href="#4-2-应用2" class="headerlink" title="4.2 应用2"></a>4.2 应用2</h3><p>计算或监听父传子的props值</p><h3 id="4-3-应用3"><a href="#4-3-应用3" class="headerlink" title="4.3 应用3"></a>4.3 应用3</h3><p>分为简单数据类型和复杂数据类型监听,监听方法如上watch的使用</p><h3 id="4-4-应用4"><a href="#4-4-应用4" class="headerlink" title="4.4 应用4"></a>4.4 应用4</h3><p>监听vuex的state或者getters值的变化</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    <span class="keyword">state</span>Demo()&#123;</span><br><span class="line">        return this.<span class="variable">$store</span>.<span class="keyword">state</span>.demoState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">watch:&#123;</span><br><span class="line">    <span class="keyword">state</span>Demo()&#123;</span><br><span class="line">        console.<span class="keyword">log</span>(&#x27;vuex变化啦&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-computed和watch的原理分析"><a href="#5-computed和watch的原理分析" class="headerlink" title="5. computed和watch的原理分析"></a>5. computed和watch的原理分析</h2><h3 id="5-1-computed的原理"><a href="#5-1-computed的原理" class="headerlink" title="5.1 computed的原理"></a>5.1 computed的原理</h3><p>计算属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。注意，如果某个依赖 (比如非响应式属性) 在该实例范畴之外，则计算属性是不会被更新的。</p><h3 id="5-2-watch的原理"><a href="#5-2-watch的原理" class="headerlink" title="5.2 watch的原理"></a>5.2 watch的原理</h3><p>分为三个过程:实例化Vue、调用$watch方法、属性变化，触发回调</p><h2 id="6-简单实现computed和watch"><a href="#6-简单实现computed和watch" class="headerlink" title="6 简单实现computed和watch"></a>6 简单实现computed和watch</h2><p>公共类</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val, fn</span>) </span>&#123;</span><br><span class="line">      let subs = [] <span class="comment">// 新增</span></span><br><span class="line">      Object.defineProperty(data, key, &#123;</span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 新增</span></span><br><span class="line">       <span class="keyword">if</span> (data.<span class="symbol">$target</span>) &#123;</span><br><span class="line">        subs.push(data.<span class="symbol">$target</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (newVal === val) <span class="keyword">return</span></span><br><span class="line">      fn &amp;&amp; fn(newVal)</span><br><span class="line">      <span class="comment">// 新增</span></span><br><span class="line">      <span class="keyword">if</span> (subs.length) &#123;</span><br><span class="line">        <span class="comment">// 用 setTimeout 因为此时 this.data 还没更新</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          subs.forEach(<span class="function"><span class="params">sub</span> =&gt;</span> sub())</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      val = newVal</span><br><span class="line">    &#125;,</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="6-1-computed实现"><a href="#6-1-computed实现" class="headerlink" title="6.1 computed实现"></a>6.1 computed实现</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computed</span><span class="params">(ctx, obj)</span> &#123;</span></span><br><span class="line">  <span class="keyword">let</span> <span class="built_in">keys</span> = Object.<span class="built_in">keys</span>(obj)</span><br><span class="line">  <span class="keyword">let</span> dataKeys = Object.<span class="built_in">keys</span>(ctx.data)</span><br><span class="line">  dataKeys.forEach(dataKey =&gt; &#123;</span><br><span class="line">    defineReactive(ctx.data, dataKey, ctx.data[dataKey])</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">let</span> firstComputedObj = <span class="built_in">keys</span>.reduce((<span class="keyword">prev</span>, <span class="keyword">next</span>) =&gt; &#123;</span><br><span class="line">    ctx.data.$target = <span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">      ctx.setData(&#123; [<span class="keyword">next</span>]: obj[<span class="keyword">next</span>].<span class="keyword">call</span>(ctx) &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">prev</span>[<span class="keyword">next</span>] = obj[<span class="keyword">next</span>].<span class="keyword">call</span>(ctx)</span><br><span class="line">    ctx.data.$target = null</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">prev</span></span><br><span class="line">  &#125;, &#123;&#125;)</span><br><span class="line">  ctx.setData(firstComputedObj)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-1-watch实现"><a href="#6-1-watch实现" class="headerlink" title="6.1 watch实现"></a>6.1 watch实现</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function watch(ctx, obj) &#123;</span><br><span class="line">  Object<span class="selector-class">.keys</span>(obj)<span class="selector-class">.forEach</span>(key =&gt; &#123;</span><br><span class="line">    defineReactive(ctx<span class="selector-class">.data</span>, key, ctx<span class="selector-class">.data</span><span class="selector-attr">[key]</span>, function(value) &#123;</span><br><span class="line">      obj<span class="selector-attr">[key]</span><span class="selector-class">.call</span>(ctx, value)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Train</title>
      <link href="2021/10/23/Train/"/>
      <url>2021/10/23/Train/</url>
      
        <content type="html"><![CDATA[<hr><p><font face="STCAIYUN" color="#533957" size=4>你有没有在火车上睡着过？第一次乘坐这辆车时，我并没有打瞌睡，所见的风景、远方的绿色田野和浩瀚的大海，都让我无法将目光从如此美丽的自然风光上移开。可现在，因为没有什么新鲜事，每次去附近的城市旅行，我都情不自禁地闭上眼睛。有人说，我们在旅行时容易睡着的最大原因是无聊，或者仅仅是因为我们的身体随着我们所经历的振动而放松和舒缓。我相信第二个原因与我的情况更相关。即使我一遍又一遍地看到完全相同的山脉全景，我也永远不会厌倦浏览景色并欣赏大自然为我们提供的东西。</font></p><hr><p><img "" class="lazyload placeholder" data-original="https://img11.360buyimg.com/ddimg/jfs/t1/162067/23/21571/1071727/617511afE61aa7862/56e347aeda5e440f.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></p>]]></content>
      
      
      <categories>
          
          <category> Person </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue生命周期</title>
      <link href="2021/10/18/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>2021/10/18/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<p>vue官网说，“你暂时不用搞清楚这些…”,我觉得你既然准备用vue做开发的，不搞懂搞透它，你以后会发现踩的坑终究还是有它引起的，等以后再来补坑，不如现在就拿下它。</p><h3 id="一、vue的生命周期是什么"><a href="#一、vue的生命周期是什么" class="headerlink" title="一、vue的生命周期是什么"></a><strong>一、vue的生命周期是什么</strong></h3><p>  vue每个组件都是独立的，每个组件都有一个属于它的生命周期，从一个组件<strong>创建、数据初始化、挂载、更新、销毁</strong>，这就是一个组件所谓的生命周期。在组件中具体的方法有:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  beforeCreate</span><br><span class="line"></span><br><span class="line">  created</span><br><span class="line"></span><br><span class="line">  beforeMount</span><br><span class="line"></span><br><span class="line">  mounted</span><br><span class="line"></span><br><span class="line">  (</span><br><span class="line"></span><br><span class="line">​     beforeUpdate</span><br><span class="line"></span><br><span class="line">​     updated</span><br><span class="line"></span><br><span class="line">   )</span><br><span class="line"></span><br><span class="line">  beforeDestroy</span><br><span class="line"></span><br><span class="line">  destroyed</span><br></pre></td></tr></table></figure><p>  对应的中文就如其字面意思，英文不好的童鞋可以有道翻翻</p><p>  好了，这里要上图啦~~~</p><p><img "" class="lazyload placeholder" data-original="https://img12.360buyimg.com/ddimg/jfs/t1/209261/16/5752/1708407/616cdfbbEe62861ae/65e1621214419e05.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></p><h3 id="二、vue生命周期的在项目中的执行顺序"><a href="#二、vue生命周期的在项目中的执行顺序" class="headerlink" title="二、vue生命周期的在项目中的执行顺序"></a>二、vue生命周期的在项目中的执行顺序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">data () &#123;</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line"></span><br><span class="line">  rendered: false,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">1.beforeCeate()&#123;</span><br><span class="line"></span><br><span class="line">  console.log(this.rendered);  // undefined </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2.created() &#123;</span><br><span class="line"></span><br><span class="line">  console.log(this.$el);//undefined</span><br><span class="line"></span><br><span class="line">   console.log(this.rendered); // false</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2.created() &#123;</span><br><span class="line"></span><br><span class="line">  console.log(this.$el);//undefined</span><br><span class="line"></span><br><span class="line">   console.log(this.rendered); // false</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">4.mounted() &#123;</span><br><span class="line"></span><br><span class="line">  console.log(this.$el);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">5.beforeDestroy()&#123;</span><br><span class="line"></span><br><span class="line">  console.log(this.$el);</span><br><span class="line"></span><br><span class="line">  console.log(this.rendered); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">6.destroyed() &#123;</span><br><span class="line"></span><br><span class="line">  console.log(this.$el);</span><br><span class="line"></span><br><span class="line">  console.log(this.rendered);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="beforeCreate-创建前"><a href="#beforeCreate-创建前" class="headerlink" title="beforeCreate( 创建前 )"></a>beforeCreate( 创建前 )</h5><p>在实例初始化之后，数据观测和事件配置之前被调用，此时组件的选项对象还未创建，el 和 data 并未初始化，因此无法访问methods， data， computed等上的方法和数据。</p><h5 id="created-创建后-）"><a href="#created-创建后-）" class="headerlink" title="created ( 创建后 ）"></a>created ( 创建后 ）</h5><p>实例已经创建完成之后被调用，在这一步，实例已完成以下配置：数据观测、属性和方法的运算，watch/event事件回调，完成了data 数据的初始化，el没有。 然而，挂在阶段还没有开始, $el属性目前不可见，这是一个常用的生命周期，因为你可以调用methods中的方法，改变data中的数据，并且修改可以通过vue的响应式绑定体现在页面上，，获取computed中的计算属性等等，通常我们可以在这里对实例进行预处理，也有一些童鞋喜欢在这里发ajax请求，值得注意的是，这个周期中是没有什么方法来对实例化过程进行拦截的，因此假如有某些数据必须获取才允许进入页面的话，并不适合在这个方法发请求，建议在组件路由钩子beforeRouteEnter中完成</p><h5 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h5><p>挂在开始之前被调用，相关的render函数首次被调用（虚拟DOM），实例已完成以下的配置： 编译模板，把data里面的数据和模板生成html，完成了el和data 初始化，注意此时还没有挂在html到页面上。</p><h5 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h5><p>挂在完成，也就是模板中的HTML渲染到HTML页面中，此时一般可以做一些ajax操作，mounted只会执行一次。</p><h5 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h5><p>在数据更新之前被调用，发生在虚拟DOM重新渲染和打补丁之前，可以在该钩子中进一步地更改状态，不会触发附加地重渲染过程</p><h5 id="updated（更新后）"><a href="#updated（更新后）" class="headerlink" title="updated（更新后）"></a>updated（更新后）</h5><p>在由于数据更改导致地虚拟DOM重新渲染和打补丁只会调用，调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作，然后在大多是情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环，该钩子在服务器端渲染期间不被调用</p><h5 id="beforeDestroy（销毁前）"><a href="#beforeDestroy（销毁前）" class="headerlink" title="beforeDestroy（销毁前）"></a>beforeDestroy（销毁前）</h5><p>在实例销毁之前调用，实例仍然完全可用，</p><ol><li>这一步还可以用this来获取实例，</li><li>一般在这一步做一些重置的操作，比如清除掉组件中的定时器 和 监听的dom事件</li></ol><h5 id="destroyed（销毁后）"><a href="#destroyed（销毁后）" class="headerlink" title="destroyed（销毁后）"></a>destroyed（销毁后）</h5><p>在实例销毁之后调用，调用后，所以的事件监听器会被移出，所有的子实例也会被销毁，该钩子在服务器端渲染期间不被调用</p><h3 id="三、vue中内置的方法-属性和vue生命周期的运行顺序"><a href="#三、vue中内置的方法-属性和vue生命周期的运行顺序" class="headerlink" title="三、vue中内置的方法 属性和vue生命周期的运行顺序"></a><strong>三、vue中内置的方法 属性和vue生命周期的运行顺序</strong></h3><p>  从第一二点可知道data的初始化是在created时已经完成数据观测(data observer)，并且诸如methods、computed属性 props等已经初始化；那问题来了，</p><p>data props computed watch methods他们之间的生成顺序是什么呢？</p><p>根据翻看vue源码可知：</p><p><strong>props =&gt; methods =&gt;data =&gt; computed =&gt; watch</strong>; </p><h3 id="四、自己构造的方法与vue生命周期的运行顺序-如show这些"><a href="#四、自己构造的方法与vue生命周期的运行顺序-如show这些" class="headerlink" title="四、自己构造的方法与vue生命周期的运行顺序 如show这些"></a><strong>四、自己构造的方法与vue生命周期的运行顺序 如show这些</strong></h3><p>  往往我们在开发项目时都经常用到 $refs 来直接访问子组件的方法，但是这样调用的时候可能会导致数据的延迟滞后的问题，则会出现bug。</p><p>解决方法则是推荐采取<strong>异步回调</strong>的方法，然后传参进去，严格遵守vue的生命周期就可以解决 推荐 es6 的promise。</p><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">handleAsync () &#123;</span><br><span class="line"></span><br><span class="line">  return new Promise(resolve=&gt;&#123;</span><br><span class="line"></span><br><span class="line">​    const res=&quot;&quot;;</span><br><span class="line"></span><br><span class="line">​    resolve(res)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">async handleShow() &#123;</span><br><span class="line"></span><br><span class="line">  await this.handleAsync().then(res=&gt;&#123;</span><br><span class="line"></span><br><span class="line">  this.$refs.child.show(res);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a><strong>五、总结</strong></h3><p>  vue 的生命周期，总得来说就是实例的创建和销毁这段时间的一个机制吧。也是vue框架的数据间的交互通信。其实现在看来也没那么难，但是vue的源码实现这一套机制那是难得一逼，涉及到复杂的算法如<strong>diff算法</strong>，有兴趣的童鞋可以去深入了解一下。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django</title>
      <link href="2021/07/15/Django/"/>
      <url>2021/07/15/Django/</url>
      
        <content type="html"><![CDATA[<h1 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h1><h2 id="命令及配置"><a href="#命令及配置" class="headerlink" title="命令及配置"></a>命令及配置</h2><p>切换到创建项目的目录  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd C:\Users\admin\Desktop\DjangoProject</span><br></pre></td></tr></table></figure><p>创建名为project的项目命令 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject project</span><br></pre></td></tr></table></figure><pre><code>注：所有路径不要有中文切换到目录cd C:\Users\admin\Desktop\DjangoProject\project</code></pre><p>目录层级说明：manage.py  一个命令行工具，可以让我们用多种方式对Django项目进行交互</p><pre><code>__init__.py 一个空文件，它告诉Python这个目录应该被看做一个包settings.py 项目的配置文件（主要处理文件）urls.py     项目的url声明 （主要处理文件）wsgi.py     项目与WSGI兼容的Web服务器入口</code></pre><p>配置数据库   Django默认使用SQLite数据库<br>            在settings.py文件中通过DATABASES选项进行数据库配置</p><p>配置MySQL    Python3.x中安装的是PyMySQL<br>            在__init__.py文件中写入两行代码import pymysql<br>                                        pymysql.install_as_MySQLdb()</p><p>以数据库sunck为例进行示范：对settings.py中的DATABASES进行设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&quot;sunck&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&quot;admin123&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&quot;3306&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建应用–在一个项目中可以创建多个应用，每个应用进行一种业务处理<br>        打开CMD,进入project(目录名)的目录下，输入命令创建名为myApp的app:</p><pre><code>python manage.py startapp myAPP</code></pre><h2 id="myAPP目录说明"><a href="#myAPP目录说明" class="headerlink" title="myAPP目录说明"></a>myAPP目录说明</h2><pre><code>admin.py    进行站点配置models.py   创建模型views.py    创建视图</code></pre><p>激活应用  在settings.py文件中，将myApp应用加入到INSTALLED_APPS选项中</p><pre><code>INSTALLED_APPS = [    &#39;django.contrib.admin&#39;,    &#39;django.contrib.auth&#39;,    &#39;django.contrib.contenttypes&#39;,    &#39;django.contrib.sessions&#39;,    &#39;django.contrib.messages&#39;,    &#39;django.contrib.staticfiles&#39;,    &#39;myApp&#39;,]</code></pre><p>定义模型 概述：有一个数据表就对应有一个模型</p><pre><code>    在models.py文件中定义模型        引入：from django.db import models        模型类要继承models.Model类        示例：            class Grades(models.Model):                gname = models.CharField(max_length=20)                gdate = models.DateTimeField()                ggirlnum = models.IntegerField()                gboynum = models.IntegerField()                isDelete = models.BooleanField(default=False)            class Students(models.Model):                sname = models.CharField(max_length=20)                sgender = models.BooleanField(default=True)                sage = models.IntegerField()                scontend = models.CharField(max_length=20)                isDelete = models.BooleanField(default=False)                sgrade = models.ForeignKey(&quot;Grades&quot;, on_delete=models.CASCADE,)        说明：            不需要定义主键，在生成时自动添加，并且值为自动增加</code></pre><p>在数据库中生成数据表</p><pre><code>生成迁移文件    执行 python manage.py makemigrations    在migrations目录下生成一个迁移文件，此时数据库中还没有生成数据表执行迁移    执行 python manage.py migrate           相当于执行MySQL语句创建了数据表</code></pre><h2 id="测试数据操作"><a href="#测试数据操作" class="headerlink" title="测试数据操作"></a>测试数据操作</h2><p>进入到python shell</p><pre><code>执行 python manage.py shell</code></pre><p>引入包</p><pre><code>from myApp.models import Grades, Studentsfrom django.utils import timezonefrom datetime import *</code></pre><p>查询所有数据</p><pre><code>类名.objects.all()示例： Grades.objects.all()</code></pre><p>添加数据</p><pre><code>本质：创建一个模型类的对象实例示例：CMD窗口下：    grade1 = Grades()    grade1.gname = &quot;python04&quot;    grade1.gdate = datetime(year=2017, month=7, day=17)    grade1.ggirlnum = 3    grade1.gboynum = 70    grade1.save()</code></pre><p>查看某个对象</p><pre><code>类名.objects(pk=索引号)示例：    Grades.objects.get(pk=2)    Grades.objects.all()</code></pre><p>修改某个数据</p><pre><code>模型对象属性 = 新值示例：    grade2.gboynum = 60    grade2.save()</code></pre><p>删除数据</p><pre><code>模型对象.delete()grade2.delete()注意：这是物理删除，数据库中的相应数据被永久删除</code></pre><p>关联对象</p><pre><code>示例：    stu = Students()    stu.sname = &quot;Xue Yanmei&quot;    stu.sgender = False    stu.sage = 20    stu.scontend = &quot;I am Xue Yanmei&quot;    stu.sgrade = grade1    stu.save()获得关联对象的集合    需求：猎取python04班级的所有学生         对象名.关联的类名小写_set.all()         示例：grade1.students_set.all()    需求:创建曾志伟，属于python04班级        示例：            stu3 = grade1.students_set.create(sname=u&#39;Zhen Zhiwei&#39;,sgender=True,scontend=u&quot;I am Zhen Zhiwei&quot;,sage=45)        注意：这样创建的数据直接被添加到了数据库当中。</code></pre><p>启动服务器:</p><pre><code>格式：python manage.py runserver ip:port注意：ip可以不写，不写代表本机ip端口号默认是8000python manage.py runserver说明：    这是一个纯python编写的轻量级web服务器，仅仅在开发测试中使用这个</code></pre><p>Admin站点管理：</p><pre><code>概述：    内容发布：负责添加，修改，删除内容的    公告访问配置Admin应用：    在settings.py文件中的INSTALLED_APPS中添加&#39;django.contrib.admin&#39;,    这条默认是添加好的。创建管理员用户：    在项目目录下执行 python manage.py createsuperuser    依次输入账号名，邮箱，密码即可完成用户创建登陆：    http://127.0.0.1:8000/admin/汉化：    把project\settings.py    中作如下设定：LANGUAGE_CODE = &#39;zh-Hans&#39;                 TIME_ZONE = &#39;Asia/Shanghai&#39;</code></pre><p>管理数据表：</p><pre><code>修改 myAPP\admin.py 如下：    from django.contrib import admin    # Register your models here.    from .models import Grades, Students    # 注册    admin.site.register(Grades)    admin.site.register(Students)自定义管理页面：    属性说明        # 列表页属性        list_display = [] # 显示字段设置        list_filter = [] # 过滤字段设置        search_fields = [] # 搜索字段设置        list_per_page = [] # 分页设置        # 添加，修改页属性        fields = [] # 规定属性的先后顺序        fieldsets = [] # 给属性分组 注意：fields与fieldsets不能同时使用    属性示例：        # 列表页属性        list_display = [&#39;pk&#39;, &#39;gname&#39;, &#39;gdate&#39;, &#39;ggirlnum&#39;, &#39;gboynum&#39;, &#39;isDelete&#39;]        list_filter = [&#39;gname&#39;]        search_fields = [&#39;gname&#39;]        list_per_page = 5        # 添加，修改页属性        # fields = [&#39;ggirlnum&#39;, &#39;gboynum&#39;, &#39;gname&#39;, &#39;gdate&#39;, &#39;isDelete&#39;]        fieldsets = [            (&quot;num&quot;,&#123;&quot;fields&quot;:[&#39;ggirlnum&#39;, &#39;gboynum&#39;]&#125;),            (&quot;base&quot;, &#123;&quot;fields&quot;:[&quot;gname&quot;, &quot;gdate&quot;, &quot;isDelete&quot;]&#125;),        ]    关联对象：需求：在创建一个班级时可以直接添加几个学生        class StudentsInfo(admin.TabularInline):# 可选参数admin.StackedInline            model = Students            extra = 2        class GradesAdmin(admin.ModelAdmin):            inlines = [StudentsInfo]    布尔值显示问题示例：        class StudentsAdmin(admin.ModelAdmin):            def gender(self):                if self.sgender:                    return &quot;男&quot;                else:                    return &quot;女&quot;            # 设置页面列的名称            gender.short_description = &quot;性别&quot;            list_display = [&#39;pk&#39;, &#39;sname&#39;, &#39;sage&#39;, gender,                            &#39;scontend&#39;, &#39;sgrade&#39;, &#39;isDelete&#39;]            list_per_page = 10        admin.site.register(Students, StudentsAdmin)    执行按钮位置：        class StudentsAdmin(admin.ModelAdmin):            ...snip...            actions_on_top = False            actions_on_bottom = True        admin.site.register(Students, StudentsAdmin)    使用装饰器完成注册：        @admin.register(Students)            class StudentsAdmin(admin.ModelAdmin):                def gender(self):                ...snip...                actions_on_top = False                actions_on_bottom = True</code></pre><h2 id="视图的基本使用"><a href="#视图的基本使用" class="headerlink" title="视图的基本使用"></a>视图的基本使用</h2><pre><code>概述：    在Django中，视图是对web请求进行回应    视图就是一个python函数，在views.py文件中定义。定义视图：    示例：在myApp\views.py中写入        from django.shortcuts import render        # Create your views here.        from django.http import HttpResponse        def index(request):            return HttpResponse(&quot;Sunck is a good man&quot;)配置url：方法一：path方法:    修改project目录下的urls.py文件：        from django.contrib import admin        from django.urls import path, include        urlpatterns = [            path(&#39;admin/&#39;, admin.site.urls),            path(&#39;&#39;, include(&#39;myApp.urls&#39;)),        ]    在myApp应用目录下创建urls.py文件：        from django.urls import path, include        from . import views        urlpatterns = [            path(&#39;&#39;,views.index),        ]配置url：方法二：url方法:    修改project目录下的urls.py文件：        from django.contrib import admin        from django.conf.urls import url,include        urlpatterns = [            url(r&#39;^admin/&#39;, admin.site.urls),            url(r&#39;^&#39;, include(&#39;myApp.urls&#39;)),        ]    在myApp应用目录下创建urls.py文件：        from django.conf.urls import url        from . import views        urlpatterns = [            url(r&#39;^$&#39;, views.index),        ]</code></pre><h2 id="模板的基本使用："><a href="#模板的基本使用：" class="headerlink" title="模板的基本使用："></a>模板的基本使用：</h2><pre><code>概述：模板是HTML页面，可以根据视图中传递过来的数据进行填充创建模板：    创建templates目录，在目录下创建对应项目的模板目录（project/templates/myApp）配置模板路径：    修改settings.py文件下的TEMPLATES下的&#39;DIRS&#39;为&#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;)],定义grades.html与students.html模板：    在templates\myApp\目录下创建grades.html与students.html模板文件    模板语法：        &#123;&#123;输出值，可以是变量，也可以是对象，属性&#125;&#125;        &#123;%执行代码段%&#125;http://127.0.0.1:8000/grades    写grades.html模板：        &lt;!doctype html&gt;        &lt;html lang=&quot;en&quot;&gt;        &lt;head&gt;            &lt;meta charset=&quot;UTF-8&quot;&gt;            &lt;meta name=&quot;viewport&quot;                  content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;            &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;            &lt;title&gt;班级信息&lt;/title&gt;        &lt;/head&gt;        &lt;body&gt;            &lt;h1&gt;班级信息列表&lt;/h1&gt;            &lt;ul&gt;                &lt;!--[python04, python05, python06]--&gt;                &#123;%for grade in grades%&#125;                    <li>                        <a href="#">&#123;&#123;grade.gname&#125;&#125;</a>                    </li>                    &#123;%endfor%&#125;            &lt;/ul&gt;        &lt;/body&gt;        &lt;/html&gt;    定义视图：myApp\views.py        from .models import Grades        def grades(request):            # 去模板里取数据            gradesList = Grades.objects.all()            # 将数据传递给模板,模板再渲染页面，将渲染好的页面返回给浏览器            return render(request, &#39;myApp/grades.html&#39;, &#123;&quot;grades&quot;: gradesList&#125;)    配置url:myApp\urls.py    urlpatterns = [        url(r&#39;^$&#39;, views.index),        url(r&#39;^(\d+)/(\d+)$&#39;, views.detail),        url(r&#39;^grades/&#39;, views.grades)    ]http://127.0.0.1:8000/students    写students.html模板        &lt;!doctype html&gt;        &lt;html lang=&quot;en&quot;&gt;        &lt;head&gt;            &lt;meta charset=&quot;UTF-8&quot;&gt;            &lt;meta name=&quot;viewport&quot;                  content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;            &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;            &lt;title&gt;学生页面&lt;/title&gt;        &lt;/head&gt;        &lt;body&gt;            &lt;h1&gt;学生信息列表&lt;/h1&gt;            &lt;ul&gt;                &#123;%for student in students%&#125;                    <li>                        &#123;&#123;student.sname&#125;&#125;--&#123;&#123;student.scontend&#125;&#125;                    </li>                    &#123;%endfor%&#125;            &lt;/ul&gt;        &lt;/body&gt;        &lt;/html&gt;    定义视图：myApp\views.py        from .models import Students        def students(request):            studentsList = Students.objects.all()            return render(request, &#39;myApp/students.html&#39;, &#123;&quot;students&quot;: studentsList&#125;)    配置url:myApp\urls.py        urlpatterns = [        url(r&#39;^$&#39;, views.index),        url(r&#39;^(\d+)/(\d+)$&#39;, views.detail),        url(r&#39;^grades/&#39;, views.grades),        url(r&#39;^students/&#39;, views.students),    ]需求:点击班级，显示对应班级的学生名字    运行不正常https://www.bilibili.com/video/av17879644/?p=12</code></pre><h2 id="Django流程梳理"><a href="#Django流程梳理" class="headerlink" title="Django流程梳理"></a>Django流程梳理</h2><pre><code>创建工程：执行 django-admin startproject 工程名创建项目：执行 python manage.py startapp 项目名称激活项目：修改 settings.py中的INSTALLED_APPS配置数据库：    修改__init__.py文件    修改settings.py文件中的DATABASES创建模型类：在项目目录下的models.py文件中创建生成迁移文件：执行python manage.py makemigrations执行迁移：执行python manage.py migrate配置站点：略创建模板目录/项目模板目录在settings.py中的TEMPLATES添加templates路径在工程目录下（project）修改urls.py在项目目录下创建urls.py</code></pre><h2 id="使用他人Django代码需要的简易修改："><a href="#使用他人Django代码需要的简易修改：" class="headerlink" title="使用他人Django代码需要的简易修改："></a>使用他人Django代码需要的简易修改：</h2><pre><code>1.在settings.py中修改数据库名2.在settings.py中修改数据库密码3.删除由内向外文件（在对应目录里鼠标右键删除）4.在数据库中创建对应第一步的数据库(自己在SQL中创建)5.执行生成迁移文件6.执行迁移7.启动服务8.浏览器测试</code></pre><h2 id="Django模型"><a href="#Django模型" class="headerlink" title="Django模型"></a>Django模型</h2><pre><code>Django对各种数据库提供了很好的支持，Django为这些数据库提供了统一的调用API我们可以根据不同的业务需求选择不同的数据库。配置数据库    修改工程目录下的__init__.py文件        import pymysql        pymysql.install_ad_MySQLdb()    修改settings.py文件中的DATABASES开发流程    配置数据库    定义模型类：一个模型都在数据库中对应一张数据库表    生成迁移文件    执行迁移生成数据表    使用模型类进行增删改查ORM    概述：对象-关系-映射    任务：        根据对象的类型生成表结构        将对象，列表的操作转换成SQL语句        将SQL语句查询到的结果转换为对象，列表    优点：        极大的减轻了开发人员的工作量，不需要面对因数据库的变更而修改代码的问题定义模型    模型，属性，表，字段之间的关系        一个模型类在数据库中对应一张表，在模型类中定义的属性，对应该模型对照表中的一个字段    定义属性：见下文    创建模型类    元选项        在模型类中定义Meta类，用于设置元信息        示例：            class Meta:                db_table = &quot;students&quot;                ordering = [&#39;id&#39;]        db_table            定义数据表名，推荐用小写字母，数据表名默认为项目名小写_类名小写        ordering            对象的默认排序字段，获取对象的列表时使用            示例：                ordering[&#39;id&#39;] id按升序排列                ordering[&#39;-id&#39;] id按降序排列            注意：排序会增加数据库开销模型成员    类属性        隐藏类属性objects：            是Manager类型的一个对象，作用是与数据库进行交互            当定义模型类时没有指定管理器，则Django为模型创建一个名为objects的管理器        自定义管理器示例：            定义stuObj管理器：                stuObj = models.Manager()            当为模型指定模型管理器，Django就不再为模型类生成objects模型管理器了。        自定义管理器Manager类            模型管理器是Django的模型进行与数据库交互的窗口，一个模型可以有多个模型管理器            作用：                向管理器类中添加额外的方法                修改管理器返回的原始查询集                    通常会重写get_queryset()方法            代码示例：                class StudentsManager(models.Manager):                    def get_queryset(self):                        return super(StudentsManger, self).get_queryset().filter(isDelete=False)                class Students(model.Moder):                    # 自定义模型管理器                    # 当自定义模型管理器，objects就不存在了                    stuObj = models.Manger()                    stuObj2 = StudentsManager()    创建对象        目的：向数据库中添加数据        当创建对象时，django不会对数据库进行读写操作，当调用save()方法时才与数据库交互，将对象保存在数据库表中。        注意：            __init__方法已经在父类models.Model中使用，在自定义的模型中无法使用。        方法：            在模型类中增加一个类方法，示例如下：                class Students(model.Moder):                    ...snip...                     @classmethod                    def createStudent(cls, name, age, gender, contend,                                      grade,lastT, createT, isD=False):                        stu = cls(sname=name, sage=age, sgender=gender,                                    scontend=contend, sgrade=grade, lastTime=lastT, createTime=createT,                                    isDelete=isD)                        return stu            在自定义管理器中添加一个方法,示例如下：                class StudentsManager(models.Manager):                    def get_queryset(self):                        return super(StudentsManager, self).get_queryset().filter(isDelete=False)                    def createStudent(self, name, age, gender, contend, grade, lastT, createT, isD=False):                        stu = self.model()                        # print(type(grade))                        stu.sname = name                        stu.sage = age                        stu.sgender = gender                        stu.scontend = contend                        stu.sgrade = grade                        stu.lastTime = lastT                        stu.createTime = createT                        return stu    模型查询        概述            查询集表示从数据库获取的对象的集合            查询集可以有多个过滤器            过滤器就是一个函数，基于所给的参数限制查询集结果            从SQL角度来说，查询集和select语句等价，过滤器就像where条件        查询集            在管理器上调用过滤器方法返回查询集            查询集经过过滤器筛选后返回新的查询集，所以可以写成链式调用            惰性执行                创建查询集不会带来任何数据库的访问，直到调用数据库时，才会访问数据            直接访问数据的情况：                迭代                序列化                与if合用            返回查询集的方法称为过滤器                all()：返回查询集中的所有数据                filter()：保留符合条件的数据                    filter(键=值)                    filter(键=值，键=值)                    filter(键=值).filter(键=值)   且的关系                exclude()：过滤掉符合条件的                order_by()：排序                values():一条数据就是一个字典，返回一个列表                get()                    返回一个满足条件的对象                    注意：                        如果没有找到符合条件的对象，会引发模型类.DoesNotExist异常                        如果找到多个对象，会引发模型类MultipleObjectsReturned异常                count()：返回查询集中对象的个数                first()：返回查询集中第一个对象                last():返回查询集中最后一个对象                exits()：判断查询集中是否有数据，如果有数据返回 True,否则返回 False.            限制查询集                查询集返回列表，可以使用下标的方法进行限制，等同于sql中的limit语句                注意：下标不能是负数                示例：studentsList = Students.stuObj2.all()[0:5]            查询集的缓存                概述：                    每个查询集都包含一个缓存，来最小化对数据库的访问                    在新建的查询集中，缓存首次为空，第一次对查询集求值，会发生数据缓存，Django会将查询出来的数据做一个缓存，并返回查询结果。                    以后的查询直接使用查询集的缓存            字段查询                概述                    实现了sql中的where语句，作为方法filter(),exclude(),get()的参数                    语法：属性名称__比较运算符=值                    外键：属性名称_id                    转义：类似sql中的like语句                         like有关情况看我哥他%是为了匹配点位，匹配数据中的%使用（where like &quot;\%&quot;）                         filter(sname__contains=&quot;%&quot;)                比较运算符                    exact:判断，大小写敏感                        filter(isDelete=False)                    contains：是否包含，大小写敏感                        studentsList = Students.stuObj2.filter(sname__contains=&quot;孙&quot;)                    startswith,endswith:以value开头或结尾，大小写敏感                    以上四个在前面加上i，就表示不区分大小写iexact,icontains,istartswith,iendswith                    isnull,isnotnull                        是否为空                        filter(sname__isnull=False)                    in:是否包含在范围内                    gt大于,gte大于等于,lt小于,lte小于等于                    year,month,day,week_day,hour,minute,second                        studentsList = Students.stuObj2.filter(lastTime__year=2017)                    跨关联查询                        处理join查询                            语法:                                模型类名__属性名__比较运算符                                # 描述中带有‘薛延美’这三个字的数据是属于哪个班级的                                grade = Grades.objects.filter(students__scontend__contains=&#39;薛延美&#39;)                                print(grade)                        查询快捷pk代表的主键                    聚合函数                        使用aggregate函数返回聚合函数的值                        Avg                        Count                        Max                            maxAge = Student.stuObj2.aggregate(Max(&#39;sage&#39;))                            maxAge为最大的sage。                        Min                        Sum                    F对象                        可以使用模型的A属性与B属性进行比较                        from django.db.models import F,Q                        def grades1(request):                            g = Grades.objects.filter(ggirlnum__gt=F(&#39;gboynum&#39;))                            print(g)                            # [&lt;Grades: python02&gt;,&lt;Grades: python03&gt;]                            return HttpResponse(&quot;OOOOOOOo&quot;)                        支持F对象的算术运算                            g = Grades.objects.filter(ggirlnum__gt=F(&#39;gboynum&#39;)+20)                    Q对象                        概述：过滤器的方法的关键字参数，条件为And模式                        需求：进行or查询                        解决：使用Q对象                            def students4(request):                                studentsList = Students.stuObj2.filter(Q(pk__lte=3) | Q(sage__gt=50))                                return render(request, &#39;myApp/students.html&#39;, &#123;&quot;students&quot;: studentsList&#125;)                            只有一个Q对象的时候，就是用于正常匹配条件                            studentsList = Students.stuObj2.filter(~Q(pk__lte=3))                            ~Q是取反</code></pre><h2 id="定义属性"><a href="#定义属性" class="headerlink" title="定义属性"></a>定义属性</h2><pre><code>概述：    django根据属性的类型确定以下信息        当前选择的数据库支持字段的类型        渲染管理表单时使用的默认html控件        在管理站点最低限度的验证    django会为表增加自动增长的主键列，每个模型只能有一个主键列，如    果使用选项设置某属性为主键列后，则django不会再生成默认的主键列    属性命名限制        遵循标识符规则，且变量不能与Python保留字相同        由于django的查询方式，不允许使用连续的下划线库    定义属性时，需要字段类型，字段类型被定义在django.db.models.fields目录下，    为了方便使用，被导入到django.db.models中    使用方式        导入: from django.db import models        通过 models.Field创建字段类型的对象，赋值给属性逻辑删除    对于重要类型都做逻辑删除，不做物理删除，实现方法是定义idDelete属性，    类型为BooleanField,默认值为False字段类型    autoField        一个根据实际ID自动增长的IntegerField,通常不指定，        如果不指定，一个主键字段将自动添加到模型中    CharField(max_length=字符长度)        字符串，默认的表彰样式是TextInput    TextField        大文本字段，一般超过4000时使用，默认的表单控件是Textarea    IntegerField        整数    DecimalField(max_digits=None, decimal_places=None)        使用Python的Decimal实例表示的十进制浮点数        参数说明            DecimalField.max_digits                位数总数            DecimalField.decimal_places                小数点后的数字位置    FloatField        使用Python的float实例来表示的浮点数    BooleanField        True/False 字段，此字段的默认表彰控制是CheckboxInput    NullBooleanField        支持 Null, True, False 三种值    DateField([auto_now=False, auto_now_add=False])        使用Python的datetime.date实例表示的日期        参数说明：            DateField.auto_now                每次保存对象时，自动设置该字段为当前时间，用于“最后一次修改”                的时间戳，它总是使用当前日期，默认为 False            DateField.auto_now_add                当前对象第一次被创建时自动设置当前时间，用于创建的时间戳，                它总是使用当前日期，默认为 False        说明            该字段默认对应的表单控件是一个TextInput.在管理员站点添加了一个            JavaScript写的日历控件，和一个“Today”的快捷按钮，包含了一个额外            的invalid_date错误消息键        注意            auto_now_add, auto_now, and default 这些设置是相互排斥的，他们之间            的任何组合将会发生错误的结果    TimeField        使用Python的datetime.time实例表示的时间，参数同DateField    DateTimeField        使用Python的datetime        datetime实例表示的日期和时间，参数同DateField    FileField        一个上传文件的字段    ImageField        继承了FileField的所有属性和方法，但对上传的对象进行校验，        确保它是一个有效的image字段选项    概述        通过字段选项，可以实现对字段的约束        在字段对象中通过关键字参数指定    null        如果为True,Django将空值以NULL存储在数据库中，默认值为 False    blanke        如果为True,则该字段允许为空白，默认值为 False    注意        null是数据库范畴的概念，blank是表彰验证范畴的概念    db_column        字段的名称，如果未指定，则使用属性的名称    db_index        若值为 True,则在表中会为此字段创建索引    default        默认值    primary_key        若为 True,则该字段会成为模型的主键字段    unique        如果为 True,这个字段在表中必须有唯一值关系    分类        ForeignKey:一对多，将字段定义在多的端中        ManyToManyField:多对多，将字段定义在两端中        OneToOneField：一对一，将字段定义在任意一端中    用一访问多        格式            对象.模型类小写_set        示例            grade.students_set    用一访问一        格式            对象.模型类小写        示例            grade.studnets    访问id        格式            对象.属性_id        示例            student.sgrade_id</code></pre><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><pre><code>概述：    作用：视图接收web请求，并响应web请求    本质：视图就是python中的一个函数    响应：        响应过程：            用户在浏览器中输入网址www.sunck.wang/sunck/index.html            ---网址---&gt;            django获取网址信息，去掉IP与端口号，网址变成：sunck/index.html            ---虚拟路径与文件名---&gt;            url管理器逐个匹配urlconf,记录视图函数            ---视图函数名---&gt;            视图管理，找到对应的视图去执行，返回结果给浏览器            ---响应的数据---&gt;            返回第一步：用户在浏览器中输入网址        网页            重定向            错误视图                404视图：找不到网页（url匹配不成功时返回）时返回                    在templates目录下定义404.html                        &lt;!doctype html&gt;                        &lt;html lang=&quot;en&quot;&gt;                        &lt;head&gt;                            &lt;meta charset=&quot;UTF-8&quot;&gt;                            &lt;meta name=&quot;viewport&quot;                                  content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;                            &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;                            &lt;title&gt;Document&lt;/title&gt;                        &lt;/head&gt;                        &lt;body&gt;                            &lt;h1&gt;页面丢失&lt;/h1&gt;                            &lt;h2&gt;&#123;&#123;request_path&#125;&#125;&lt;/h2&gt;                        &lt;/body&gt;                        &lt;/html&gt;                        request_path:导致错误的网址                    配置settings.py                        DEBUG                            如果为 True,永远不会调用404页面，需要调整为 False 才会显示                        ALLOWED_HOSTS = [&#39;*&#39;]                500视图：在视图代码中出现错误（服务器代码错误）                400视图：错误出现在客户的操作        JSON数据url配置    配置流程：        制定根级url配置文件            settings.py文件中的ROOT_URLCONF            ROOT_URLCONF = &#39;project.urls&#39;            默认实现了        urlpatterns            一个url实例的列表            url对象                正则表达式                视图名称                名称        url匹配正则的注意事项            如果想要从url中获取一个值，需要对正则加小括号            匹配正则前方不需要加&#39;/&#39;            正则前需要加&#39;r&#39;表示字符串不转义    引入其他url配置        在应用中创建urls.py文件，定义本应用的url配置，在工程urls.py中使用include方法            project\urls.py            from django.contrib import admin            from django.conf.urls import url,include            urlpatterns = [                url(r&#39;^admin/&#39;, admin.site.urls),                url(r&#39;^&#39;, include(&#39;myApp.urls&#39;, namespace=&quot;myAPP&quot;)),            ]            myApp\urls.py            from django.urls import path, include            from django.conf.urls import url            from . import views            urlpatterns = [                url(r&#39;^$&#39;, views.index, name=&quot;index&quot;),            ]    url的反向解析        概述：如果在视图，模板中使用了硬编码链接，在url配置发生改变时，动态生成链接的地址        解决：在使用链接时，通过url配置的名称，动态生成url地址        作用：使用url模板视图函数    定义视图：        本质：一个函数        视图参数：            一个HttpRequest的实例            通过正则表达式获取的参数        位置：一般在views.py文件下定义HttpRequest对象    概述：        服务器接收http请求后，会根据报文创建HttpRequest对象        视图的第一个参数就是HttpRequest对象        django创建的，之后调用视图时传递给视图    属性        path:请求的完整路径（不包括域名和端口）        method:表示请求的方式，常用的有GET,POST        encoding:表示浏览器提交的数据的编码方式，一般为utf-8        GET：类似于字典的对象，包含了get请求的所有参数        POST:类似于字典的对象，包含了post请求的所有参数        FILES:类似字典的对象，包含了所有上传的文件        COOKIES:字典，包含所有的cookie        session:类似字典的对象，表示当前会话    方法        is_ajax():如果是通过XMLHttpRequest发起的，返回 True    QueryDict对象        request对象中的GET,POST都属于QueryDict对象        方法：            get():                根据键获取值，只能获取一个值                www.sunck.wang/abc?a=1&amp;b=2&amp;c=3            getlist()                将键的值以列表的形式返回                可以获取多个值                www.sunck.wang/abc?a=1&amp;b=2&amp;c=3    GET属性        获取浏览器传递过来数据        www.sunck.wang/abc?a=1&amp;b=2&amp;c=3        urls.py        url(r&#39;^get1&#39;, views.get1),   #结尾不能加$,否则无法匹配        views.py        def get1(request):            a = request.GET.get(&#39;a&#39;)            b = request.GET.get(&#39;b&#39;)            c = request.GET.get(&#39;c&#39;)            return HttpResponse(a + &quot; &quot; + b + &quot; &quot; + c)        www.sunck.wang/abc?a=1&amp;a=2&amp;c=3        urls.py        url(r&#39;^get2&#39;, views.get2),        views.py        def get2(request):            a = request.GET.getlist(&#39;a&#39;)            a1 = a[0]            a2 = a[1]            c = request.GET.get(&#39;c&#39;)            return HttpResponse(a1 + &quot; &quot; + a2 + &quot; &quot; + c)    POST属性        使用表单模拟POST请求        关闭CSRF:project\project\settings.py            MIDDLEWARE = [                &#39;django.middleware.security.SecurityMiddleware&#39;,                &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,                &#39;django.middleware.common.CommonMiddleware&#39;,                # &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,                &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,                &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,                &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,            ]        示例：            def showregist(request):                return render(request, &#39;myApp/regist.html&#39;,)            def regist(request):                name = request.POST.get(&quot;name&quot;)                gender = request.POST.get(&quot;gender&quot;)                age = request.POST.get(&quot;age&quot;)                hobby = request.POST.getlist(&quot;hobby&quot;)                print(name)                print(gender)                print(age)                print(hobby)                return HttpResponse(&quot;regist&quot;)        路径：            url(r&#39;^showregist/$&#39;, views.showregist),                url(r&#39;^showregist/regist/$&#39;, views.regist),        页面：               &lt;!doctype html&gt;            &lt;html lang=&quot;en&quot;&gt;            &lt;head&gt;                &lt;meta charset=&quot;UTF-8&quot;&gt;                &lt;meta name=&quot;viewport&quot;                      content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;                &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;                &lt;title&gt;注册&lt;/title&gt;            &lt;/head&gt;            &lt;body&gt;                &lt;form action=&quot;regist/&quot; method=&quot;post&quot;&gt;                    姓名：&lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;&quot;/&gt;                    &lt;hr&gt;                    性别：&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;1&quot;&gt;男&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;0&quot;&gt;女                    &lt;hr&gt;                    爱好：&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;power&quot;/&gt;权利&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;money&quot;&gt;金钱&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;beauty&quot;&gt;美女&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;Tesla&quot;&gt;Tesla                    &lt;hr&gt;                    &lt;input type=&quot;submit&quot; value=&quot;注册&quot;&gt;                &lt;/form&gt;            &lt;/body&gt;            &lt;/html&gt;HttpResponse对象    概述：        作用：给浏览器返回数据        HttpRequest对象是由Django创建的，HttpResponse对象是由程序员创建    用法：        不用模板，直接返回数据            语句示例：return HttpResponse(&quot;Sunck is a good man&quot;)        调用模板            使用render方法                原型：render(request, templateName[, context])                作用:结合数据和模板，返回一个完整的HTML页面                参数：                    request：请求体对象                    templateName：模板路径                    context：传递给需要渲染在模板上的数据    属性        content:表示返回内容        charset:编码格式        status_code:响应状态码            200            304            404            400        content-type:指定输出的MIME类型    方法        init:使用页面内容实例化HttpResponse对象        write(content):以文件的形式写入        flush():以文件的形式输出缓冲区        set_cookie(key, value, maxAge=None, exprise=None)        delete_cookie(key):            删除cookie            如果删除一个不存在的cookie，就当什么都没发生    子类HttpResponseRedirect        功能：重定向，服务器端的跳转        简写            redirect(to)        to推荐使用反向解析        示例：            from django.http import HttpResponseRedirect            from django.shortcuts import redirect            def redirect1(request):                # return HttpResponseRedirect(&#39;/redirect2&#39;)                return redirect(&#39;/redirect2&#39;)            def redirect2(request):                return HttpResponse(&quot;我是重定向后的视图&quot;)    子类JsonResponse        返回Json数据，一般用于异步请求        __init__(self.data)        data 字典        注意：Content-type类型为application/json状态保持    http协议是无状态的，每次请求都是一次新的请求，它不记得之前的请求。    客户端与服务器的一次通信就是一次会话    实现状态的保持，在客户端或服务端存储有关会话的数据    存储的方式        cookie:所有数据存储在客户端，不要存储敏感的数据        session:所有的数据存储在服务端，在客户端用cookie存储session_id    状态保持的目的:        在一段时间内跟踪请求者的状态，可以实现跨页面访问当前的请求者的数据    注意：不同的请求者之间不会共享这个数据，与请求者一一对应    启用session:project\project\settings.py        INSTALLED_APPS    &#39;django.contrib.sessions&#39;,        MIDDLEWARE    &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,    使用session        启用session后，每个httpRequest对象都有一个session属性        get[key, default=None]    根据键获取session值        clear()    清空所有会话        flush()    删除当前会话并删除会话的cookie        示例：            # session            def main(request):                # 取session                username = request.session.get(&#39;name&#39;, &#39;游客&#39;)                print(username)                return render(request, &#39;myApp/main.html&#39;, &#123;&#39;username&#39;: username&#125;)            def login(request):                return render(request, &#39;myApp/login.html&#39;)            def showmain(request):                print(&quot;*****************&quot;)                username = request.POST.get(&#39;username&#39;)                # 存储session                request.session[&#39;name&#39;] = username                return redirect(&#39;/main/&#39;)            from django.contrib.auth import logout            def quit(request):                # 清除session                logout(request) # 方法1，推荐                # request.session.clear() # 方法2                request.session.flush() # 方法3                return redirect(&#39;/main/&#39;)    设置session过期时间        set_expiry(value)        request.session.set_expiry(10)  设置为10秒后过期        如果不设置，2个星期后过期        value设置为0代表关闭浏览器时过期        value设置为None代表设置永不过期，不推荐</code></pre><h2 id="Redis使用"><a href="#Redis使用" class="headerlink" title="Redis使用"></a>Redis使用</h2><p>略</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Datamodel</title>
      <link href="2021/06/23/Datamodel/"/>
      <url>2021/06/23/Datamodel/</url>
      
        <content type="html"><![CDATA[<h1 id="datamodel"><a href="#datamodel" class="headerlink" title="datamodel"></a>datamodel</h1><p>datamodel 是一个可以从 JSON 映射到 Python 类的模块。</p><p><strong>支持：</strong></p><ul><li><input checked="" disabled="" type="checkbox"> 字典转对象 ( <code>dict</code> → <code>object</code> )；</li><li><input checked="" disabled="" type="checkbox"> 列表转对象数组 ( <code>list</code> → <code>List[object]</code> )；</li><li><input checked="" disabled="" type="checkbox"> 对象转字典 ( <code>object</code> → <code>dict</code> )；</li><li><input checked="" disabled="" type="checkbox"> 对多层级嵌套的数据结构支持友好。</li></ul><p>目前网上并没有一个比较好的 JSON to Model 库，就算有，其写法也大多繁琐。由于做项目需要经常把从服务器上请求到的 JSON  转换到对应类的实例，于是决定自己写一个。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install datamodel</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong>JSON 转类对象</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">包括需要继承的 Datamodel 类，dataclasses 模块中的 dataclass 装饰器；</span></span><br><span class="line"><span class="string">以及 typing 模块中常用的 List 和 Dict 类型。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> datamodel <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">Datamodel</span>):</span></span><br><span class="line">    name: <span class="built_in">str</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age: <span class="built_in">int</span> = <span class="number">0</span></span><br><span class="line">    height: <span class="built_in">int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">p = Person.decoder(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;HjzCy&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;age&quot;</span>: <span class="number">18</span>,</span><br><span class="line">                    <span class="string">&quot;height&quot;</span>: <span class="number">170</span></span><br><span class="line">                    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Person(name=&#x27;HjzCy&#x27;, age=18, height=170)</span></span><br><span class="line"><span class="built_in">print</span>(p)</span><br></pre></td></tr></table></figure><p><strong>类对象转 JSON</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;HjzCy&#x27;, &#x27;age&#x27;: 18, &#x27;height&#x27;: 170&#125;</span></span><br><span class="line"><span class="built_in">print</span>(p.asdict())</span><br></pre></td></tr></table></figure><p><strong>JSON 转类型实例列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="string">&quot;&quot;&quot;[&#123;</span></span><br><span class="line"><span class="string">    &quot;name&quot;: &quot;HjzCy&quot;,</span></span><br><span class="line"><span class="string">    &quot;age&quot;: &quot;18&quot;,</span></span><br><span class="line"><span class="string">    &quot;height&quot;: &quot;170&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;name&quot;: &quot;YDMS&quot;,</span></span><br><span class="line"><span class="string">    &quot;age&quot;: &quot;15&quot;,</span></span><br><span class="line"><span class="string">    &quot;height&quot;: &quot;176&quot;</span></span><br><span class="line"><span class="string">&#125;]&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">p_list = Person.decoder(data)</span><br><span class="line"><span class="comment"># [Person(name=&#x27;HjzCy&#x27;, age=18, height=170), Person(name=&#x27;YDMS&#x27;, age=15, height=176)]</span></span><br><span class="line"><span class="built_in">print</span>(p_list)</span><br></pre></td></tr></table></figure><h2 id="Api"><a href="#Api" class="headerlink" title="Api"></a>Api</h2><ul><li><p><strong><code>decoder(cls, data: object)</code></strong></p><p>接收一个 <code>dict</code> 、<code>list</code> 或 <code>str</code> 类型的值作为参数，返回<strong>对应类型的实例</strong>或<strong>对应类型的实例列表</strong>。并且支持自动类型转换。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ip</span>(<span class="params">Datamodel</span>):</span></span><br><span class="line">    ip: <span class="built_in">str</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    port: <span class="built_in">int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意: 被解析的 port 字段值是 str 型</span></span><br><span class="line"><span class="comment"># Ip(ip=&#x27;192.136.1.95&#x27;, port=8080)</span></span><br><span class="line"><span class="built_in">print</span>(Ip.decoder(&#123;<span class="string">&quot;ip&quot;</span>: <span class="string">&quot;192.136.1.95&quot;</span>, <span class="string">&quot;port&quot;</span>: <span class="string">&quot;8080&quot;</span>&#125;))</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果某些值不能自动转换到对应的类型，则保留默认值。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment"># Ip(ip=&#x27;192.136.1.95&#x27;, port=0)</span></span><br><span class="line">  <span class="built_in">print</span>(Ip.decoder(&#123;<span class="string">&quot;ip&quot;</span>: <span class="string">&quot;192.136.1.95&quot;</span>, <span class="string">&quot;port&quot;</span>: <span class="string">&quot;a1234&quot;</span>&#125;))</span><br><span class="line"></span><br><span class="line">- **`asdict()`**</span><br><span class="line"></span><br><span class="line">  将类实例对象转换为对应字段的字典。</span><br><span class="line"></span><br><span class="line"><span class="comment">## 使用说明</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> **类必须经过 `@dataclass` 修饰**</span><br><span class="line"></span><br><span class="line">    python <span class="number">3.7</span> 的新特性，为简单起见，约束所有类型必须使用。参阅 [理解 Python 的 Dataclasses](https://zhuanlan.zhihu.com/p/<span class="number">59657729</span>)。</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span> **必须为所有属性提供默认值 ( 可为 `<span class="literal">None</span>` )**</span><br><span class="line"></span><br><span class="line">    暂时强制遵守。原因我要在 `decoder` 方法中实例化传进来的类，如果该类中包含只是定义而不初始化的字段时，就会报错。例如：</span><br><span class="line">    ```python</span><br><span class="line"><span class="meta">    @dataclass</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">        name: <span class="built_in">str</span></span><br><span class="line">        age: <span class="built_in">int</span></span><br></pre></td></tr></table></figure><p>  该 <code>Person</code> 传到 <code>decoder</code> 方法中会报错！</p></li></ul><ol start="3"><li><p><strong>不会检测 <code>__init__</code> 中定义的属性</strong></p><p> 如果你已经使用了 <code>@dataclass</code> 修饰类，也许就没必要在定义一个 <code>__init__</code> 方法了。如果需要，请在 <code>__post_init_</code> 方法中执行初始化后要执行的额外操作。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Datamodel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Datamodel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven教学资料</title>
      <link href="2021/06/15/Maven/"/>
      <url>2021/06/15/Maven/</url>
      
        <content type="html"><![CDATA[<h1 id="maven教学资料"><a href="#maven教学资料" class="headerlink" title="maven教学资料"></a>maven教学资料</h1><h2 id="一、项目构建"><a href="#一、项目构建" class="headerlink" title="一、项目构建"></a>一、项目构建</h2><blockquote><p>给你一套源代码，你怎么能跑起来？</p></blockquote><ul><li><p>不能把！就是几个文件夹，几个文件。是不能运行的！</p></li><li><p>是不是需要和idea打交道，告诉idea怎么样才能运行起来，比如知道main方法在哪里？配置文件在哪里，编译好的文件输出到哪里，是不是？当然eclipse也一样。</p></li></ul><blockquote><p>平时我们是怎么构建项目的，项目怎么运行起来呢？</p></blockquote><ul><li>idea帮我们编译</li><li>我们依靠点击构建项目</li><li>一切设置好以后，使用工具（idea）帮我们打包</li></ul><blockquote><p>项目构建中几个关键点?</p></blockquote><ul><li>1、jdk啥版本</li><li>2、哪些文件夹是干啥的！！ 源文件？配置文件？测试文件？在哪里？</li><li>3、如果是web工程，web.xml放哪里？</li><li>4、编译文件，编译后的文件放在哪里。</li><li>5、打包，打包成什么文件</li></ul><h3 id="1、先聊一聊idea的项目结构"><a href="#1、先聊一聊idea的项目结构" class="headerlink" title="1、先聊一聊idea的项目结构"></a>1、先聊一聊idea的项目结构</h3><blockquote><p>好好说说Project Structure</p></blockquote><ul><li>英 /ˈstrʌktʃə(r)/<br>“ 项目结构”对话框允许您管理项目和IDE级别的元素，例如Modules，Facets，Libraries， Artifacts和SDK</li></ul><p><img "" class="lazyload placeholder" data-original="https://img11.360buyimg.com/ddimg/jfs/t1/193906/12/8169/41009/60c85164Efe97ea14/1492b6e2dc2ccb11.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><blockquote><p>打开方式有两种</p></blockquote><p>1、通过工具栏</p><p><img "" class="lazyload placeholder" data-original="https://img14.360buyimg.com/ddimg/jfs/t1/194272/25/8231/14726/60c85198Ee4dde897/5617f11371f36d18.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><p>2、通过快捷键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+Shift+Alt+S</span><br></pre></td></tr></table></figure><h4 id="（1）Project选项"><a href="#（1）Project选项" class="headerlink" title="（1）Project选项"></a>（1）Project选项</h4><p>指定项目名称，SDK，语言级别和编译器输出路径。</p><p><img "" class="lazyload placeholder" data-original="https://img14.360buyimg.com/ddimg/jfs/t1/175847/32/14327/91596/60c8522aE2e6d7e1e/ce0130164bb867c6.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><ul><li>Project name：项目名，使用此字段编辑项目名称。</li><li>Project SDK：项目SDK，选择项目SDK。如果所需SDK不在列表中，请单击“ New”，然后选择所需<br>的SDK类型。然后，在打开的对话框中，选择SDK主目录，然后单击确定。要查看或编辑所选SDK<br>的名称和内容，请单击”Edit”。（SDK页面将打开。）</li><li>Project language level：选择要支持的Java语言级别。选定的级别将被用作项目默认值。</li><li>Project compiler output：项目编译器输出，指定IntelliJ IDEA将存储编译结果的路径。单击选择<br>路径对话框中browseButton 的目录。</li><li>指定目录中的两个子目录将被创建：</li><li>production为生产代码。</li><li>test为测试来源。</li><li>在这些子目录中，将为每个模块创建单独的输出目录。输出路径可以在模块级重新定义。</li></ul><h4 id="（2）Modules-选项"><a href="#（2）Modules-选项" class="headerlink" title="（2）Modules 选项"></a>（2）Modules 选项</h4><p>指定项目名称，SDK，语言级别和编译器输出路径。</p><p><img "" class="lazyload placeholder" data-original="https://img11.360buyimg.com/ddimg/jfs/t1/189287/23/8371/70360/60c852a9Ef0ee39e3/3be8097c19b8e6ad.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><ul><li><p>Name：项目名称</p></li><li><p>Souces：这里对Module的开发目录进行文件夹分类，就是说这个module里有什么内容，说明了<br>不同性质的内容放在哪里。</p><p>  注意，这些不同内容的标记代表了一个标准Java工程的各项内容，IntelliJ就是根据这些标记来识别<br>  一个Java工程的各项内容的，比如，它会用javac去编译标记为Sources的源码，打包的时候会把标<br>  记为Resources的资源拷贝到jar包中，并且忽略标记为Exluded的内容。左边显示的是在选中内容<br>  的预览。</p></li><li><p>Paths：为模块配置编译器输出路径，还可以指定与模块关联的外部JavaDocs和外部注释的位置。</p></li><li><p>Dependencies：在此选项卡上，您可以定义模块SDK并形成模块依赖关系列表。</p></li></ul><h4 id="（3）Sources选项"><a href="#（3）Sources选项" class="headerlink" title="（3）Sources选项"></a>（3）Sources选项</h4><ul><li>Sources：源代码存放的文件，蓝色。</li><li>Tests：设置测试代码存放的文件件，绿色。</li><li>Resources：一般对应着Sources文件，一般放配置文件，如：db.properties。</li><li>Test Resources：这个对应着Tests文件夹，存放着Tests代码的配置文件。</li><li>Excluded：设置配出编译检查的文件，例如我们在project模块设置的out文件夹。</li></ul><h4 id="（4）Paths"><a href="#（4）Paths" class="headerlink" title="（4）Paths"></a>（4）Paths</h4><p><img "" class="lazyload placeholder" data-original="https://img11.360buyimg.com/ddimg/jfs/t1/178495/23/9268/192020/60c8536aE1ab7cf45/26a2dc46e78b7af1.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><ul><li><p>Compiler output：编译输出路径。</p></li><li><p>Inherit project compile output path：继承项目编译输出路径 选择此选项以使用为项目指定的路<br>径。即上面在Project选项中设置的out文件路径。</p></li><li><p>Use module compile output path:使用模块编译输出路径。</p><p>  Output path：编译输出路径。</p><p>  Test output path：测试代码编译输出路径。</p><p>  Exclude output paths： 排除输出路径，选中此复选框可以排除输出目录。</p></li><li><p>JavaDoc：使用可用控件组合与模块关联的外部JavaDocs存储位置的列表。</p></li><li><p>External Annotations：外部注释。使用 和 管理与模块关联的外部注释的位置（目录）列<br>表。</p></li></ul><h4 id="（5）Dependencies"><a href="#（5）Dependencies" class="headerlink" title="（5）Dependencies"></a>（5）Dependencies</h4><p>在此选项卡上，您可以定义模块SDK并形成模块依赖关系列表。</p><p><img "" class="lazyload placeholder" data-original="https://img14.360buyimg.com/ddimg/jfs/t1/184112/34/9034/86034/60c853f3E8d7dc824/2117ba0c2f3987fb.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><ul><li>Module SDK：模块SDK，选择模块SDK。<br>  （要将项目SDK与模块相关联，请选择Project SDK。请注意，如果稍后更改了项目SDK，模块SDK<br>  将相应更改。<br>  如果所需SDK不在列表中，请单击“ 新建”，然后选择所需的SDK类型。然后，在打开的对话框中，<br>  选择SDK主目录，然后单击确定。<br>  要查看或编辑所选SDK的名称和内容，请单击编辑。（SDK页面将打开。）</li><li>依赖列表</li><li>相关性存储格式，选择用于存储依赖关系的格式（作为IntelliJ IDEA模块或Eclipse项目）。该选项<br>对使用不同开发工具的团队有帮助。</li></ul><h4 id="（6）Libraries"><a href="#（6）Libraries" class="headerlink" title="（6）Libraries"></a>（6）Libraries</h4><p>在此选项卡上，您可以定义模块SDK并形成模块依赖关系列表。<br>首先，可以创建一个新的项目库，可以设置分类。</p><p><img "" class="lazyload placeholder" data-original="https://img11.360buyimg.com/ddimg/jfs/t1/186804/30/8635/62102/60c9dbfcE4a598cdd/b0657acb513baad1.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><p>可以添加本地jar包，网络来源的jar包，删除jar包。</p><p><img "" class="lazyload placeholder" data-original="https://img14.360buyimg.com/ddimg/jfs/t1/172875/13/15046/109157/60c9dc60E37b37473/b737611cf3faf2b6.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><h4 id="（7）Facets"><a href="#（7）Facets" class="headerlink" title="（7）Facets"></a>（7）Facets</h4><p>表示这个 module 有什么特征，比如 Web，Spring 和 Hibernate 等；</p><p><img "" class="lazyload placeholder" data-original="https://img13.360buyimg.com/ddimg/jfs/t1/183571/10/9259/183782/60c9de87E32b97c1c/c51115f1d4fae881.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><h4 id="（8）Artifacts"><a href="#（8）Artifacts" class="headerlink" title="（8）Artifacts"></a>（8）Artifacts</h4><p><img "" class="lazyload placeholder" data-original="https://img14.360buyimg.com/ddimg/jfs/t1/185546/29/9398/159522/60c9df17E547687cc/0f7b9a163fa469b1.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><ul><li>Artifact 是 maven 中的一个概念，表示某个 module 要如何打包，例如 war exploded、war、<br>jar 等等这种打包形式；</li><li>一个 module 有了 Artifacts 就可以部署到应用服务器中了！</li><li>在给项目配置 Artifacts 的时候有好多个 type 的选项，exploed 是什么意思？explode 在这里你可<br>以理解为展开，不压缩的意思。也就是 war、jar 等产出物没压缩前的目录结构。</li><li>建议在开发的时候使用这种模式，便于修改了文件的效果立刻显现出来。</li><li>默认情况下，IDEA 的 Modules 和 Artifacts 的 output 目录 已经设置好了，不需要更改.</li><li>打成 war 包 的时候会自动在 WEB-INF 目录 下生产 classes 目录 ，然后把编译后的文件放进去。</li></ul><h4 id="（9）SDKS"><a href="#（9）SDKS" class="headerlink" title="（9）SDKS"></a>（9）SDKS</h4><p>系统开发工具 ，全局 SDK 配置 。</p><h4 id="（10）Global-libraries"><a href="#（10）Global-libraries" class="headerlink" title="（10）Global libraries"></a>（10）Global libraries</h4><p>全局类库，可以配置一些常用的类库。</p><h4 id="（11）Problems"><a href="#（11）Problems" class="headerlink" title="（11）Problems"></a>（11）Problems</h4><p>问题，在项目异常的时候很有用，可以根据提示进行项目修复<br>（FIXED）。</p><h4 id="（12）-idea和-iml"><a href="#（12）-idea和-iml" class="headerlink" title="（12）.idea和.iml"></a>（12）.idea和.iml</h4><blockquote><p>我们设置了半天看看我们设置的信息被保存在了哪里？</p></blockquote><p>xinzhi-shop.iml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span> <span class="attr">type</span>=<span class="string">&quot;JAVA_MODULE&quot;</span> <span class="attr">version</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">&quot;FacetManager&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">facet</span> <span class="attr">type</span>=<span class="string">&quot;web&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Web&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">descriptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">deploymentDescriptor</span> <span class="attr">name</span>=<span class="string">&quot;web.xml&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">url</span>=<span class="string">&quot;file://$MODULE_DIR$/WebContent/WEB-INF/web.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">descriptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">webroots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">url</span>=<span class="string">&quot;file://$MODULE_DIR$/WebContent&quot;</span> <span class="attr">relative</span>=<span class="string">&quot;/&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">webroots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">facet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">&quot;NewModuleRootManager&quot;</span> <span class="attr">inherit-compiler-output</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclude-output</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">content</span> <span class="attr">url</span>=<span class="string">&quot;file://$MODULE_DIR$&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sourceFolder</span> <span class="attr">url</span>=<span class="string">&quot;file://$MODULE_DIR$/src&quot;</span> <span class="attr">isTestSource</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">orderEntry</span> <span class="attr">type</span>=<span class="string">&quot;inheritedJdk&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">orderEntry</span> <span class="attr">type</span>=<span class="string">&quot;sourceFolder&quot;</span> <span class="attr">forTests</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">orderEntry</span> <span class="attr">type</span>=<span class="string">&quot;library&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lib&quot;</span> <span class="attr">level</span>=<span class="string">&quot;project&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img "" class="lazyload placeholder" data-original="https://img11.360buyimg.com/ddimg/jfs/t1/176647/7/15097/288630/60c9df36E3fd364ac/81586918e1039e91.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><blockquote><p>这样别的idea打开项目时就能读取出来，并能明确项目的构建信息</p></blockquote><blockquote><p>问，eclipse直接打开能用吗？</p></blockquote><p>提问现在给你一个java工程的代码你们构建出来了吗？</p><p>或者给你一个eclipse的代码你能转化过来吗？</p><h2 id="二、Maven概述"><a href="#二、Maven概述" class="headerlink" title="二、Maven概述"></a>二、Maven概述</h2><p>以上的工作，需要我们自行构建，而且idea和eclipse，甚至一些其他的开发工具构建的时候是不一样<br>的。</p><p>那么有没有一种统一的方式，甚至无需手动点击，通过配置就可以了，通过使用命令就能就行构建呢？</p><p>当然我们看到了我们的idea其实也是通过之文件来记录构建信息的，那么既然构建如此重要，形成一套<br>规范化的，统一的便捷的构建工具就势在必行，于是出现了 maven ，当然还有 gradle ，他们的功能异<br>常强大。</p><blockquote><p>这样有什么好处</p></blockquote><ul><li>统一管理jar包，自动导入jar及其依赖，这样是很初学者唯一能感受出来的好处，确实牛逼啊。</li><li>项目移植之后甚至不需要安装开发工具，只需要maven加命令就能跑起来，降低学习成本。</li><li>使我们的项目流水线成为可能，因为使用简单的命令我们就能完成项目的编译，打包，发布等工<br>作，就让程序操作程序成为了可能，大名鼎鼎的jekins技能做到这一点。</li></ul><h3 id="1、Maven下载安装"><a href="#1、Maven下载安装" class="headerlink" title="1、Maven下载安装"></a>1、Maven下载安装</h3><p>下载地址：<a href="http://maven.apache.org/">http://maven.apache.org/</a></p><blockquote><p>小知识点： 作为一个java程序员 apache 网站的规律得知道都是 项目名.apache.org</p></blockquote><ul><li><a href="http://maven.apache.org/">http://maven.apache.org/</a></li><li><a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a></li><li><a href="http://dubbo.apache.org/">http://dubbo.apache.org/</a></li><li><a href="http://hadoop.apache.org/">http://hadoop.apache.org/</a></li></ul><p>Apache软件基金会（也就是Apache Software Foundation，简称为ASF），是专门为支持开源软件项<br>目而办的一个非盈利性组织。在它所支持的Apache项目与子项目中，所发行的软件产品都遵循Apache<br>许可证（Apache License）。</p><blockquote><p>安装以及配置环境变量，学过点java的都会</p></blockquote><ol><li>解压</li><li>配置MAVEN_HOME</li><li>配置path，%MAVEN_HOME%\bin</li><li>cmd执行 mvn -v ，出现以下界面，成功</li></ol><p><img "" class="lazyload placeholder" data-original="https://img13.360buyimg.com/ddimg/jfs/t1/175929/34/15083/107449/60c9dfa7Ef512a20b/2e83154ad707b3b4.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><h3 id="2、maven核心配置文件"><a href="#2、maven核心配置文件" class="headerlink" title="2、maven核心配置文件"></a>2、maven核心配置文件</h3><p><img "" class="lazyload placeholder" data-original="https://img13.360buyimg.com/ddimg/jfs/t1/172048/19/15120/47817/60c9dfc4Ef70ff350/89b8441837ff7c09.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><blockquote><p>先照着配置</p></blockquote><p>（1）配置路径</p><blockquote><p>先建立好这个文件夹</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）配置阿里云镜像</p><blockquote><p>要不啥也下不动</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）配置全局编译jdk版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、常常鲜，体验"><a href="#3、常常鲜，体验" class="headerlink" title="3、常常鲜，体验"></a>3、常常鲜，体验</h3><blockquote><p>maven标准目录</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">|--main</span><br><span class="line">|--java 源代码目录</span><br><span class="line">|--resources 资源目录</span><br><span class="line">|--test</span><br><span class="line">|--java 测试代码目录</span><br><span class="line">|--resources 测试资源目录</span><br><span class="line">|--target</span><br><span class="line">|--classes 编译后的class文件目录</span><br><span class="line">|--test-classes 编译后的测试class文件目录</span><br><span class="line">pom.xml Maven工程配置文件</span><br></pre></td></tr></table></figure><p>这是大部分Maven工程的目录结构，在这个基础上可以合理地增删目录。<br>pom.xml的基本要求：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="string"><span class="tag">http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xinzhi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>写个Hello.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello maven!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以再 resources 文件夹下新建 db.properties 配置文件，或随便帮一个文件;</p><p>执行，以下命令，可能会从网上下载内容，是在下载插件，不要担心。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn compile</span><br></pre></td></tr></table></figure><p>结果，并生成target目录</p><p><img "" class="lazyload placeholder" data-original="https://img10.360buyimg.com/ddimg/jfs/t1/189169/18/8381/291846/60c9e083E4dc710ce/238b1346fe7bc5a9.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><blockquote><p>结果发现我们编译的class文件和resources中的配置文件都放在了一起</p></blockquote><p>执行 mvn package</p><p><img "" class="lazyload placeholder" data-original="https://img11.360buyimg.com/ddimg/jfs/t1/187217/3/8630/179442/60c9e0a8E3500a666/789be9a132b88864.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><p>观察target中已经有了我们打包好的jar包</p><p><img "" class="lazyload placeholder" data-original="https://img14.360buyimg.com/ddimg/jfs/t1/172260/25/14578/36916/60c9e0e5Ee5a036c7/a15f66136f948f97.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><p>观察名字是不是我们项目的名字加版本号，当然此jar包无法运行，应为maven也不知道你的main方法<br>在哪里，咱们后边讲。</p><h3 id="4、Maven生命周期"><a href="#4、Maven生命周期" class="headerlink" title="4、Maven生命周期"></a>4、Maven生命周期</h3><blockquote><p>maven生命周期其实就是描述了一个项目从源代码到部署的整个周期</p></blockquote><p>Maven有三个内置的生命周期：默认（default），清洁（clean）和站点（site）。</p><ul><li>清洁（clean） 为执行以下工作做必要的清理。就是我们经常做的，删除target文件夹。</li><li>默认（default） 真正进行项目编译打包等工作的阶段</li><li>站点（site） 生成项目报告，站点，发布站点</li></ul><blockquote><p>默认（default）的生命周期包括以下阶段（该阶段经过简化，实际上更加复杂）：</p></blockquote><ol><li>验证（validate） - 验证项目是否正确，所有必要的信息可用。</li><li>编译（compile） - 编译项目的源代码。</li><li>测试（test） - 使用合适的单元测试框架测试编译的源代码。这些测试不应该要求代码被打包<br>或部署。</li><li>打包（package）- 采用编译的代码，并以其可分配格式（如JAR）进行打包。</li><li>验证（verify） - 对集成测试的结果执行任何检查，以确保满足质量标准。</li><li>安装（install） - 将软件包安装到本地存储库中，用作本地其他项目的依赖项。</li><li>部署（deploy） - 在构建环境中完成，将最终的包复制到远程存储库以与其他开发人员和项目共享<br>（私服）。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install</span><br></pre></td></tr></table></figure><p>此命令在执行安装之前按顺序（验证（validate），编译（compile），打包（package）等）执行每个<br>默认生命周期阶段。在这种情况下，您只需要调用最后一个构建阶段来执行，安装（install）。<br>在构建环境中，使用以下调用将工件清理地构建并部署到共享存储库中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean deploy</span><br></pre></td></tr></table></figure><p>相同的命令可以在多模块场景（即具有一个或多个子项目的项目）中使用。Maven遍历每个子项目并执<br>行清洁（clean），然后执行部署（deploy）（包括所有之前的构建阶段步骤）。<br>注意：在我们开发阶段，有一些生命周期的阶段，比如验证（validate）这些，基本很少用到。只要使<br>用关键的几个基本能满足需求。</p><h3 id="5、Maven-常用命令"><a href="#5、Maven-常用命令" class="headerlink" title="5、Maven 常用命令"></a>5、Maven 常用命令</h3><p>下面maven比较常见的一些命令。</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>mvn –version</td><td>显示版本信息</td></tr><tr><td>mvn clean</td><td>清理项目生产的临时文件,一般是模块下的target目录</td></tr><tr><td>mvn compile</td><td>编译源代码，一般编译模块下的src/main/java目录</td></tr><tr><td>mvn package</td><td>项目打包工具,会在模块下的target目录生成jar或war等文件</td></tr><tr><td>mvn test</td><td>测试命令,或执行src/test/java/下junit的测试用例</td></tr><tr><td>mvn install</td><td>将打包的jar/war文件复制到你的本地仓库中,供其他模块使用</td></tr><tr><td>mvn deploy</td><td>将打包的文件发布到远程参考,提供其他人员进行下载依赖</td></tr><tr><td>mvn site</td><td>生成项目相关信息的网站</td></tr><tr><td>mvn dependency:tree</td><td>打印出项目的整个依赖树</td></tr><tr><td>mvn archetype:generate</td><td>创建Maven的普通java项目</td></tr><tr><td>mvn tomcat:run</td><td>在tomcat容器中运行web应用</td></tr></tbody></table><h3 id="6、Maven的版本规范（我们的项目）"><a href="#6、Maven的版本规范（我们的项目）" class="headerlink" title="6、Maven的版本规范（我们的项目）"></a>6、Maven的版本规范（我们的项目）</h3><p>所有的软件都用版本</p><p>Maven使用如下几个要素来定位一个项目，因此它们又称为项目的坐标。</p><ul><li>groudId 团体、组织的标识符。团体标识的约定是，它以创建这个项目的组织名称的逆向域名开<br>头。一般对应着JAVA的包的结构，例如org.apache。</li><li>artifactId 单独项目的唯一标识符。比如我们的tomcat, commons等。不要在artifactId中包含<br>点号(.)。</li><li>version 项目的版本。</li><li>packaging 项目的类型，默认是jar，描述了项目打包后的输出。类型为jar的项目产生一个JAR文<br>件，类型为war的项目产生一个web应用。</li></ul><p>Maven在版本管理时候可以使用几个特殊的字符串 SNAPSHOT，LATEST，RELEASE。比如”1.0-<br>SNAPSHOT”。各个部分的含义和处理逻辑如下说明：</p><ul><li>SNAPSHOT 这个版本一般用于开发过程中，表示不稳定的版本。</li><li>LATEST 指某个特定构件的最新发布，这个发布可能是一个发布版，也可能是一个snapshot版，具<br>体看哪个时间最后。</li><li>RELEASE 指最后一个发布版。</li></ul><h3 id="7、在idea中配置maven"><a href="#7、在idea中配置maven" class="headerlink" title="7、在idea中配置maven"></a>7、在idea中配置maven</h3><p>把画红线的东西全部配置成自己的。最后一个是仓库，在你的其他盘找一个地方新建repository文<br>件夹，自己要知道，选中，如果勾选不了就选择都选override。<br>如果不选择仓库会把jar包下载至C盘的下边目录，不好维护，还占用c盘空间。当然idea和maven可能会<br>有bug。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\zn\.m2\repository</span><br></pre></td></tr></table></figure><p><img "" class="lazyload placeholder" data-original="https://img12.360buyimg.com/ddimg/jfs/t1/178249/5/9621/275402/60c9e111E21a15fbe/2719439b0d733840.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><blockquote><p>两处都要配置，一个是当前项目的maven配置，一个是新建项目的maven配置。</p></blockquote><p><img "" class="lazyload placeholder" data-original="https://img10.360buyimg.com/ddimg/jfs/t1/189502/21/8541/74318/60c9e13fE087bd534/cde43eee3af3183a.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><h2 id="三、Maven依赖（重点）"><a href="#三、Maven依赖（重点）" class="headerlink" title="三、Maven依赖（重点）"></a>三、Maven依赖（重点）</h2><hr><blockquote><p>过几天更</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python可视化爬虫</title>
      <link href="2020/12/01/python%20%E7%88%AC%E8%99%AB%E4%B9%8Bselenium/"/>
      <url>2020/12/01/python%20%E7%88%AC%E8%99%AB%E4%B9%8Bselenium/</url>
      
        <content type="html"><![CDATA[<h1 id="python可视化爬虫之selenium可视化爬虫"><a href="#python可视化爬虫之selenium可视化爬虫" class="headerlink" title="python可视化爬虫之selenium可视化爬虫"></a>python可视化爬虫之selenium可视化爬虫</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之所以把selenium爬虫称之为可视化爬虫</p><p>主要是相较于前面所提到的几种网页解析的爬虫方式</p><p>selenium爬虫主要是模拟人的点击操作</p><p>selenium驱动浏览器并进行操作的过程是可以观察到的</p><p>就类似于你在看着别人在帮你操纵你的电脑，类似于别人远程使用你的电脑</p><p>当然了，selenium也有无界面模式</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>selenium基本介绍:</p><p>selenium 是一套完整的web应用程序测试系统，</p><p>包含了测试的录制（selenium IDE）,编写及运行（Selenium Remote Control）<br>和测试的并行处理（Selenium Grid）。</p><p>Selenium的核心Selenium Core基于JsUnit，<br>完全由JavaScript编写，因此可以用于任何支持JavaScript的浏览器上。<br>selenium可以模拟真实浏览器，自动化测试工具，支持多种浏览器，</p><p>爬虫中主要用来解决JavaScript渲染问题。</p><p>用python写爬虫的时候，主要用的是selenium的Webdriver</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装selenium库</span></span><br><span class="line">pip install selenium</span><br><span class="line"><span class="comment">#安装对应浏览器驱动</span></span><br><span class="line"><span class="comment"># 我们可以通过下面的方式先看看Selenium.Webdriver支持哪些浏览器</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">help</span>(webdriver))</span><br></pre></td></tr></table></figure><p>适用浏览器：<br>PACKAGE||CONTENTS<br>—|:–:|—:<br>android (package)|blackberry (package)|chrome(package)<br>common (package)|edge (package)|firefox (package)<br>ie (package)  |       opera (package)     |    phantomjs (package)<br>remote (package)  |   safari (package)    |    support (package)<br>webkitgtk (package)</p><p>#这里要说一下比较重要的PhantomJS,</p><p>#PhantomJS是一个而基于WebKit的服务端JavaScript API</p><p>#支持Web而不需要浏览器支持，</p><p>#其快速、原生支持各种Web标准：Dom处理，CSS选择器，JSON等等。</p><p>#PhantomJS可以用用于页面自动化、网络监测、网页截屏，以及无界面测试</p><blockquote><p>谷歌浏览器驱动下载地址<br>注意对应版本号，chrome地址栏输入chrome://version/ 查看自己的Chrome版本<br>我使用的是anaconda 下载好后丢入anaconda3\Scripts文件夹下就可以了<br>如果是其他ide如：pycharm、VScode但加载的还是anaconda的集成python，依然可以这么操作</p></blockquote><p>简单测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment"># #声明浏览器对象</span></span><br><span class="line">browser1 = webdriver.Chrome()</span><br><span class="line">browser2 = webdriver.Firefox()</span><br><span class="line"><span class="comment"># #访问页面</span></span><br><span class="line">browser1.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(browser1.page_source)</span><br><span class="line"><span class="comment">#关闭当前窗口</span></span><br><span class="line">browser1.close()</span><br></pre></td></tr></table></figure><h2 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h2><p>要想对页面进行操作，首先要做的是选中页面元素，<br>比较常见的八种元素定位方式，如下表所示：</p><table><thead><tr><th>定位一个元素</th><th align="center">定位多个元素</th><th>定位方式描述</th></tr></thead><tbody><tr><td>find_element_by_id</td><td align="center">find_elements_by_id</td><td>通过元素 id进行定位</td></tr><tr><td>find_element_by_name</td><td align="center">find_elements_by_name</td><td>通过元素 名称进行定位</td></tr><tr><td>find_element_by_xpath</td><td align="center">find_elements_by_xpath</td><td>通过xpath路径进行定位</td></tr><tr><td>find_element_by_link_text</td><td align="center">find_elements_by_link_text</td><td>通过完整超链接文本进行定位</td></tr><tr><td>find_element_by_partial_link_text</td><td align="center">find_elements_by_partial_link_text</td><td>通过部分超链接文本进行定位</td></tr><tr><td>find_element_by_tag_name</td><td align="center">find_elements_by_tag_name</td><td>通过标记名称进行定位</td></tr><tr><td>find_element_by_class_name</td><td align="center">find_elements_by_class_name</td><td>通过类名称进行定位</td></tr><tr><td>find_element_by_css_selector</td><td align="center">find_elements_by_css_selector</td><td>通过css选择器进行定位</td></tr></tbody></table><h2 id="页面操作"><a href="#页面操作" class="headerlink" title="页面操作"></a>页面操作</h2><p>1.表单填充</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找到用户名输入用户名</span></span><br><span class="line">user = drive.find_element_by_name(<span class="string">&quot;LoginForm[username]&quot;</span>)</span><br><span class="line">user.send_keys(username)</span><br><span class="line"><span class="comment"># 找到密码输入密码</span></span><br><span class="line">pwd=drive.find_element_by_id(<span class="string">&quot;LoginForm_password&quot;</span>)</span><br><span class="line">pwd.send_keys(password)</span><br><span class="line"><span class="comment"># 点击登录按钮实现登录</span></span><br><span class="line">drive.find_element_by_class_name(<span class="string">&quot;login_btn&quot;</span>).click()</span><br></pre></td></tr></table></figure><p>2.窗口句柄</p><p>简单讲，句柄就是浏览器上方每一个窗口栏的唯一标识</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取当前窗口所有句柄</span></span><br><span class="line">handles = drive.window_handles</span><br><span class="line"><span class="comment">#通过句柄 切换到第2个标签页</span></span><br><span class="line">drive.switch_to.window(handles[<span class="number">2</span>])</span><br><span class="line"><span class="string">&quot;&quot;&quot;操作完成&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#关闭当前窗口</span></span><br><span class="line">driver.close() </span><br><span class="line"><span class="comment">#通过句柄 切换到第1个标签页</span></span><br><span class="line">drive.switch_to.window(handles[<span class="number">0</span>])</span><br><span class="line">time.sleep(random.uniform(<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>3.url加载和获取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#url加载</span></span><br><span class="line">drive.get(url)</span><br><span class="line"><span class="comment"># 获取当前页面url并断言</span></span><br><span class="line">currentPageUrl = driver.current_url</span><br></pre></td></tr></table></figure><p>4.cookie处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">get_cookies:获取cookie信息</span><br><span class="line">add_cookie:添加cookie信息</span><br><span class="line">drive.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">cookie = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;value&#x27;</span>:<span class="string">&#x27;bar&#x27;</span>&#125;</span><br><span class="line">drive.add_cookie(cookie)</span><br><span class="line">drive.get_cookies()</span><br></pre></td></tr></table></figure><h2 id="等待方式"><a href="#等待方式" class="headerlink" title="等待方式"></a>等待方式</h2><p>现在很多网站采用 Ajax技术</p><p>无法确定网页元素什么时候能被完全加载</p><p>所以网页元素的选取比较困难</p><p>此时就需要设置等待（等待网页加载完成）</p><p>selenium有两种等待方式:</p><ul><li>显式等待</li><li>隐式等待</li></ul><p>1.显式等待</p><p>显式等待是一种条件触发式等待</p><p>直到设置的某一条件达成时才会继续执行</p><p>可以设置超时时间，如果超过超时时间元素依然没被加载，就会抛出异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line">drive = webdriver.Chrome()</span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com/&#x27;</span></span><br><span class="line">drive.get(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">WebDriverWait(self.driver,<span class="number">10</span>).until(EC.presence_of_element_located(By.ID,<span class="string">&quot;LoginForm[username]&quot;</span>))  <span class="comment">#显示等待</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;%s页面未找到元素&#x27;</span>% loc)</span><br></pre></td></tr></table></figure><p>以上代码加载 ‘<a href="http://www.baidu.com/&#39;%E9%A1%B5%E9%9D%A2">http://www.baidu.com/&#39;页面</a></p><p>并定位id为”LoginForm[username]”的元素</p><p>设置超时时间10秒，webDriverWait默认会500ms检测一下元素是否存在</p><p>selenium提供了一些内置的用于显示等待的方法，</p><p>位于expected_conditions类中，详细见下表:</p><table><thead><tr><th>内置方法</th><th>功能</th></tr></thead><tbody><tr><td>title_is</td><td>判断当前页面的title是否等于预期内容</td></tr><tr><td>title_contains</td><td>判断当前页面的title是否包含预期字符串</td></tr><tr><td>presence_of_element_located</td><td>判断某个元素是否被加到了dom树里,</td></tr><tr><td>并不代表该元素一定可见</td><td></td></tr><tr><td>presence_of_all_element_located</td><td>判断是否至少有1个元素存在于dom树里</td></tr><tr><td>visibility_of_element_located</td><td>判断某个元素是否可见</td></tr><tr><td>visibility_of</td><td>判断某个元素是否可见</td></tr><tr><td>invisibility_of_element_located</td><td>判断某个元素是否不存在于dom树里或不可见</td></tr><tr><td>text_to_be_present_in_element</td><td>判断元素中的text是否包含了预期的字符串</td></tr><tr><td>text_to_be_present_in_element_value</td><td>判断元素中的value属性是否包含了预期字符</td></tr><tr><td>frame_to_be_available_and_switch_to_it</td><td>判断该frame是否可以切换进去，如果可以，返回True并切换进去，否则返回False</td></tr><tr><td>element_to_be_clickable</td><td>判断某个元素是否可见并且是enable的</td></tr><tr><td>staleness_of</td><td>等待某个元素从dom树中移除</td></tr><tr><td>element_to_be_selected</td><td>判断某个元素是否被选中了，一般用于下拉列表</td></tr><tr><td>element_located_to_be_selected</td><td>判断某个元素是否被选中了，一般用于下拉列表</td></tr><tr><td>element_selection_state_to_be</td><td>判断某个元素的选中状态是否符合预期</td></tr><tr><td>element_located_selection_state_to_be</td><td>判断某个元素的选中状态是否符合预期</td></tr><tr><td>alert_is_present</td><td>判断页面上是否存在alert框</td></tr></tbody></table><p>2.隐式等待</p><p>隐式等待是在尝试定位某个元素时，如果没能立刻发现，就等待固定时长<br>类似于socket超时，默认设置是0秒，即相当于最长等待时长</p><p>在浏览器界面直观感受是：</p><p>等待直到网页加载完成（地址栏这个地方不是× 变成如下）时继续执行，<br>网页加载超过设置等待时长才报错</p><p>使用方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">drive = webdriver.Chrome()</span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com/&#x27;</span></span><br><span class="line"><span class="comment">#设置最大等待时长 10秒</span></span><br><span class="line">drive.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">drive.get(url)</span><br><span class="line">user = drive.find_element_by_name(<span class="string">&quot;LoginForm[username]&quot;</span>)</span><br></pre></td></tr></table></figure><p>3.线程休眠</p><p>time.sleep(time)是比较常用的线程休眠方式</p><p>为了避免风险，我个人比较喜欢随机休眠</p><p>time.sleep(random.uniform(4,5))</p><h2 id="扩展程序加载"><a href="#扩展程序加载" class="headerlink" title="扩展程序加载"></a>扩展程序加载</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置好应用扩展</span></span><br><span class="line">chrome_options.add_extension(extension_path)</span><br><span class="line"><span class="comment">#添加下载路径</span></span><br><span class="line"><span class="comment">#download.default_directory：设置下载路径    profile.default_content_settings.popups：设置为 0 禁止弹出窗口</span></span><br><span class="line">prefs = &#123;<span class="string">&#x27;profile.default_content_settings.popups&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;download.default_directory&#x27;</span>:tmp_path&#125;</span><br><span class="line">chrome_options.add_experimental_option(<span class="string">&#x27;prefs&#x27;</span>, prefs)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫方法介绍</title>
      <link href="2020/11/13/python%E7%88%AC%E8%99%AB%E6%96%B9%E6%B3%95/"/>
      <url>2020/11/13/python%E7%88%AC%E8%99%AB%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Python爬虫——四种常见基础爬虫方法介绍"><a href="#Python爬虫——四种常见基础爬虫方法介绍" class="headerlink" title="Python爬虫——四种常见基础爬虫方法介绍"></a>Python爬虫——四种常见基础爬虫方法介绍</h1><h2 id="一、Urllib方法"><a href="#一、Urllib方法" class="headerlink" title="一、Urllib方法"></a>一、Urllib方法</h2><p>Urllib是python内置的HTTP请求库</p><pre><code>import urllib.request</code></pre><ul><li>#1.定位抓取的url</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=&#x27;http://www.baidu.com/&#x27;</span><br></pre></td></tr></table></figure><ul><li>#2.向目标url发送请求</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response=urllib.request.urlopen(url)</span><br></pre></td></tr></table></figure><ul><li>#3.读取数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data=response.read()</span><br><span class="line"><span class="comment">#print(data)  #打印出来的数据有ASCII码</span></span><br><span class="line"><span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment">#decode将相应编码格式的数据转换成字符串</span></span><br></pre></td></tr></table></figure><p>#post请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib.parse</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=&#x27;http://www.iqianyue.com/mypost/&#x27;</span><br></pre></td></tr></table></figure><ul><li>#构建上传的data</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">postdata=urllib.parse.urlencode(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;pass&#x27;</span>:<span class="string">&#x27;123456&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;).encode(<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment">#字符串转化成字节流数据</span></span><br><span class="line"></span><br><span class="line">html=urllib.request.urlopen(url,data=postdata).read()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(html)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#headers针对检验头信息的反爬机制</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">headers=&#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">request1=urllib.request.Request(<span class="string">&#x27;https://www.dianping.com/&#x27;</span>,headers=headers)<span class="comment">#Request类构建了一个完整的请求</span></span><br><span class="line">response1=urllib.request.urlopen(request1).read()</span><br><span class="line"><span class="built_in">print</span>(response1.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#超时设置+异常处理</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response1=urllib.request.urlopen(<span class="string">&#x27;http://www.ibeifeng.com/&#x27;</span>,timeout=<span class="number">0.01</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> a: <span class="comment">#所有异常的基类</span></span><br><span class="line">        <span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h2 id="二、requests方法"><a href="#二、requests方法" class="headerlink" title="二、requests方法"></a>二、requests方法</h2><ul><li><p>Requests是用python语言基于urllib编写的，采用的是Apache2 Licensed开源协议的HTTP库</p></li><li><p>urllib还是非常不方便的，而Requests它会比urllib更加方便，可以节约我们大量的工作。</p></li><li><p>requests是python实现的最简单易用的HTTP库，建议爬虫使用requests库。</p></li><li><p>默认安装好python之后，是没有安装requests模块的，需要单独通过pip安装</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#get请求</span></span><br><span class="line">r=requests.get(<span class="string">&#x27;https://www.taobao.com/&#x27;</span>)</span><br><span class="line"><span class="comment">#打印字节流数据</span></span><br><span class="line"><span class="comment"># print(r.content)</span></span><br><span class="line"><span class="comment"># print(r.content.decode(&#x27;utf-8&#x27;))  #转码</span></span><br><span class="line"><span class="built_in">print</span>(r.text)  <span class="comment">#打印文本数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> chardet</span><br><span class="line"><span class="comment">#自动获取到网页编码，返回字典类型</span></span><br><span class="line"><span class="built_in">print</span>(chardet.detect(r.content))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST请求实现模拟表单登录</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#构建上传到网页的数据</span></span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pass&#x27;</span>:<span class="string">&#x27;123456&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#带登陆数据发送请求</span></span><br><span class="line">r=requests.post(<span class="string">&#x27;http://www.iqianyue.com/mypost/&#x27;</span>,data=data)</span><br><span class="line"><span class="built_in">print</span>(r.text)   <span class="comment">#打印请求数据</span></span><br><span class="line"><span class="comment">#将登录后的html储存在本地</span></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;login.html&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">f.write(r.content)  <span class="comment">#写入字节流数据</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#针对检验头信息的反爬机制headers</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#构建headers</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r=requests.get(<span class="string">&#x27;https://www.dianping.com/&#x27;</span>,headers=headers)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="built_in">print</span>(r.status_code)   <span class="comment">#状态403 被拦截了(查看状态)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#针对检验头信息的反爬机制headers</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#构建headers</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r=requests.get(<span class="string">&#x27;https://www.dianping.com/&#x27;</span>,headers=headers)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="built_in">print</span>(r.status_code)   <span class="comment">#状态403 被拦截了(查看状态)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#cookies</span></span><br><span class="line"><span class="comment">#跳过登陆，获取资源</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;cookie.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)   <span class="comment">#打开cookie文件</span></span><br><span class="line"><span class="comment">#初始化cookies，声明一个空字典</span></span><br><span class="line">cookies=&#123;&#125;</span><br><span class="line"><span class="comment">#按照字符 ； 进行切割读取，返回列表数据，然后遍历</span></span><br><span class="line"><span class="comment">#split()：切割函数   strip()去除字符串前后空白</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.read().split(<span class="string">&#x27;;&#x27;</span>):</span><br><span class="line">    <span class="comment">#split将参数设置为1，把字符串切割成两个部分</span></span><br><span class="line">    name,value=line.strip().split(<span class="string">&#x27;=&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#为空字典cookies添加内容</span></span><br><span class="line">    cookies[name]=value</span><br><span class="line">r=requests.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>,cookies=cookies)</span><br><span class="line">data=r.text</span><br><span class="line">f1=<span class="built_in">open</span>(<span class="string">&#x27;baidu.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">f1.write(data)</span><br><span class="line">f1.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置代理（网站搜索免费代理ip）</span></span><br><span class="line"><span class="comment">#解决网页封IP的问题</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">proxies=&#123;</span><br><span class="line">    <span class="comment">#&#x27;协议&#x27;:&#x27;ip:端口号&#x27;</span></span><br><span class="line">    <span class="string">&#x27;HTTP&#x27;</span>:<span class="string">&#x27;222.83.160.37：61205&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">req=requests.get(<span class="string">&#x27;http://www.taobao.com/&#x27;</span>,proxies=proxies)</span><br><span class="line"><span class="built_in">print</span>(req.text)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置超时</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> Timeout</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">&quot;http://www.ibeifeng.com &quot;</span>, timeout=<span class="number">0.01</span>)</span><br><span class="line">    <span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="keyword">except</span> Timeout:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;访问超时！&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="三、BS4-BeautifulSoup4解析"><a href="#三、BS4-BeautifulSoup4解析" class="headerlink" title="三、BS4- BeautifulSoup4解析"></a>三、BS4- BeautifulSoup4解析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># #创建一个BS对象</span></span><br><span class="line">soup=BeautifulSoup(html,<span class="string">&#x27;html.parser&#x27;</span>) <span class="comment">#html.parser默认解析器</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(soup))</span><br><span class="line"><span class="comment"># 结构化输出</span></span><br><span class="line"><span class="built_in">print</span>(soup.prettify())</span><br><span class="line"><span class="comment">#1获取标签(只能获取第一条对应的标签)</span></span><br><span class="line"><span class="built_in">print</span>(soup.p) <span class="comment">#获取p标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.a) <span class="comment">#获取a标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.title) <span class="comment">#获取title</span></span><br><span class="line"><span class="comment">#2获取标签内容</span></span><br><span class="line"><span class="built_in">print</span>(soup.title.string)</span><br><span class="line"><span class="built_in">print</span>(soup.a.string)</span><br><span class="line"><span class="built_in">print</span>(soup.body.string) <span class="comment">#如果标签中有多个子标签返回None</span></span><br><span class="line"><span class="built_in">print</span>(soup.head.string) <span class="comment">#如果标签中有一个子标签返回子标签里的文本</span></span><br><span class="line"><span class="comment">#3获取属性</span></span><br><span class="line"><span class="built_in">print</span>(soup.a.attrs) <span class="comment">#返回字典</span></span><br><span class="line"><span class="built_in">print</span>(soup.a[<span class="string">&#x27;id&#x27;</span>]) <span class="comment">#得到指定属性值</span></span><br><span class="line"><span class="comment">#4操作字节点</span></span><br><span class="line"><span class="built_in">print</span>(soup.p.contents) <span class="comment">#得到标签下所有子节点</span></span><br><span class="line"><span class="built_in">print</span>(soup.p.children) <span class="comment">#得到标签下所有子节点的迭代对象</span></span><br><span class="line"><span class="comment">#5操作父节点</span></span><br><span class="line"><span class="built_in">print</span>(soup.p.parent) <span class="comment">#得到标签p的父节点其内部的所有内容</span></span><br><span class="line"><span class="built_in">print</span>(soup.p.parents) <span class="comment"># 得到标签p的父节点的迭代对象</span></span><br><span class="line"><span class="comment">#6操作兄弟节点(同级的节点)</span></span><br><span class="line"><span class="comment">#next_sibling和previous_sibling分别获取节点的下一个和上一个兄弟元素</span></span><br><span class="line"><span class="built_in">print</span>(soup.a.next_sibling)</span><br><span class="line"><span class="built_in">print</span>(soup.a.previous_sibling)</span><br><span class="line"></span><br><span class="line"><span class="comment">#二.搜索文档数</span></span><br><span class="line"><span class="comment">#1标签名</span></span><br><span class="line"><span class="comment">#查询所有a标签</span></span><br><span class="line">res1=soup.find_all(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res1)</span><br><span class="line"><span class="comment">#获取所有a标签下属性为class=&quot;sister&quot;的标签（</span></span><br><span class="line"><span class="comment">#使用 class 做参数会导致语法错误，这里也要用class_）</span></span><br><span class="line"><span class="built_in">print</span>(soup.find_all(<span class="string">&#x27;a&#x27;</span>,class_=<span class="string">&quot;sister&quot;</span>))</span><br><span class="line"><span class="comment">#2正则表达式</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#查询所有包含d字符的标签</span></span><br><span class="line">res2=soup.find_all(re.<span class="built_in">compile</span>(<span class="string">&#x27;d+&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(res2)</span><br><span class="line"><span class="comment">#3列表</span></span><br><span class="line"><span class="comment">#查找所有的title标签和a标签</span></span><br><span class="line">res3=soup.find_all([<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(res3)</span><br><span class="line"><span class="comment">#4关键词</span></span><br><span class="line"><span class="comment">#查询属性id=&#x27;link1&#x27;的标签</span></span><br><span class="line">res4=soup.find_all(<span class="built_in">id</span>=<span class="string">&#x27;link1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res4)</span><br><span class="line"><span class="comment">#5内容匹配</span></span><br><span class="line">res5=soup.find_all(text=<span class="string">&#x27;Tillie&#x27;</span>)  <span class="comment">#文本匹配</span></span><br><span class="line">res55=soup.find_all(text=re.<span class="built_in">compile</span>(<span class="string">&#x27;Dormouse&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(res55)</span><br><span class="line"><span class="comment">#6嵌套选择</span></span><br><span class="line"><span class="built_in">print</span>(soup.find_all(<span class="string">&#x27;p&#x27;</span>))</span><br><span class="line"><span class="comment">#查看所有p标签下所有的a标签</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;p&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(i.find_all(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#三.CSS选择器</span></span><br><span class="line"><span class="comment">#1根据标签查询对象</span></span><br><span class="line">res6=soup.select(<span class="string">&#x27;a&#x27;</span>) <span class="comment">#返回列表</span></span><br><span class="line"><span class="built_in">print</span>(res6) <span class="comment">#得到所有的a标签</span></span><br><span class="line"><span class="comment">#2根据ID属性查询标签对象(id用#)</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;#link2&#x27;</span>))</span><br><span class="line"><span class="comment">#3根据class属性查询标签对象(class用.)</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;.sister&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;.sister&#x27;</span>)[<span class="number">2</span>].get_text()) <span class="comment">#获取文本内容</span></span><br><span class="line"><span class="comment">#4属性选择(获取a标签里=href属性值的标签)</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;a[href=&quot;http://example.com/elsie&quot;]&#x27;</span>))</span><br><span class="line"><span class="comment">#5包含选择(获取)</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;p a#link1&#x27;</span>))</span><br><span class="line"><span class="comment">#6并列选择</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;a#link1,a#link2&#x27;</span>))</span><br><span class="line"><span class="comment">#7得到标签内容</span></span><br><span class="line">res7=soup.select(<span class="string">&#x27;p a.sister&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res7:</span><br><span class="line">    <span class="built_in">print</span>(i.get_text())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#爬取51job主页12个职位</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&#x27;https://www.51job.com/&#x27;</span></span><br><span class="line">headers=&#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">html=requests.get(url,headers=headers)</span><br><span class="line">data=html.content.decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">soup=BeautifulSoup(data,<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"><span class="comment">#获取span标签，class_=&quot;at&quot;属性</span></span><br><span class="line">span=soup.find_all(<span class="string">&#x27;span&#x27;</span>,class_=<span class="string">&quot;at&quot;</span>)</span><br><span class="line"><span class="comment"># for i in span:</span></span><br><span class="line"><span class="comment">#     print(i.get_text())</span></span><br><span class="line"><span class="comment">#select方法（CSS选择器）</span></span><br><span class="line">span1=soup.select(<span class="string">&#x27;span[class=&quot;at&quot;]&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> span1:</span><br><span class="line">    <span class="built_in">print</span>(m.get_text())</span><br></pre></td></tr></table></figure><h2 id="四、XPath语法"><a href="#四、XPath语法" class="headerlink" title="四、XPath语法"></a>四、XPath语法</h2><p>XPath 是一门在 XML 文档中查找信息的语言。</p><p>XPath 可用来在 XML 文档中对元素和属性进行遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">text=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"> &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;</span></span><br><span class="line"><span class="string">            &lt;title&gt;春晚&lt;/title&gt;</span></span><br><span class="line"><span class="string">        &lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;</span></span><br><span class="line"><span class="string">            &lt;h1 name=&quot;title&quot;&gt;个人简介&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            &lt;div name=&quot;desc&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;p name=&quot;name&quot;&gt;姓名：&lt;span&gt;岳云鹏&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">                &lt;p name=&quot;addr&quot;&gt;住址：中国 河南&lt;/p&gt;</span></span><br><span class="line"><span class="string">                &lt;p name=&quot;info&quot;&gt;代表作：五环之歌&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#初始化</span></span><br><span class="line">html=etree.HTML(text)</span><br><span class="line"><span class="comment"># result=etree.tostring(html)   #字节流</span></span><br><span class="line"><span class="comment"># print(result.decode(&#x27;utf-8&#x27;))</span></span><br><span class="line"><span class="comment">#查询所有的p标签</span></span><br><span class="line">p_x=html.xpath(<span class="string">&#x27;//p&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p_x)</span><br><span class="line"><span class="comment">#查询所有p标签的文本,用text只能拿到该标签下的文本，不包括子标签</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> p_x:</span><br><span class="line">    <span class="built_in">print</span>(i.text)   <span class="comment">#发现&lt;span&gt;没有拿到</span></span><br><span class="line"><span class="comment">#优化，用string（）拿标签内部的所有文本</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> p_x:</span><br><span class="line">    <span class="built_in">print</span>(i.xpath(<span class="string">&#x27;string(.)&#x27;</span>))</span><br><span class="line"><span class="comment"># 查询所有name属性的值</span></span><br><span class="line">attr_name=html.xpath(<span class="string">&#x27;//@name&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(attr_name)</span><br><span class="line"><span class="comment">#查询出所有包含name属性的标签</span></span><br><span class="line">attr_name1=html.xpath(<span class="string">&#x27;//*[@name]&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(attr_name1)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记</title>
      <link href="2020/10/30/MySQL%E7%AC%94%E8%AE%B0/"/>
      <url>2020/10/30/MySQL%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL学习笔记"><a href="#MySQL学习笔记" class="headerlink" title="MySQL学习笔记"></a>MySQL学习笔记</h1><h2 id="登录和退出MySQL服务器"><a href="#登录和退出MySQL服务器" class="headerlink" title="登录和退出MySQL服务器"></a>登录和退出MySQL服务器</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 登录MySQL</span><br><span class="line">$ MySQL <span class="operator">-</span>u root <span class="operator">-</span>p12345612</span><br><span class="line"></span><br><span class="line"># 退出MySQL数据库服务器</span><br><span class="line">exit;</span><br></pre></td></tr></table></figure><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 显示所有数据库</span></span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE test;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 切换数据库</span></span><br><span class="line">use test;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示数据库中的所有表</span></span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建数据表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> pet (</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    owner <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    species <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    sex <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">    birth <span class="type">DATE</span>,</span><br><span class="line">    death <span class="type">DATE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看数据表结构</span></span><br><span class="line"><span class="comment">-- describe pet;</span></span><br><span class="line"><span class="keyword">desc</span> pet;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> pet;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pet <span class="keyword">VALUES</span> (<span class="string">&#x27;puffball&#x27;</span>, <span class="string">&#x27;Diane&#x27;</span>, <span class="string">&#x27;hamster&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;1990-03-30&#x27;</span>, <span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改数据</span></span><br><span class="line">UPDATE pet <span class="keyword">SET</span> name <span class="operator">=</span> <span class="string">&#x27;squirrel&#x27;</span> <span class="keyword">where</span> owner <span class="operator">=</span> <span class="string">&#x27;Diane&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> pet <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;squirrel&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> myorder;</span><br></pre></td></tr></table></figure><h2 id="建表约束"><a href="#建表约束" class="headerlink" title="建表约束"></a>建表约束</h2><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 主键约束</span></span><br><span class="line"><span class="comment">-- 使某个字段不重复且不得为空，确保表内所有数据的唯一性。</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 联合主键</span></span><br><span class="line"><span class="comment">-- 联合主键中的每个字段都不能为空，并且加起来不能和已设置的联合主键重复。</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    password <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(id, name)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 自增约束</span></span><br><span class="line"><span class="comment">-- 自增约束的主键由系统自动递增分配。</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加主键约束</span></span><br><span class="line"><span class="comment">-- 如果忘记设置主键，还可以通过SQL语句设置（两种方式）：</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY(id);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> MODIFY id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除主键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">drop</span> <span class="keyword">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure><h3 id="唯一主键"><a href="#唯一主键" class="headerlink" title="唯一主键"></a>唯一主键</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建表时创建唯一主键</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="keyword">UNIQUE</span>(name)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加唯一主键</span></span><br><span class="line"><span class="comment">-- 如果建表时没有设置唯一建，还可以通过SQL语句设置（两种方式）：</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span>(name);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> MODIFY name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除唯一主键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">DROP</span> INDEX name;</span><br></pre></td></tr></table></figure><h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建表时添加非空约束</span></span><br><span class="line"><span class="comment">-- 约束某个字段不能为空</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 移除非空约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> MODIFY name <span class="type">VARCHAR</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><h3 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建表时添加默认约束</span></span><br><span class="line"><span class="comment">-- 约束某个字段的默认值</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user2 (</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    age <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">10</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 移除非空约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> MODIFY age <span class="type">INT</span>;</span><br></pre></td></tr></table></figure><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 班级</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> classes (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学生表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> students (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="comment">-- 这里的 class_id 要和 classes 中的 id 字段相关联</span></span><br><span class="line">    class_id <span class="type">INT</span>,</span><br><span class="line">    <span class="comment">-- 表示 class_id 的值必须来自于 classes 中的 id 字段值</span></span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY(class_id) <span class="keyword">REFERENCES</span> classes(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1. 主表（父表）classes 中没有的数据值，在副表（子表）students 中，是不可以使用的；</span></span><br><span class="line"><span class="comment">-- 2. 主表中的记录被副表引用时，主表不可以被删除。</span></span><br></pre></td></tr></table></figure><h2 id="数据库的三大设计范式"><a href="#数据库的三大设计范式" class="headerlink" title="数据库的三大设计范式"></a>数据库的三大设计范式</h2><h3 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h3><p>只要字段值还可以继续拆分，就不满足第一范式。</p><p>范式设计得越详细，对某些实际操作可能会更好，但并非都有好处，需要对项目的实际情况进行设定。</p><h3 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h3><p>在满足第一范式的前提下，其他列都必须完全依赖于主键列。如果出现不完全依赖，只可能发生在联合主键的情况下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 订单表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> myorder (</span><br><span class="line">    product_id <span class="type">INT</span>,</span><br><span class="line">    customer_id <span class="type">INT</span>,</span><br><span class="line">    product_name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    customer_name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (product_id, customer_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>实际上，在这张订单表中，<code>product_name</code> 只依赖于 <code>product_id</code> ，<code>customer_name</code> 只依赖于 <code>customer_id</code> 。也就是说，<code>product_name</code> 和 <code>customer_id</code> 是没用关系的，<code>customer_name</code> 和 <code>product_id</code> 也是没有关系的。</p><p>这就不满足第二范式：其他列都必须完全依赖于主键列！</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> myorder (</span><br><span class="line">    order_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    product_id <span class="type">INT</span>,</span><br><span class="line">    customer_id <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> product (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customer (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>拆分之后，<code>myorder</code> 表中的 <code>product_id</code> 和 <code>customer_id</code> 完全依赖于 <code>order_id</code> 主键，而 <code>product</code> 和 <code>customer</code> 表中的其他字段又完全依赖于主键。满足了第二范式的设计！</p><h3 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h3><p>在满足第二范式的前提下，除了主键列之外，其他列之间不能有传递依赖关系。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> myorder (</span><br><span class="line">    order_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    product_id <span class="type">INT</span>,</span><br><span class="line">    customer_id <span class="type">INT</span>,</span><br><span class="line">    customer_phone <span class="type">VARCHAR</span>(<span class="number">15</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>表中的 <code>customer_phone</code> 有可能依赖于 <code>order_id</code> 、 <code>customer_id</code> 两列，也就不满足了第三范式的设计：其他列之间不能有传递依赖关系。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> myorder (</span><br><span class="line">    order_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    product_id <span class="type">INT</span>,</span><br><span class="line">    customer_id <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customer (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    phone <span class="type">VARCHAR</span>(<span class="number">15</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>修改后就不存在其他列之间的传递依赖关系，其他列都只依赖于主键列，满足了第三范式的设计！</p><h2 id="查询练习"><a href="#查询练习" class="headerlink" title="查询练习"></a>查询练习</h2><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE select_test;</span><br><span class="line"><span class="comment">-- 切换数据库</span></span><br><span class="line">USE select_test;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建学生表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">    <span class="keyword">no</span> <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    sex <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    birthday <span class="type">DATE</span>, <span class="comment">-- 生日</span></span><br><span class="line">    class <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="comment">-- 所在班级</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建教师表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> teacher (</span><br><span class="line">    <span class="keyword">no</span> <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    sex <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    birthday <span class="type">DATE</span>,</span><br><span class="line">    profession <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 职称</span></span><br><span class="line">    department <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="comment">-- 部门</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建课程表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> course (</span><br><span class="line">    <span class="keyword">no</span> <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    t_no <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 教师编号</span></span><br><span class="line">    <span class="comment">-- 表示该 tno 来自于 teacher 表中的 no 字段值</span></span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY(t_no) <span class="keyword">REFERENCES</span> teacher(<span class="keyword">no</span>) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 成绩表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> score (</span><br><span class="line">    s_no <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 学生编号</span></span><br><span class="line">    c_no <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 课程号</span></span><br><span class="line">    degree <span class="type">DECIMAL</span>,<span class="comment">-- 成绩</span></span><br><span class="line">    <span class="comment">-- 表示该 s_no, c_no 分别来自于 student, course 表中的 no 字段值</span></span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY(s_no) <span class="keyword">REFERENCES</span> student(<span class="keyword">no</span>),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY(c_no) <span class="keyword">REFERENCES</span> course(<span class="keyword">no</span>),</span><br><span class="line">    <span class="comment">-- 设置 s_no, c_no 为联合主键</span></span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(s_no, c_no)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看所有表</span></span><br><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加学生表数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;101&#x27;</span>, <span class="string">&#x27;曾华&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1977-09-01&#x27;</span>, <span class="string">&#x27;95033&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;102&#x27;</span>, <span class="string">&#x27;匡明&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1975-10-02&#x27;</span>, <span class="string">&#x27;95031&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;103&#x27;</span>, <span class="string">&#x27;王丽&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1976-01-23&#x27;</span>, <span class="string">&#x27;95033&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;104&#x27;</span>, <span class="string">&#x27;李军&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1976-02-20&#x27;</span>, <span class="string">&#x27;95033&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;105&#x27;</span>, <span class="string">&#x27;王芳&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1975-02-10&#x27;</span>, <span class="string">&#x27;95031&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;106&#x27;</span>, <span class="string">&#x27;陆军&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1974-06-03&#x27;</span>, <span class="string">&#x27;95031&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;107&#x27;</span>, <span class="string">&#x27;王尼玛&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1976-02-20&#x27;</span>, <span class="string">&#x27;95033&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;108&#x27;</span>, <span class="string">&#x27;张全蛋&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1975-02-10&#x27;</span>, <span class="string">&#x27;95031&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;109&#x27;</span>, <span class="string">&#x27;赵铁柱&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1974-06-03&#x27;</span>, <span class="string">&#x27;95031&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加教师表数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher <span class="keyword">VALUES</span>(<span class="string">&#x27;804&#x27;</span>, <span class="string">&#x27;李诚&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1958-12-02&#x27;</span>, <span class="string">&#x27;副教授&#x27;</span>, <span class="string">&#x27;计算机系&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher <span class="keyword">VALUES</span>(<span class="string">&#x27;856&#x27;</span>, <span class="string">&#x27;张旭&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1969-03-12&#x27;</span>, <span class="string">&#x27;讲师&#x27;</span>, <span class="string">&#x27;电子工程系&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher <span class="keyword">VALUES</span>(<span class="string">&#x27;825&#x27;</span>, <span class="string">&#x27;王萍&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1972-05-05&#x27;</span>, <span class="string">&#x27;助教&#x27;</span>, <span class="string">&#x27;计算机系&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher <span class="keyword">VALUES</span>(<span class="string">&#x27;831&#x27;</span>, <span class="string">&#x27;刘冰&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;1977-08-14&#x27;</span>, <span class="string">&#x27;助教&#x27;</span>, <span class="string">&#x27;电子工程系&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加课程表数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> course <span class="keyword">VALUES</span>(<span class="string">&#x27;3-105&#x27;</span>, <span class="string">&#x27;计算机导论&#x27;</span>, <span class="string">&#x27;825&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> course <span class="keyword">VALUES</span>(<span class="string">&#x27;3-245&#x27;</span>, <span class="string">&#x27;操作系统&#x27;</span>, <span class="string">&#x27;804&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> course <span class="keyword">VALUES</span>(<span class="string">&#x27;6-166&#x27;</span>, <span class="string">&#x27;数字电路&#x27;</span>, <span class="string">&#x27;856&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> course <span class="keyword">VALUES</span>(<span class="string">&#x27;9-888&#x27;</span>, <span class="string">&#x27;高等数学&#x27;</span>, <span class="string">&#x27;831&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加添加成绩表数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> score <span class="keyword">VALUES</span>(<span class="string">&#x27;103&#x27;</span>, <span class="string">&#x27;3-105&#x27;</span>, <span class="string">&#x27;92&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> score <span class="keyword">VALUES</span>(<span class="string">&#x27;103&#x27;</span>, <span class="string">&#x27;3-245&#x27;</span>, <span class="string">&#x27;86&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> score <span class="keyword">VALUES</span>(<span class="string">&#x27;103&#x27;</span>, <span class="string">&#x27;6-166&#x27;</span>, <span class="string">&#x27;85&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> score <span class="keyword">VALUES</span>(<span class="string">&#x27;105&#x27;</span>, <span class="string">&#x27;3-105&#x27;</span>, <span class="string">&#x27;88&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> score <span class="keyword">VALUES</span>(<span class="string">&#x27;105&#x27;</span>, <span class="string">&#x27;3-245&#x27;</span>, <span class="string">&#x27;75&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> score <span class="keyword">VALUES</span>(<span class="string">&#x27;105&#x27;</span>, <span class="string">&#x27;6-166&#x27;</span>, <span class="string">&#x27;79&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> score <span class="keyword">VALUES</span>(<span class="string">&#x27;109&#x27;</span>, <span class="string">&#x27;3-105&#x27;</span>, <span class="string">&#x27;76&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> score <span class="keyword">VALUES</span>(<span class="string">&#x27;109&#x27;</span>, <span class="string">&#x27;3-245&#x27;</span>, <span class="string">&#x27;68&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> score <span class="keyword">VALUES</span>(<span class="string">&#x27;109&#x27;</span>, <span class="string">&#x27;6-166&#x27;</span>, <span class="string">&#x27;81&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表结构</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> course;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> score;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> teacher;</span><br></pre></td></tr></table></figure><h3 id="1-到-10"><a href="#1-到-10" class="headerlink" title="1 到 10"></a>1 到 10</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询 student 表的所有行</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 student 表中的 name、sex 和 class 字段的所有行</span></span><br><span class="line"><span class="keyword">SELECT</span> name, sex, class <span class="keyword">FROM</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 teacher 表中不重复的 department 列</span></span><br><span class="line"><span class="comment">-- department: 去重查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department <span class="keyword">FROM</span> teacher;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 score 表中成绩在60-80之间的所有行（区间查询和运算符查询）</span></span><br><span class="line"><span class="comment">-- BETWEEN xx AND xx: 查询区间, AND 表示 &quot;并且&quot;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> degree <span class="keyword">BETWEEN</span> <span class="number">60</span> <span class="keyword">AND</span> <span class="number">80</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> degree <span class="operator">&gt;</span> <span class="number">60</span> <span class="keyword">AND</span> degree <span class="operator">&lt;</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 score 表中成绩为 85, 86 或 88 的行</span></span><br><span class="line"><span class="comment">-- IN: 查询规定中的多个值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> degree <span class="keyword">IN</span> (<span class="number">85</span>, <span class="number">86</span>, <span class="number">88</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 student 表中 &#x27;95031&#x27; 班或性别为 &#x27;女&#x27; 的所有行</span></span><br><span class="line"><span class="comment">-- or: 表示或者关系</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> class <span class="operator">=</span> <span class="string">&#x27;95031&#x27;</span> <span class="keyword">or</span> sex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 以 class 降序的方式查询 student 表的所有行</span></span><br><span class="line"><span class="comment">-- DESC: 降序，从高到低</span></span><br><span class="line"><span class="comment">-- ASC（默认）: 升序，从低到高</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> class <span class="keyword">DESC</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> class <span class="keyword">ASC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 以 c_no 升序、degree 降序查询 score 表的所有行</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> score <span class="keyword">ORDER</span> <span class="keyword">BY</span> c_no <span class="keyword">ASC</span>, degree <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 &quot;95031&quot; 班的学生人数</span></span><br><span class="line"><span class="comment">-- COUNT: 统计</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> class <span class="operator">=</span> <span class="string">&#x27;95031&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 score 表中的最高分的学生学号和课程编号（子查询或排序查询）。</span></span><br><span class="line"><span class="comment">-- (SELECT MAX(degree) FROM score): 子查询，算出最高分</span></span><br><span class="line"><span class="keyword">SELECT</span> s_no, c_no <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> degree <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(degree) <span class="keyword">FROM</span> score);</span><br><span class="line"></span><br><span class="line"><span class="comment">--  排序查询</span></span><br><span class="line"><span class="comment">-- LIMIT r, n: 表示从第r行开始，查询n条数据</span></span><br><span class="line"><span class="keyword">SELECT</span> s_no, c_no, degree <span class="keyword">FROM</span> score <span class="keyword">ORDER</span> <span class="keyword">BY</span> degree <span class="keyword">DESC</span> LIMIT <span class="number">0</span>, <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="分组计算平均成绩"><a href="#分组计算平均成绩" class="headerlink" title="分组计算平均成绩"></a>分组计算平均成绩</h3><p><strong>查询每门课的平均成绩。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- AVG: 平均值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(degree) <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_no <span class="operator">=</span> <span class="string">&#x27;3-105&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(degree) <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_no <span class="operator">=</span> <span class="string">&#x27;3-245&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(degree) <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_no <span class="operator">=</span> <span class="string">&#x27;6-166&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- GROUP BY: 分组查询</span></span><br><span class="line"><span class="keyword">SELECT</span> c_no, <span class="built_in">AVG</span>(degree) <span class="keyword">FROM</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_no;</span><br></pre></td></tr></table></figure><h3 id="分组条件与模糊查询"><a href="#分组条件与模糊查询" class="headerlink" title="分组条件与模糊查询"></a>分组条件与模糊查询</h3><p><strong>查询 <code>score</code> 表中至少有 2 名学生选修，并以 3 开头的课程的平均分数。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> score;</span><br><span class="line"><span class="comment">-- c_no 课程编号</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> s_no <span class="operator">|</span> c_no  <span class="operator">|</span> degree <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">92</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">86</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">85</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">88</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">75</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">79</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">76</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">68</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">81</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br></pre></td></tr></table></figure><p>分析表发现，至少有 2 名学生选修的课程是 <code>3-105</code> 、<code>3-245</code> 、<code>6-166</code> ，以 3 开头的课程是 <code>3-105</code> 、<code>3-245</code> 。也就是说，我们要查询所有 <code>3-105</code> 和 <code>3-245</code> 的 <code>degree</code> 平均分。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 首先把 c_no, AVG(degree) 通过分组查询出来</span></span><br><span class="line"><span class="keyword">SELECT</span> c_no, <span class="built_in">AVG</span>(degree) <span class="keyword">FROM</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_no</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+</span></span><br><span class="line"><span class="operator">|</span> c_no  <span class="operator">|</span> <span class="built_in">AVG</span>(degree) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">85.3333</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">76.3333</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">81.6667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 再查询出至少有 2 名学生选修的课程</span></span><br><span class="line"><span class="comment">-- HAVING: 表示持有</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(c_no) <span class="operator">&gt;=</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 并且是以 3 开头的课程</span></span><br><span class="line"><span class="comment">-- LIKE 表示模糊查询，&quot;%&quot; 是一个通配符，匹配 &quot;3&quot; 后面的任意字符。</span></span><br><span class="line"><span class="keyword">AND</span> c_no <span class="keyword">LIKE</span> <span class="string">&#x27;3%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 把前面的SQL语句拼接起来，</span></span><br><span class="line"><span class="comment">-- 后面加上一个 COUNT(*)，表示将每个分组的个数也查询出来。</span></span><br><span class="line"><span class="keyword">SELECT</span> c_no, <span class="built_in">AVG</span>(degree), <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_no</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(c_no) <span class="operator">&gt;=</span> <span class="number">2</span> <span class="keyword">AND</span> c_no <span class="keyword">LIKE</span> <span class="string">&#x27;3%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+----------+</span></span><br><span class="line"><span class="operator">|</span> c_no  <span class="operator">|</span> <span class="built_in">AVG</span>(degree) <span class="operator">|</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">85.3333</span> <span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">76.3333</span> <span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+----------+</span></span><br></pre></td></tr></table></figure><h3 id="多表查询-1"><a href="#多表查询-1" class="headerlink" title="多表查询 - 1"></a>多表查询 - 1</h3><p><strong>查询所有学生的 <code>name</code>，以及该学生在 <code>score</code> 表中对应的 <code>c_no</code> 和 <code>degree</code> 。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">no</span>, name <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">no</span>  <span class="operator">|</span> name      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">101</span> <span class="operator">|</span> 曾华      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">102</span> <span class="operator">|</span> 匡明      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span> <span class="operator">|</span> 王丽      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">104</span> <span class="operator">|</span> 李军      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span> <span class="operator">|</span> 王芳      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">106</span> <span class="operator">|</span> 陆军      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">107</span> <span class="operator">|</span> 王尼玛    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">108</span> <span class="operator">|</span> 张全蛋    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span> <span class="operator">|</span> 赵铁柱    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-----------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> s_no, c_no, degree <span class="keyword">FROM</span> score;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> s_no <span class="operator">|</span> c_no  <span class="operator">|</span> degree <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">92</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">86</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">85</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">88</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">75</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">79</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">76</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">68</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">81</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br></pre></td></tr></table></figure><p>通过分析可以发现，只要把 <code>score</code> 表中的 <code>s_no</code> 字段值替换成 <code>student</code> 表中对应的 <code>name</code> 字段值就可以了，如何做呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- FROM...: 表示从 student, score 表中查询</span></span><br><span class="line"><span class="comment">-- WHERE 的条件表示为，只有在 student.no 和 score.s_no 相等时才显示出来。</span></span><br><span class="line"><span class="keyword">SELECT</span> name, c_no, degree <span class="keyword">FROM</span> student, score </span><br><span class="line"><span class="keyword">WHERE</span> student.no <span class="operator">=</span> score.s_no;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> name      <span class="operator">|</span> c_no  <span class="operator">|</span> degree <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> 王丽      <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">92</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 王丽      <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">86</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 王丽      <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">85</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 王芳      <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">88</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 王芳      <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">75</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 王芳      <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">79</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 赵铁柱    <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">76</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 赵铁柱    <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">68</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 赵铁柱    <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">81</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------+--------+</span></span><br></pre></td></tr></table></figure><h3 id="多表查询-2"><a href="#多表查询-2" class="headerlink" title="多表查询 - 2"></a>多表查询 - 2</h3><p><strong>查询所有学生的 <code>no</code> 、课程名称 ( <code>course</code> 表中的 <code>name</code> ) 和成绩 ( <code>score</code> 表中的 <code>degree</code> ) 列。</strong></p><p>只有 <code>score</code> 关联学生的 <code>no</code> ，因此只要查询 <code>score</code> 表，就能找出所有和学生相关的 <code>no</code> 和 <code>degree</code> ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_no, c_no, degree <span class="keyword">FROM</span> score;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> s_no <span class="operator">|</span> c_no  <span class="operator">|</span> degree <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">92</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">86</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">85</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">88</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">75</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">79</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">76</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">68</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">81</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br></pre></td></tr></table></figure><p>然后查询 <code>course</code> 表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">no</span>    <span class="operator">|</span> name            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span> 计算机导论      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span> 操作系统        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span> 数字电路        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">9</span><span class="number">-888</span> <span class="operator">|</span> 高等数学        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------------+</span></span><br></pre></td></tr></table></figure><p>只要把 <code>score</code> 表中的 <code>c_no</code> 替换成 <code>course</code> 表中对应的 <code>name</code> 字段值就可以了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 增加一个查询字段 name，分别从 score、course 这两个表中查询。</span></span><br><span class="line"><span class="comment">-- as 表示取一个该字段的别名。</span></span><br><span class="line"><span class="keyword">SELECT</span> s_no, name <span class="keyword">as</span> c_name, degree <span class="keyword">FROM</span> score, course</span><br><span class="line"><span class="keyword">WHERE</span> score.c_no <span class="operator">=</span> course.no;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------------+--------+</span></span><br><span class="line"><span class="operator">|</span> s_no <span class="operator">|</span> c_name          <span class="operator">|</span> degree <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> 计算机导论      <span class="operator">|</span>     <span class="number">92</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> 计算机导论      <span class="operator">|</span>     <span class="number">88</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> 计算机导论      <span class="operator">|</span>     <span class="number">76</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> 操作系统        <span class="operator">|</span>     <span class="number">86</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> 操作系统        <span class="operator">|</span>     <span class="number">75</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> 操作系统        <span class="operator">|</span>     <span class="number">68</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> 数字电路        <span class="operator">|</span>     <span class="number">85</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> 数字电路        <span class="operator">|</span>     <span class="number">79</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> 数字电路        <span class="operator">|</span>     <span class="number">81</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------------+--------+</span></span><br></pre></td></tr></table></figure><h3 id="三表关联查询"><a href="#三表关联查询" class="headerlink" title="三表关联查询"></a>三表关联查询</h3><p><strong>查询所有学生的 <code>name</code> 、课程名 ( <code>course</code> 表中的 <code>name</code> ) 和 <code>degree</code> 。</strong></p><p>只有 <code>score</code> 表中关联学生的学号和课堂号，我们只要围绕着 <code>score</code> 这张表查询就好了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> score;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> s_no <span class="operator">|</span> c_no  <span class="operator">|</span> degree <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">92</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">86</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">85</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">88</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">75</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">79</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">76</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">68</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">81</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br></pre></td></tr></table></figure><p>只要把 <code>s_no</code> 和 <code>c_no</code> 替换成 <code>student</code> 和 <code>srouse</code> 表中对应的 <code>name</code> 字段值就好了。</p><p>首先把 <code>s_no</code> 替换成 <code>student</code> 表中的 <code>name</code> 字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, c_no, degree <span class="keyword">FROM</span> student, score <span class="keyword">WHERE</span> student.no <span class="operator">=</span> score.s_no;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> name      <span class="operator">|</span> c_no  <span class="operator">|</span> degree <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> 王丽      <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">92</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 王丽      <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">86</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 王丽      <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">85</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 王芳      <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">88</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 王芳      <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">75</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 王芳      <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">79</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 赵铁柱    <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">76</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 赵铁柱    <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">68</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 赵铁柱    <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">81</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------+--------+</span></span><br></pre></td></tr></table></figure><p>再把 <code>c_no</code> 替换成 <code>course</code> 表中的 <code>name</code> 字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 课程表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">no</span>, name <span class="keyword">FROM</span> course;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">no</span>    <span class="operator">|</span> name            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span> 计算机导论      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span> 操作系统        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span> 数字电路        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">9</span><span class="number">-888</span> <span class="operator">|</span> 高等数学        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 由于字段名存在重复，使用 &quot;表名.字段名 as 别名&quot; 代替。</span></span><br><span class="line"><span class="keyword">SELECT</span> student.name <span class="keyword">as</span> s_name, course.name <span class="keyword">as</span> c_name, degree </span><br><span class="line"><span class="keyword">FROM</span> student, score, course</span><br><span class="line"><span class="keyword">WHERE</span> student.NO <span class="operator">=</span> score.s_no</span><br><span class="line"><span class="keyword">AND</span> score.c_no <span class="operator">=</span> course.no;</span><br></pre></td></tr></table></figure><h3 id="子查询加分组求平均分"><a href="#子查询加分组求平均分" class="headerlink" title="子查询加分组求平均分"></a>子查询加分组求平均分</h3><p><strong>查询 <code>95031</code> 班学生每门课程的平均成绩。</strong></p><p>在 <code>score</code> 表中根据 <code>student</code>  表的学生编号筛选出学生的课堂号和成绩：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- IN (..): 将筛选出的学生号当做 s_no 的条件查询</span></span><br><span class="line"><span class="keyword">SELECT</span> s_no, c_no, degree <span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">WHERE</span> s_no <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">no</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> class <span class="operator">=</span> <span class="string">&#x27;95031&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> s_no <span class="operator">|</span> c_no  <span class="operator">|</span> degree <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">88</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">75</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">79</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">76</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">68</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">81</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br></pre></td></tr></table></figure><p>这时只要将 <code>c_no</code> 分组一下就能得出 <code>95031</code> 班学生每门课的平均成绩：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c_no, <span class="built_in">AVG</span>(degree) <span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">WHERE</span> s_no <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">no</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> class <span class="operator">=</span> <span class="string">&#x27;95031&#x27;</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> c_no;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+</span></span><br><span class="line"><span class="operator">|</span> c_no  <span class="operator">|</span> <span class="built_in">AVG</span>(degree) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">82.0000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">71.5000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">80.0000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+</span></span><br></pre></td></tr></table></figure><h3 id="子查询-1"><a href="#子查询-1" class="headerlink" title="子查询 - 1"></a>子查询 - 1</h3><p><strong>查询在 <code>3-105</code> 课程中，所有成绩高于 <code>109</code> 号同学的记录。</strong></p><p>首先筛选出课堂号为 <code>3-105</code> ，在找出所有成绩高于 <code>109</code> 号同学的的行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> score </span><br><span class="line"><span class="keyword">WHERE</span> c_no <span class="operator">=</span> <span class="string">&#x27;3-105&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> degree <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> degree <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> s_no <span class="operator">=</span> <span class="string">&#x27;109&#x27;</span> <span class="keyword">AND</span> c_no <span class="operator">=</span> <span class="string">&#x27;3-105&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="子查询-2"><a href="#子查询-2" class="headerlink" title="子查询 - 2"></a>子查询 - 2</h3><p><strong>查询所有成绩高于 <code>109</code> 号同学的 <code>3-105</code> 课程成绩记录。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 不限制课程号，只要成绩大于109号同学的3-105课程成绩就可以。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">WHERE</span> degree <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> degree <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> s_no <span class="operator">=</span> <span class="string">&#x27;109&#x27;</span> <span class="keyword">AND</span> c_no <span class="operator">=</span> <span class="string">&#x27;3-105&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="YEAR-函数与带-IN-关键字查询"><a href="#YEAR-函数与带-IN-关键字查询" class="headerlink" title="YEAR 函数与带 IN 关键字查询"></a>YEAR 函数与带 IN 关键字查询</h3><p><strong>查询所有和 <code>101</code> 、<code>108</code> 号学生同年出生的 <code>no</code> 、<code>name</code> 、<code>birthday</code> 列。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- YEAR(..): 取出日期中的年份</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">no</span>, name, birthday <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(birthday) <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(birthday) <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">no</span> <span class="keyword">IN</span> (<span class="number">101</span>, <span class="number">108</span>));</span><br></pre></td></tr></table></figure><h3 id="多层嵌套子查询"><a href="#多层嵌套子查询" class="headerlink" title="多层嵌套子查询"></a>多层嵌套子查询</h3><p><strong>查询 <code>&#39;张旭&#39;</code> 教师任课的学生成绩表。</strong></p><p>首先找到教师编号：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NO</span> <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;张旭&#x27;</span></span><br></pre></td></tr></table></figure><p>通过 <code>sourse</code> 表找到该教师课程号：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NO</span> <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> t_no <span class="operator">=</span> ( <span class="keyword">SELECT</span> <span class="keyword">NO</span> <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;张旭&#x27;</span> );</span><br></pre></td></tr></table></figure><p>通过筛选出的课程号查询成绩表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_no <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">no</span> <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> t_no <span class="operator">=</span> ( </span><br><span class="line">        <span class="keyword">SELECT</span> <span class="keyword">no</span> <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;张旭&#x27;</span> </span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p><strong>查询某选修课程多于5个同学的教师姓名。</strong></p><p>首先在 <code>teacher</code> 表中，根据 <code>no</code> 字段来判断该教师的同一门课程是否有至少5名学员选修：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询 teacher 表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">no</span>, name <span class="keyword">FROM</span> teacher;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">no</span>  <span class="operator">|</span> name   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">804</span> <span class="operator">|</span> 李诚   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">825</span> <span class="operator">|</span> 王萍   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">831</span> <span class="operator">|</span> 刘冰   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">856</span> <span class="operator">|</span> 张旭   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+--------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> <span class="keyword">no</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="comment">-- 在这里找到对应的条件</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>查看和教师编号有有关的表的信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> course;</span><br><span class="line"><span class="comment">-- t_no: 教师编号</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">no</span>    <span class="operator">|</span> name            <span class="operator">|</span> t_no <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span> 计算机导论      <span class="operator">|</span> <span class="number">825</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span> 操作系统        <span class="operator">|</span> <span class="number">804</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span> 数字电路        <span class="operator">|</span> <span class="number">856</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">9</span><span class="number">-888</span> <span class="operator">|</span> 高等数学        <span class="operator">|</span> <span class="number">831</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------------+------+</span></span><br></pre></td></tr></table></figure><p>我们已经找到和教师编号有关的字段就在 <code>course</code> 表中，但是还无法知道哪门课程至少有5名学生选修，所以还需要根据 <code>score</code> 表来查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在此之前向 score 插入一些数据，以便丰富查询条件。</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> score <span class="keyword">VALUES</span> (<span class="string">&#x27;101&#x27;</span>, <span class="string">&#x27;3-105&#x27;</span>, <span class="string">&#x27;90&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> score <span class="keyword">VALUES</span> (<span class="string">&#x27;102&#x27;</span>, <span class="string">&#x27;3-105&#x27;</span>, <span class="string">&#x27;91&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> score <span class="keyword">VALUES</span> (<span class="string">&#x27;104&#x27;</span>, <span class="string">&#x27;3-105&#x27;</span>, <span class="string">&#x27;89&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 score 表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> score;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> s_no <span class="operator">|</span> c_no  <span class="operator">|</span> degree <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">101</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">102</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">91</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">92</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">86</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">85</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">104</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">89</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">88</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">75</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">79</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">76</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">68</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">81</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在 score 表中将 c_no 作为分组，并且限制 c_no 持有至少 5 条数据。</span></span><br><span class="line"><span class="keyword">SELECT</span> c_no <span class="keyword">FROM</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_no <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">5</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span> c_no  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br></pre></td></tr></table></figure><p>根据筛选出来的课程号，找出在某课程中，拥有至少5名学员的教师编号：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t_no <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> <span class="keyword">no</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> c_no <span class="keyword">FROM</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_no <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">5</span></span><br><span class="line">);</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> t_no <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">825</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br></pre></td></tr></table></figure><p>在 <code>teacher</code> 表中，根据筛选出来的教师编号找到教师姓名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> <span class="keyword">no</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="comment">-- 最终条件</span></span><br><span class="line">    <span class="keyword">SELECT</span> t_no <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> <span class="keyword">no</span> <span class="keyword">IN</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> c_no <span class="keyword">FROM</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_no <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">5</span></span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="子查询-3"><a href="#子查询-3" class="headerlink" title="子查询 - 3"></a>子查询 - 3</h3><p><strong>查询 “计算机系” 课程的成绩表。</strong></p><p>思路是，先找出 <code>course</code> 表中所有 <code>计算机系</code> 课程的编号，然后根据这个编号查询 <code>score</code> 表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 通过 teacher 表查询所有 `计算机系` 的教师编号</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">no</span>, name, department <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> department <span class="operator">=</span> <span class="string">&#x27;计算机系&#x27;</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+--------+--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">no</span>  <span class="operator">|</span> name   <span class="operator">|</span> department   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+--------+--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">804</span> <span class="operator">|</span> 李诚   <span class="operator">|</span> 计算机系     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">825</span> <span class="operator">|</span> 王萍   <span class="operator">|</span> 计算机系     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+--------+--------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 通过 course 表查询该教师的课程编号</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">no</span> <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> t_no <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">no</span> <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> department <span class="operator">=</span> <span class="string">&#x27;计算机系&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">no</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 根据筛选出来的课程号查询成绩表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_no <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">no</span> <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> t_no <span class="keyword">IN</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="keyword">no</span> <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> department <span class="operator">=</span> <span class="string">&#x27;计算机系&#x27;</span></span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> s_no <span class="operator">|</span> c_no  <span class="operator">|</span> degree <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">86</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">75</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">68</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">101</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">102</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">91</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">92</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">104</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">89</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">88</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">76</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br></pre></td></tr></table></figure><h3 id="UNION-和-NOTIN-的使用"><a href="#UNION-和-NOTIN-的使用" class="headerlink" title="UNION 和 NOTIN 的使用"></a>UNION 和 NOTIN 的使用</h3><p><strong>查询 <code>计算机系</code> 与 <code>电子工程系</code> 中的不同职称的教师。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- NOT: 代表逻辑非</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> department <span class="operator">=</span> <span class="string">&#x27;计算机系&#x27;</span> <span class="keyword">AND</span> profession <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> profession <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> department <span class="operator">=</span> <span class="string">&#x27;电子工程系&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 合并两个集</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> department <span class="operator">=</span> <span class="string">&#x27;电子工程系&#x27;</span> <span class="keyword">AND</span> profession <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> profession <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> department <span class="operator">=</span> <span class="string">&#x27;计算机系&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="ANY-表示至少一个-DESC-降序"><a href="#ANY-表示至少一个-DESC-降序" class="headerlink" title="ANY 表示至少一个 - DESC ( 降序 )"></a>ANY 表示至少一个 - DESC ( 降序 )</h3><p><strong>查询课程 <code>3-105</code> 且成绩 <u>至少</u> 高于 <code>3-245</code> 的 <code>score</code> 表。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_no <span class="operator">=</span> <span class="string">&#x27;3-105&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> s_no <span class="operator">|</span> c_no  <span class="operator">|</span> degree <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">101</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">102</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">91</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">92</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">104</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">89</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">88</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">76</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_no <span class="operator">=</span> <span class="string">&#x27;3-245&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> s_no <span class="operator">|</span> c_no  <span class="operator">|</span> degree <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">86</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">75</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">68</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ANY: 符合SQL语句中的任意条件。</span></span><br><span class="line"><span class="comment">-- 也就是说，在 3-105 成绩中，只要有一个大于从 3-245 筛选出来的任意行就符合条件，</span></span><br><span class="line"><span class="comment">-- 最后根据降序查询结果。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_no <span class="operator">=</span> <span class="string">&#x27;3-105&#x27;</span> <span class="keyword">AND</span> degree <span class="operator">&gt;</span> <span class="keyword">ANY</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> degree <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_no <span class="operator">=</span> <span class="string">&#x27;3-245&#x27;</span></span><br><span class="line">) <span class="keyword">ORDER</span> <span class="keyword">BY</span> degree <span class="keyword">DESC</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> s_no <span class="operator">|</span> c_no  <span class="operator">|</span> degree <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">92</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">102</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">91</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">101</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">104</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">89</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">88</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">76</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br></pre></td></tr></table></figure><h3 id="表示所有的-ALL"><a href="#表示所有的-ALL" class="headerlink" title="表示所有的 ALL"></a>表示所有的 ALL</h3><p><strong>查询课程 <code>3-105</code> 且成绩高于 <code>3-245</code> 的 <code>score</code> 表。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 只需对上一道题稍作修改。</span></span><br><span class="line"><span class="comment">-- ALL: 符合SQL语句中的所有条件。</span></span><br><span class="line"><span class="comment">-- 也就是说，在 3-105 每一行成绩中，都要大于从 3-245 筛选出来全部行才算符合条件。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_no <span class="operator">=</span> <span class="string">&#x27;3-105&#x27;</span> <span class="keyword">AND</span> degree <span class="operator">&gt;</span> <span class="keyword">ALL</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> degree <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_no <span class="operator">=</span> <span class="string">&#x27;3-245&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> s_no <span class="operator">|</span> c_no  <span class="operator">|</span> degree <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">101</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">102</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">91</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">92</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">104</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">89</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">88</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br></pre></td></tr></table></figure><h3 id="复制表的数据作为条件查询"><a href="#复制表的数据作为条件查询" class="headerlink" title="复制表的数据作为条件查询"></a>复制表的数据作为条件查询</h3><p><strong>查询某课程成绩比该课程平均成绩低的 <code>score</code> 表。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询平均分</span></span><br><span class="line"><span class="keyword">SELECT</span> c_no, <span class="built_in">AVG</span>(degree) <span class="keyword">FROM</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_no;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+</span></span><br><span class="line"><span class="operator">|</span> c_no  <span class="operator">|</span> <span class="built_in">AVG</span>(degree) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">87.6667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">76.3333</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">81.6667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 score 表</span></span><br><span class="line"><span class="keyword">SELECT</span> degree <span class="keyword">FROM</span> score;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> degree <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">91</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">92</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">86</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">85</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">89</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">88</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">75</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">79</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">76</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">68</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">81</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将表 b 作用于表 a 中查询数据</span></span><br><span class="line"><span class="comment">-- score a (b): 将表声明为 a (b)，</span></span><br><span class="line"><span class="comment">-- 如此就能用 a.c_no = b.c_no 作为条件执行查询了。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> score a <span class="keyword">WHERE</span> degree <span class="operator">&lt;</span> (</span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(degree) <span class="keyword">FROM</span> score b <span class="keyword">WHERE</span> a.c_no <span class="operator">=</span> b.c_no)</span><br><span class="line">);</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> s_no <span class="operator">|</span> c_no  <span class="operator">|</span> degree <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">75</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">79</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">76</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span>     <span class="number">68</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span>     <span class="number">81</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br></pre></td></tr></table></figure><h3 id="子查询-4"><a href="#子查询-4" class="headerlink" title="子查询 - 4"></a>子查询 - 4</h3><p><strong>查询所有任课 ( 在 <code>course</code> 表里有课程 ) 教师的 <code>name</code> 和 <code>department</code></strong> 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, department <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> <span class="keyword">no</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> t_no <span class="keyword">FROM</span> course);</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> name   <span class="operator">|</span> department      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> 李诚   <span class="operator">|</span> 计算机系        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 王萍   <span class="operator">|</span> 计算机系        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 刘冰   <span class="operator">|</span> 电子工程系      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 张旭   <span class="operator">|</span> 电子工程系      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------------+</span></span><br></pre></td></tr></table></figure><h3 id="条件加组筛选"><a href="#条件加组筛选" class="headerlink" title="条件加组筛选"></a>条件加组筛选</h3><p><strong>查询 <code>student</code> 表中至少有 2 名男生的 <code>class</code> 。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看学生表信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-----------+-----+------------+-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">no</span>  <span class="operator">|</span> name      <span class="operator">|</span> sex <span class="operator">|</span> birthday   <span class="operator">|</span> class <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-----------+-----+------------+-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">101</span> <span class="operator">|</span> 曾华      <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">1977</span><span class="number">-09</span><span class="number">-01</span> <span class="operator">|</span> <span class="number">95033</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">102</span> <span class="operator">|</span> 匡明      <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">1975</span><span class="number">-10</span><span class="number">-02</span> <span class="operator">|</span> <span class="number">95031</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span> <span class="operator">|</span> 王丽      <span class="operator">|</span> 女  <span class="operator">|</span> <span class="number">1976</span><span class="number">-01</span><span class="number">-23</span> <span class="operator">|</span> <span class="number">95033</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">104</span> <span class="operator">|</span> 李军      <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">1976</span><span class="number">-02</span><span class="number">-20</span> <span class="operator">|</span> <span class="number">95033</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span> <span class="operator">|</span> 王芳      <span class="operator">|</span> 女  <span class="operator">|</span> <span class="number">1975</span><span class="number">-02</span><span class="number">-10</span> <span class="operator">|</span> <span class="number">95031</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">106</span> <span class="operator">|</span> 陆军      <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">1974</span><span class="number">-06</span><span class="number">-03</span> <span class="operator">|</span> <span class="number">95031</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">107</span> <span class="operator">|</span> 王尼玛    <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">1976</span><span class="number">-02</span><span class="number">-20</span> <span class="operator">|</span> <span class="number">95033</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">108</span> <span class="operator">|</span> 张全蛋    <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">1975</span><span class="number">-02</span><span class="number">-10</span> <span class="operator">|</span> <span class="number">95031</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span> <span class="operator">|</span> 赵铁柱    <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">1974</span><span class="number">-06</span><span class="number">-03</span> <span class="operator">|</span> <span class="number">95031</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">110</span> <span class="operator">|</span> 张飞      <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">1974</span><span class="number">-06</span><span class="number">-03</span> <span class="operator">|</span> <span class="number">95038</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-----------+-----+------------+-------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 只查询性别为男，然后按 class 分组，并限制 class 行大于 1。</span></span><br><span class="line"><span class="keyword">SELECT</span> class <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> class <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span> class <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">95033</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">95031</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br></pre></td></tr></table></figure><h3 id="NOTLIKE-模糊查询取反"><a href="#NOTLIKE-模糊查询取反" class="headerlink" title="NOTLIKE 模糊查询取反"></a>NOTLIKE 模糊查询取反</h3><p><strong>查询 <code>student</code> 表中不姓 “王” 的同学记录。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- NOT: 取反</span></span><br><span class="line"><span class="comment">-- LIKE: 模糊查询</span></span><br><span class="line"><span class="keyword">sql</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> name <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;王%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-----------+-----+------------+-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">no</span>  <span class="operator">|</span> name      <span class="operator">|</span> sex <span class="operator">|</span> birthday   <span class="operator">|</span> class <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-----------+-----+------------+-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">101</span> <span class="operator">|</span> 曾华      <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">1977</span><span class="number">-09</span><span class="number">-01</span> <span class="operator">|</span> <span class="number">95033</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">102</span> <span class="operator">|</span> 匡明      <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">1975</span><span class="number">-10</span><span class="number">-02</span> <span class="operator">|</span> <span class="number">95031</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">104</span> <span class="operator">|</span> 李军      <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">1976</span><span class="number">-02</span><span class="number">-20</span> <span class="operator">|</span> <span class="number">95033</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">106</span> <span class="operator">|</span> 陆军      <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">1974</span><span class="number">-06</span><span class="number">-03</span> <span class="operator">|</span> <span class="number">95031</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">108</span> <span class="operator">|</span> 张全蛋    <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">1975</span><span class="number">-02</span><span class="number">-10</span> <span class="operator">|</span> <span class="number">95031</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span> <span class="operator">|</span> 赵铁柱    <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">1974</span><span class="number">-06</span><span class="number">-03</span> <span class="operator">|</span> <span class="number">95031</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">110</span> <span class="operator">|</span> 张飞      <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">1974</span><span class="number">-06</span><span class="number">-03</span> <span class="operator">|</span> <span class="number">95038</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-----------+-----+------------+-------+</span></span><br></pre></td></tr></table></figure><h3 id="YEAR-与-NOW-函数"><a href="#YEAR-与-NOW-函数" class="headerlink" title="YEAR 与 NOW 函数"></a>YEAR 与 NOW 函数</h3><p><strong>查询 <code>student</code> 表中每个学生的姓名和年龄。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用函数 YEAR(NOW()) 计算出当前年份，减去出生年份后得出年龄。</span></span><br><span class="line"><span class="keyword">SELECT</span> name, <span class="keyword">YEAR</span>(NOW()) <span class="operator">-</span> <span class="keyword">YEAR</span>(birthday) <span class="keyword">as</span> age <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------+</span></span><br><span class="line"><span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------+</span></span><br><span class="line"><span class="operator">|</span> 曾华      <span class="operator">|</span>   <span class="number">42</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 匡明      <span class="operator">|</span>   <span class="number">44</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 王丽      <span class="operator">|</span>   <span class="number">43</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 李军      <span class="operator">|</span>   <span class="number">43</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 王芳      <span class="operator">|</span>   <span class="number">44</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 陆军      <span class="operator">|</span>   <span class="number">45</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 王尼玛    <span class="operator">|</span>   <span class="number">43</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 张全蛋    <span class="operator">|</span>   <span class="number">44</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 赵铁柱    <span class="operator">|</span>   <span class="number">45</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 张飞      <span class="operator">|</span>   <span class="number">45</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------+</span></span><br></pre></td></tr></table></figure><h3 id="MAX-与-MIN-函数"><a href="#MAX-与-MIN-函数" class="headerlink" title="MAX 与 MIN 函数"></a>MAX 与 MIN 函数</h3><p><strong>查询 <code>student</code> 表中最大和最小的 <code>birthday</code> 值。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(birthday), <span class="built_in">MIN</span>(birthday) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">MAX</span>(birthday) <span class="operator">|</span> <span class="built_in">MIN</span>(birthday) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1977</span><span class="number">-09</span><span class="number">-01</span>    <span class="operator">|</span> <span class="number">1974</span><span class="number">-06</span><span class="number">-03</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+---------------+</span></span><br></pre></td></tr></table></figure><h3 id="多段排序"><a href="#多段排序" class="headerlink" title="多段排序"></a>多段排序</h3><p><strong>以 <code>class</code> 和 <code>birthday</code> 从大到小的顺序查询 <code>student</code> 表。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> class <span class="keyword">DESC</span>, birthday;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-----------+-----+------------+-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">no</span>  <span class="operator">|</span> name      <span class="operator">|</span> sex <span class="operator">|</span> birthday   <span class="operator">|</span> class <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-----------+-----+------------+-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">110</span> <span class="operator">|</span> 张飞      <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">1974</span><span class="number">-06</span><span class="number">-03</span> <span class="operator">|</span> <span class="number">95038</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span> <span class="operator">|</span> 王丽      <span class="operator">|</span> 女  <span class="operator">|</span> <span class="number">1976</span><span class="number">-01</span><span class="number">-23</span> <span class="operator">|</span> <span class="number">95033</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">104</span> <span class="operator">|</span> 李军      <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">1976</span><span class="number">-02</span><span class="number">-20</span> <span class="operator">|</span> <span class="number">95033</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">107</span> <span class="operator">|</span> 王尼玛    <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">1976</span><span class="number">-02</span><span class="number">-20</span> <span class="operator">|</span> <span class="number">95033</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">101</span> <span class="operator">|</span> 曾华      <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">1977</span><span class="number">-09</span><span class="number">-01</span> <span class="operator">|</span> <span class="number">95033</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">106</span> <span class="operator">|</span> 陆军      <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">1974</span><span class="number">-06</span><span class="number">-03</span> <span class="operator">|</span> <span class="number">95031</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span> <span class="operator">|</span> 赵铁柱    <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">1974</span><span class="number">-06</span><span class="number">-03</span> <span class="operator">|</span> <span class="number">95031</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span> <span class="operator">|</span> 王芳      <span class="operator">|</span> 女  <span class="operator">|</span> <span class="number">1975</span><span class="number">-02</span><span class="number">-10</span> <span class="operator">|</span> <span class="number">95031</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">108</span> <span class="operator">|</span> 张全蛋    <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">1975</span><span class="number">-02</span><span class="number">-10</span> <span class="operator">|</span> <span class="number">95031</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">102</span> <span class="operator">|</span> 匡明      <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">1975</span><span class="number">-10</span><span class="number">-02</span> <span class="operator">|</span> <span class="number">95031</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-----------+-----+------------+-------+</span></span><br></pre></td></tr></table></figure><h3 id="子查询-5"><a href="#子查询-5" class="headerlink" title="子查询 - 5"></a>子查询 - 5</h3><p><strong>查询 “男” 教师及其所上的课程。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> t_no <span class="keyword">in</span> (<span class="keyword">SELECT</span> <span class="keyword">no</span> <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> sex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">no</span>    <span class="operator">|</span> name         <span class="operator">|</span> t_no <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span> 操作系统     <span class="operator">|</span> <span class="number">804</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span> 数字电路     <span class="operator">|</span> <span class="number">856</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------+------+</span></span><br></pre></td></tr></table></figure><h3 id="MAX-函数与子查询"><a href="#MAX-函数与子查询" class="headerlink" title="MAX 函数与子查询"></a>MAX 函数与子查询</h3><p><strong>查询最高分同学的 <code>score</code> 表。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 找出最高成绩（该查询只能有一个结果）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(degree) <span class="keyword">FROM</span> score;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 根据上面的条件筛选出所有最高成绩表，</span></span><br><span class="line"><span class="comment">-- 该查询可能有多个结果，假设 degree 值多次符合条件。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> degree <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(degree) <span class="keyword">FROM</span> score);</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> s_no <span class="operator">|</span> c_no  <span class="operator">|</span> degree <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">92</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br></pre></td></tr></table></figure><h3 id="子查询-6"><a href="#子查询-6" class="headerlink" title="子查询 - 6"></a>子查询 - 6</h3><p><strong>查询和 “李军” 同性别的所有同学 <code>name</code> 。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 首先将李军的性别作为条件取出来</span></span><br><span class="line"><span class="keyword">SELECT</span> sex <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;李军&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span> sex <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span> 男  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 根据性别查询 name 和 sex</span></span><br><span class="line"><span class="keyword">SELECT</span> name, sex <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sex <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> sex <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;李军&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----+</span></span><br><span class="line"><span class="operator">|</span> name      <span class="operator">|</span> sex <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----+</span></span><br><span class="line"><span class="operator">|</span> 曾华      <span class="operator">|</span> 男  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 匡明      <span class="operator">|</span> 男  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 李军      <span class="operator">|</span> 男  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 陆军      <span class="operator">|</span> 男  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 王尼玛    <span class="operator">|</span> 男  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 张全蛋    <span class="operator">|</span> 男  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 赵铁柱    <span class="operator">|</span> 男  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 张飞      <span class="operator">|</span> 男  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----+</span></span><br></pre></td></tr></table></figure><h3 id="子查询-7"><a href="#子查询-7" class="headerlink" title="子查询 - 7"></a>子查询 - 7</h3><p><strong>查询和 “李军” 同性别且同班的同学 <code>name</code> 。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, sex, class <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sex <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> sex <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;李军&#x27;</span></span><br><span class="line">) <span class="keyword">AND</span> class <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> class <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;李军&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----+-------+</span></span><br><span class="line"><span class="operator">|</span> name      <span class="operator">|</span> sex <span class="operator">|</span> class <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----+-------+</span></span><br><span class="line"><span class="operator">|</span> 曾华      <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">95033</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 李军      <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">95033</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 王尼玛    <span class="operator">|</span> 男  <span class="operator">|</span> <span class="number">95033</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----+-------+</span></span><br></pre></td></tr></table></figure><h3 id="子查询-8"><a href="#子查询-8" class="headerlink" title="子查询 - 8"></a>子查询 - 8</h3><p><strong>查询所有选修 “计算机导论” 课程的 “男” 同学成绩表。</strong></p><p>需要的 “计算机导论” 和性别为 “男” 的编号可以在 <code>course</code> 和 <code>student</code> 表中找到。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_no <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">no</span> <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;计算机导论&#x27;</span></span><br><span class="line">) <span class="keyword">AND</span> s_no <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">no</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> s_no <span class="operator">|</span> c_no  <span class="operator">|</span> degree <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">101</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">102</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">91</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">104</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">89</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span>     <span class="number">76</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+--------+</span></span><br></pre></td></tr></table></figure><h3 id="按等级查询"><a href="#按等级查询" class="headerlink" title="按等级查询"></a>按等级查询</h3><p>建立一个 <code>grade</code> 表代表学生的成绩等级，并插入数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> grade (</span><br><span class="line">    low <span class="type">INT</span>(<span class="number">3</span>),</span><br><span class="line">    upp <span class="type">INT</span>(<span class="number">3</span>),</span><br><span class="line">    grade <span class="type">char</span>(<span class="number">1</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> grade <span class="keyword">VALUES</span> (<span class="number">90</span>, <span class="number">100</span>, <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> grade <span class="keyword">VALUES</span> (<span class="number">80</span>, <span class="number">89</span>, <span class="string">&#x27;B&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> grade <span class="keyword">VALUES</span> (<span class="number">70</span>, <span class="number">79</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> grade <span class="keyword">VALUES</span> (<span class="number">60</span>, <span class="number">69</span>, <span class="string">&#x27;D&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> grade <span class="keyword">VALUES</span> (<span class="number">0</span>, <span class="number">59</span>, <span class="string">&#x27;E&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> grade;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+-------+</span></span><br><span class="line"><span class="operator">|</span> low  <span class="operator">|</span> upp  <span class="operator">|</span> grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+-------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">90</span> <span class="operator">|</span>  <span class="number">100</span> <span class="operator">|</span> A     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">80</span> <span class="operator">|</span>   <span class="number">89</span> <span class="operator">|</span> B     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">70</span> <span class="operator">|</span>   <span class="number">79</span> <span class="operator">|</span> C     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">60</span> <span class="operator">|</span>   <span class="number">69</span> <span class="operator">|</span> D     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">0</span> <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> E     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+-------+</span></span><br></pre></td></tr></table></figure><p><strong>查询所有学生的 <code>s_no</code> 、<code>c_no</code> 和 <code>grade</code> 列。</strong></p><p>思路是，使用区间 ( <code>BETWEEN</code> ) 查询，判断学生的成绩 ( <code>degree</code> )  在 <code>grade</code> 表的 <code>low</code> 和 <code>upp</code> 之间。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_no, c_no, grade <span class="keyword">FROM</span> score, grade </span><br><span class="line"><span class="keyword">WHERE</span> degree <span class="keyword">BETWEEN</span> low <span class="keyword">AND</span> upp;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+-------+</span></span><br><span class="line"><span class="operator">|</span> s_no <span class="operator">|</span> c_no  <span class="operator">|</span> grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">101</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span> A     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">102</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span> A     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span> A     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span> B     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span>  <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span> B     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">104</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span> B     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span> B     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span> C     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span>  <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span> C     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-105</span> <span class="operator">|</span> C     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">3</span><span class="number">-245</span> <span class="operator">|</span> D     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">109</span>  <span class="operator">|</span> <span class="number">6</span><span class="number">-166</span> <span class="operator">|</span> B     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+-------+</span></span><br></pre></td></tr></table></figure><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>准备用于测试连接查询的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE testJoin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person (</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    cardId <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> card (</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> card <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;饭卡&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;建行卡&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;农行卡&#x27;</span>), (<span class="number">4</span>, <span class="string">&#x27;工商卡&#x27;</span>), (<span class="number">5</span>, <span class="string">&#x27;邮政卡&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> card;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> 饭卡      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> 建行卡    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> 农行卡    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> 工商卡    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> 邮政卡    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> person <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="number">3</span>), (<span class="number">3</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="number">6</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> person;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name   <span class="operator">|</span> cardId <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> 张三   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> 李四   <span class="operator">|</span>      <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> 王五   <span class="operator">|</span>      <span class="number">6</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+</span></span><br></pre></td></tr></table></figure><p>分析两张表发现，<code>person</code> 表并没有为 <code>cardId</code> 字段设置一个在 <code>card</code> 表中对应的 <code>id</code> 外键。如果设置了的话，<code>person</code> 中 <code>cardId</code> 字段值为 <code>6</code> 的行就插不进去，因为该 <code>cardId</code> 值在 <code>card</code> 表中并没有。</p><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>要查询这两张表中有关系的数据，可以使用 <code>INNER JOIN</code> ( 内连接 ) 将它们连接在一起。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- INNER JOIN: 表示为内连接，将两张表拼接在一起。</span></span><br><span class="line"><span class="comment">-- on: 表示要执行某个条件。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> person <span class="keyword">INNER</span> <span class="keyword">JOIN</span> card <span class="keyword">on</span> person.cardId <span class="operator">=</span> card.id;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name   <span class="operator">|</span> cardId <span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> 张三   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> 饭卡      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> 李四   <span class="operator">|</span>      <span class="number">3</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> 农行卡    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+------+-----------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将 INNER 关键字省略掉，结果也是一样的。</span></span><br><span class="line"><span class="comment">-- SELECT * FROM person JOIN card on person.cardId = card.id;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>card</code> 的整张表被连接到了右边。</p></blockquote><h4 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h4><p>完整显示左边的表 ( <code>person</code> ) ，右边的表如果符合条件就显示，不符合则补 <code>NULL</code> 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- LEFT JOIN 也叫做 LEFT OUTER JOIN，用这两种方式的查询结果是一样的。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> person <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> card <span class="keyword">on</span> person.cardId <span class="operator">=</span> card.id;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name   <span class="operator">|</span> cardId <span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> 张三   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> 饭卡      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> 李四   <span class="operator">|</span>      <span class="number">3</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> 农行卡    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> 王五   <span class="operator">|</span>      <span class="number">6</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+------+-----------+</span></span><br></pre></td></tr></table></figure><h4 id="右外链接"><a href="#右外链接" class="headerlink" title="右外链接"></a>右外链接</h4><p>完整显示右边的表 ( <code>card</code> ) ，左边的表如果符合条件就显示，不符合则补 <code>NULL</code> 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> person <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> card <span class="keyword">on</span> person.cardId <span class="operator">=</span> card.id;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name   <span class="operator">|</span> cardId <span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> 张三   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> 饭卡      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> 李四   <span class="operator">|</span>      <span class="number">3</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> 农行卡    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> 建行卡    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> 工商卡    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> 邮政卡    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+------+-----------+</span></span><br></pre></td></tr></table></figure><h4 id="全外链接"><a href="#全外链接" class="headerlink" title="全外链接"></a>全外链接</h4><p>完整显示两张表的全部数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- sql 不支持这种语法的全外连接</span></span><br><span class="line"><span class="comment">-- SELECT * FROM person FULL JOIN card on person.cardId = card.id;</span></span><br><span class="line"><span class="comment">-- 出现错误：</span></span><br><span class="line"><span class="comment">-- ERROR 1054 (42S22): Unknown column &#x27;person.cardId&#x27; in &#x27;on clause&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- sql全连接语法，使用 UNION 将两张表合并在一起。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> person <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> card <span class="keyword">on</span> person.cardId <span class="operator">=</span> card.id</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> person <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> card <span class="keyword">on</span> person.cardId <span class="operator">=</span> card.id;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name   <span class="operator">|</span> cardId <span class="operator">|</span> id   <span class="operator">|</span> name      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> 张三   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> 饭卡      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> 李四   <span class="operator">|</span>      <span class="number">3</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> 农行卡    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> 王五   <span class="operator">|</span>      <span class="number">6</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> 建行卡    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> 工商卡    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> 邮政卡    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+--------+------+-----------+</span></span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>在 sql 中，事务其实是一个最小的不可分割的工作单元。事务能够<strong>保证一个业务的完整性</strong>。</p><p>比如我们的银行转账：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- a -&gt; -100</span></span><br><span class="line">UPDATE <span class="keyword">user</span> <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">100</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- b -&gt; +100</span></span><br><span class="line">UPDATE <span class="keyword">user</span> <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">100</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;b&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在实际项目中，假设只有一条 SQL 语句执行成功，而另外一条执行失败了，就会出现数据前后不一致。</p><p>因此，在执行多条有关联 SQL 语句时，<strong>事务</strong>可能会要求这些 SQL 语句要么同时执行成功，要么就都执行失败。</p><h3 id="如何控制事务-COMMIT-ROLLBACK"><a href="#如何控制事务-COMMIT-ROLLBACK" class="headerlink" title="如何控制事务 - COMMIT / ROLLBACK"></a>如何控制事务 - COMMIT / ROLLBACK</h3><p>在 sql 中，事务的<strong>自动提交</strong>状态默认是开启的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询事务的自动提交状态</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@AUTOCOMMIT</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@AUTOCOMMIT</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br></pre></td></tr></table></figure><p><strong>自动提交的作用</strong>：当我们执行一条 SQL 语句的时候，其产生的效果就会立即体现出来，且不能<strong>回滚</strong>。</p><p>什么是回滚？举个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE bank;</span><br><span class="line"></span><br><span class="line">USE bank;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    money <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> a    <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br></pre></td></tr></table></figure><p>可以看到，在执行插入语句后数据立刻生效，原因是 sql 中的事务自动将它<strong>提交</strong>到了数据库中。那么所谓<strong>回滚</strong>的意思就是，撤销执行过的所有 SQL 语句，使其回滚到<strong>最后一次提交</strong>数据时的状态。</p><p>在 sql 中使用 <code>ROLLBACK</code> 执行回滚：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 回滚到最后一次提交</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> a    <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br></pre></td></tr></table></figure><p>由于所有执行过的 SQL 语句都已经被提交过了，所以数据并没有发生回滚。那如何让数据可以发生回滚？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 关闭自动提交</span></span><br><span class="line"><span class="keyword">SET</span> AUTOCOMMIT <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询自动提交状态</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@AUTOCOMMIT</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@AUTOCOMMIT</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br></pre></td></tr></table></figure><p>将自动提交关闭后，测试数据回滚：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 关闭 AUTOCOMMIT 后，数据的变化是在一张虚拟的临时数据表中展示，</span></span><br><span class="line"><span class="comment">-- 发生变化的数据并没有真正插入到数据表中。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> a    <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> b    <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 数据表中的真实数据其实还是：</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> a    <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 由于数据还没有真正提交，可以使用回滚</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 再次查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> a    <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br></pre></td></tr></table></figure><p>那如何将虚拟的数据真正提交到数据库中？使用 <code>COMMIT</code> : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">-- 手动提交数据（持久性），</span></span><br><span class="line"><span class="comment">-- 将数据真正提交到数据库中，执行后不能再回滚提交过的数据。</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交后测试回滚</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 再次查询（回滚无效了）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> a    <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> b    <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>总结</strong></p><ol><li><p><strong>自动提交</strong></p><ul><li><p>查看自动提交状态：<code>SELECT @@AUTOCOMMIT</code> ；</p></li><li><p>设置自动提交状态：<code>SET AUTOCOMMIT = 0</code> 。</p></li></ul></li><li><p><strong>手动提交</strong></p><p><code>@@AUTOCOMMIT = 0</code> 时，使用 <code>COMMIT</code> 命令提交事务。</p></li><li><p><strong>事务回滚</strong></p><p><code>@@AUTOCOMMIT = 0</code> 时，使用 <code>ROLLBACK</code> 命令回滚事务。</p></li></ol></blockquote><p><strong>事务的实际应用</strong>，让我们再回到银行转账项目：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 转账</span></span><br><span class="line">UPDATE <span class="keyword">user</span> <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">100</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 到账</span></span><br><span class="line">UPDATE <span class="keyword">user</span> <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">100</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> a    <span class="operator">|</span>   <span class="number">900</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> b    <span class="operator">|</span>  <span class="number">1100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br></pre></td></tr></table></figure><p>这时假设在转账时发生了意外，就可以使用 <code>ROLLBACK</code> 回滚到最后一次提交的状态：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 假设转账发生了意外，需要回滚。</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> a    <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> b    <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br></pre></td></tr></table></figure><p>这时我们又回到了发生意外之前的状态，也就是说，事务给我们提供了一个可以反悔的机会。假设数据没有发生意外，这时可以手动将数据真正提交到数据表中：<code>COMMIT</code> 。</p><h3 id="手动开启事务-BEGIN-START-TRANSACTION"><a href="#手动开启事务-BEGIN-START-TRANSACTION" class="headerlink" title="手动开启事务 - BEGIN / START TRANSACTION"></a>手动开启事务 - BEGIN / START TRANSACTION</h3><p>事务的默认提交被开启 ( <code>@@AUTOCOMMIT = 1</code> ) 后，此时就不能使用事务回滚了。但是我们还可以手动开启一个事务处理事件，使其可以发生回滚：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用 BEGIN 或者 START TRANSACTION 手动开启一个事务</span></span><br><span class="line"><span class="comment">-- START TRANSACTION;</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line">UPDATE <span class="keyword">user</span> <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">100</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">UPDATE <span class="keyword">user</span> <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">100</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 由于手动开启的事务没有开启自动提交，</span></span><br><span class="line"><span class="comment">-- 此时发生变化的数据仍然是被保存在一张临时表中。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> a    <span class="operator">|</span>   <span class="number">900</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> b    <span class="operator">|</span>  <span class="number">1100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 测试回滚</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> a    <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> b    <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br></pre></td></tr></table></figure><p>仍然使用 <code>COMMIT</code> 提交数据，提交后无法再发生本次事务的回滚。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line">UPDATE <span class="keyword">user</span> <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">100</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">UPDATE <span class="keyword">user</span> <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">100</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> a    <span class="operator">|</span>   <span class="number">900</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> b    <span class="operator">|</span>  <span class="number">1100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交数据</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 测试回滚（无效，因为表的数据已经被提交）</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure><h3 id="事务的-ACID-特征与使用"><a href="#事务的-ACID-特征与使用" class="headerlink" title="事务的 ACID 特征与使用"></a>事务的 ACID 特征与使用</h3><p><strong>事务的四大特征：</strong></p><ul><li><strong>A 原子性</strong>：事务是最小的单位，不可以再分割；</li><li><strong>C 一致性</strong>：要求同一事务中的 SQL 语句，必须保证同时成功或者失败；</li><li><strong>I 隔离性</strong>：事务1 和 事务2 之间是具有隔离性的；</li><li><strong>D 持久性</strong>：事务一旦结束 ( <code>COMMIT</code> ) ，就不可以再返回了 ( <code>ROLLBACK</code> ) 。</li></ul><h3 id="事务的隔离性"><a href="#事务的隔离性" class="headerlink" title="事务的隔离性"></a>事务的隔离性</h3><p><strong>事务的隔离性可分为四种 ( 性能从低到高 )</strong> ：</p><ol><li><p><strong>READ UNCOMMITTED ( 读取未提交 )</strong></p><p>如果有多个事务，那么任意事务都可以看见其他事务的<strong>未提交数据</strong>。</p></li><li><p><strong>READ COMMITTED ( 读取已提交 )</strong></p><p>只能读取到其他事务<strong>已经提交的数据</strong>。</p></li><li><p><strong>REPEATABLE READ ( 可被重复读 )</strong></p><p>如果有多个连接都开启了事务，那么事务之间不能共享数据记录，否则只能共享已提交的记录。</p></li><li><p><strong>SERIALIZABLE ( 串行化 )</strong></p><p>所有的事务都会按照<strong>固定顺序执行</strong>，执行完一个事务后再继续执行下一个事务的<strong>写入操作</strong>。</p></li></ol><p>查看当前数据库的默认隔离级别：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- sql 8.x, GLOBAL 表示系统级别，不加表示会话级别。</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@GLOBAL</span>.TRANSACTION_ISOLATION;</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@TRANSACTION</span>_ISOLATION;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@GLOBAL</span>.TRANSACTION_ISOLATION <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> REPEATABLE<span class="operator">-</span>READ                <span class="operator">|</span> <span class="comment">-- sql的默认隔离级别，可以重复读。</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- sql 5.x</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@GLOBAL</span>.TX_ISOLATION;</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@TX</span>_ISOLATION;</span><br></pre></td></tr></table></figure><p>修改隔离级别：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 设置系统隔离级别，LEVEL 后面表示要设置的隔离级别 (READ UNCOMMITTED)。</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询系统隔离级别，发现已经被修改。</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@GLOBAL</span>.TRANSACTION_ISOLATION;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@GLOBAL</span>.TRANSACTION_ISOLATION <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> READ<span class="operator">-</span>UNCOMMITTED               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br></pre></td></tr></table></figure><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><p>测试 <strong>READ UNCOMMITTED ( 读取未提交 )</strong> 的隔离性：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;淘宝店&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name      <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> a         <span class="operator">|</span>   <span class="number">900</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> b         <span class="operator">|</span>  <span class="number">1100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 小明      <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 淘宝店    <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启一个事务操作数据</span></span><br><span class="line"><span class="comment">-- 假设小明在淘宝店买了一双800块钱的鞋子：</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line">UPDATE <span class="keyword">user</span> <span class="keyword">SET</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">800</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line">UPDATE <span class="keyword">user</span> <span class="keyword">SET</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">800</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;淘宝店&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 然后淘宝店在另一方查询结果，发现钱已到账。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name      <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> a         <span class="operator">|</span>   <span class="number">900</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> b         <span class="operator">|</span>  <span class="number">1100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 小明      <span class="operator">|</span>   <span class="number">200</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 淘宝店    <span class="operator">|</span>  <span class="number">1800</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br></pre></td></tr></table></figure><p>由于小明的转账是在新开启的事务上进行操作的，而该操作的结果是可以被其他事务（另一方的淘宝店）看见的，因此淘宝店的查询结果是正确的，淘宝店确认到账。但就在这时，如果小明在它所处的事务上又执行了 <code>ROLLBACK</code> 命令，会发生什么？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 小明所处的事务</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 此时无论对方是谁，如果再去查询结果就会发现：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name      <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> a         <span class="operator">|</span>   <span class="number">900</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> b         <span class="operator">|</span>  <span class="number">1100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 小明      <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 淘宝店    <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br></pre></td></tr></table></figure><p>这就是所谓的<strong>脏读</strong>，一个事务读取到另外一个事务还未提交的数据。这在实际开发中是不允许出现的。</p><h4 id="读取已提交"><a href="#读取已提交" class="headerlink" title="读取已提交"></a>读取已提交</h4><p>把隔离级别设置为 <strong>READ COMMITTED</strong> ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@GLOBAL</span>.TRANSACTION_ISOLATION;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@GLOBAL</span>.TRANSACTION_ISOLATION <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> READ<span class="operator">-</span>COMMITTED                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br></pre></td></tr></table></figure><p>这样，再有新的事务连接进来时，它们就只能查询到已经提交过的事务数据了。但是对于当前事务来说，它们看到的还是未提交的数据，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 正在操作数据事务（当前事务）</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line">UPDATE <span class="keyword">user</span> <span class="keyword">SET</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">800</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line">UPDATE <span class="keyword">user</span> <span class="keyword">SET</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">800</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;淘宝店&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 虽然隔离级别被设置为了 READ COMMITTED，但在当前事务中，</span></span><br><span class="line"><span class="comment">-- 它看到的仍然是数据表中临时改变数据，而不是真正提交过的数据。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name      <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> a         <span class="operator">|</span>   <span class="number">900</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> b         <span class="operator">|</span>  <span class="number">1100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 小明      <span class="operator">|</span>   <span class="number">200</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 淘宝店    <span class="operator">|</span>  <span class="number">1800</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 假设此时在远程开启了一个新事务，连接到数据库。</span></span><br><span class="line">$ <span class="keyword">sql</span> <span class="operator">-</span>u root <span class="operator">-</span>p12345612</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 此时远程连接查询到的数据只能是已经提交过的</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name      <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> a         <span class="operator">|</span>   <span class="number">900</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> b         <span class="operator">|</span>  <span class="number">1100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 小明      <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 淘宝店    <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br></pre></td></tr></table></figure><p>但是这样还有问题，那就是假设一个事务在操作数据时，其他事务干扰了这个事务的数据。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 小张在查询数据的时候发现：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name      <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> a         <span class="operator">|</span>   <span class="number">900</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> b         <span class="operator">|</span>  <span class="number">1100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 小明      <span class="operator">|</span>   <span class="number">200</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 淘宝店    <span class="operator">|</span>  <span class="number">1800</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在小张求表的 money 平均值之前，小王做了一个操作：</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 此时表的真实数据是：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name      <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> a         <span class="operator">|</span>   <span class="number">900</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> b         <span class="operator">|</span>  <span class="number">1100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 小明      <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 淘宝店    <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> c         <span class="operator">|</span>   <span class="number">100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 这时小张再求平均值的时候，就会出现计算不相符合的情况：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(money) <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">AVG</span>(money) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">820.0000</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br></pre></td></tr></table></figure><p>虽然 <strong>READ COMMITTED</strong> 让我们只能读取到其他事务已经提交的数据，但还是会出现问题，就是<strong>在读取同一个表的数据时，可能会发生前后不一致的情况。</strong>这被称为<strong>不可重复读现象 ( READ COMMITTED )</strong> 。</p><h4 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h4><p>将隔离级别设置为 <strong>REPEATABLE READ ( 可被重复读取 )</strong> :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> TRANSACTION ISOLATION LEVEL REPEATABLE READ;</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@GLOBAL</span>.TRANSACTION_ISOLATION;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@GLOBAL</span>.TRANSACTION_ISOLATION <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> REPEATABLE<span class="operator">-</span>READ                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br></pre></td></tr></table></figure><p>测试 <strong>REPEATABLE READ</strong> ，假设在两个不同的连接上分别执行 <code>START TRANSACTION</code> :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 小张 - 成都</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;d&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 小王 - 北京</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 小张 - 成都</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>当前事务开启后，没提交之前，查询不到，提交后可以被查询到。但是，在提交之前其他事务被开启了，那么在这条事务线上，就不会查询到当前有操作事务的连接。相当于开辟出一条单独的线程。</p><p>无论小张是否执行过 <code>COMMIT</code> ，在小王这边，都不会查询到小张的事务记录，而是只会查询到自己所处事务的记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name      <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> a         <span class="operator">|</span>   <span class="number">900</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> b         <span class="operator">|</span>  <span class="number">1100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 小明      <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 淘宝店    <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> c         <span class="operator">|</span>   <span class="number">100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br></pre></td></tr></table></figure><p>这是<strong>因为小王在此之前开启了一个新的事务 ( <code>START TRANSACTION</code> ) <strong>，那么</strong>在他的这条新事务的线上，跟其他事务是没有联系的</strong>，也就是说，此时如果其他事务正在操作数据，它是不知道的。</p><p>然而事实是，在真实的数据表中，小张已经插入了一条数据。但是小王此时并不知道，也插入了同一条数据，会发生什么呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;d&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">-- ERROR 1062 (23000): Duplicate entry &#x27;6&#x27; for key &#x27;PRIMARY&#x27;</span></span><br></pre></td></tr></table></figure><p>报错了，操作被告知已存在主键为 <code>6</code> 的字段。这种现象也被称为<strong>幻读，一个事务提交的数据，不能被其他事务读取到</strong>。</p><h4 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h4><p>顾名思义，就是所有事务的<strong>写入操作</strong>全都是串行化的。什么意思？把隔离级别修改成 <strong>SERIALIZABLE</strong> :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> TRANSACTION ISOLATION LEVEL SERIALIZABLE;</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@GLOBAL</span>.TRANSACTION_ISOLATION;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@GLOBAL</span>.TRANSACTION_ISOLATION <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> SERIALIZABLE                   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br></pre></td></tr></table></figure><p>还是拿小张和小王来举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 小张 - 成都</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 小王 - 北京</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务之前先查询表，准备操作数据。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name      <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> a         <span class="operator">|</span>   <span class="number">900</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> b         <span class="operator">|</span>  <span class="number">1100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 小明      <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 淘宝店    <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> c         <span class="operator">|</span>   <span class="number">100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> d         <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 发现没有 7 号王小花，于是插入一条数据：</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="string">&#x27;王小花&#x27;</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>此时会发生什么呢？由于现在的隔离级别是 <strong>SERIALIZABLE ( 串行化 )</strong> ，串行化的意思就是：假设把所有的事务都放在一个串行的队列中，那么所有的事务都会按照<strong>固定顺序执行</strong>，执行完一个事务后再继续执行下一个事务的<strong>写入操作</strong> ( <strong>这意味着队列中同时只能执行一个事务的写入操作</strong> ) 。</p><p>根据这个解释，小王在插入数据时，会出现等待状态，直到小张执行 <code>COMMIT</code> 结束它所处的事务，或者出现等待超时。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础</title>
      <link href="2020/10/02/MySQL%E5%9F%BA%E7%A1%80/"/>
      <url>2020/10/02/MySQL%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-使用终端操作数据库"><a href="#MySQL-使用终端操作数据库" class="headerlink" title="MySQL-使用终端操作数据库"></a>MySQL-使用终端操作数据库</h1><p>1.如何查看有什么数据库?</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><p>2.如何选择数据库?  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use databasesName;</span><br></pre></td></tr></table></figure><p>3.如何查看该数据库中有哪些表?</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><p>4.如何查询表中的数据?</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tableName;</span><br></pre></td></tr></table></figure><p>5.如何退出数据库服务器?</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit;</span><br></pre></td></tr></table></figure><p>6.如何在数据库服务器中创建自己的数据库?   </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database databaseName;</span><br></pre></td></tr></table></figure><p>7.如何创建一个数据表? 创建一个pet表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">TABLE</span> pet(</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    owner <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    specise <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    sex <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">    brith DATAE,</span><br><span class="line">    death <span class="type">DATE</span> </span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>注意事项:</p></blockquote><ul><li><p>1:var()与varchar()的区别在于var()是定常的,哪怕存储的字符串没有达到”()”中数字的上限,var()依然会占用空格来填充空间.而varchar()则是不定长的,没有达到”()”中的上限则会自动去掉后面的空格;</p></li><li><p>2:性别不要用:sex 要用:gender  一个是性 一个是性别;</p></li><li><p>3:定义最后一个字段的时候不要加”,”;</p></li><li><p>4:上面的”VAR”,”VARCHAR”,”DATE”可以用小写.不过最好用大写来表示区分关键字,若不然也许写到后面你自己都不知道这个词是数据库中的关键字还是你自己自定义的一些数据,同时一定要用英文的标点符号也必须半角输入</p></li></ul><p>8.如何查看数据表的架构?   </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">describe</span> tableName;</span><br><span class="line"> 说明:</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br></pre></td></tr></table></figure><ul><li><p>Field    :    字段的名称</p></li><li><p>Type     :    字段的类型,可以有int</p></li><li><p>var    varchar</p></li><li><p>Key      :    是否是关键字 如可以定义为:  primary key 或者 unique key</p></li><li><p>Default: :    若是该字段没有主动设置值的时候,该字段的默认值是什么?</p></li></ul><p>9.如何插入数据?</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pet <span class="keyword">VALUES</span>(<span class="string">&#x27;kk&#x27;</span>,<span class="string">&#x27;cc&#x27;</span>,<span class="string">&#x27;dog&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1998-8-2&#x27;</span>,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><pre><code>       +------+-------+---------+------+------------+-------+       | name | owner | specise | sex     | brith           | death |       +------+-------+---------+------+------------+-------+       | kk       | cc       | dog      | 1        | 1998-08-02 | NULL|       +------+-------+---------+------+------------+-------+</code></pre><blockquote><p>注意:<br>NULL:代表的是空,表示该字段还没有数据.千万不要主动填写’NULL’,这代表你的字段有一个值叫做’null’.</p></blockquote><p>其实还有一种写法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pet(name,owner) <span class="keyword">VALUES</span> (<span class="string">&#x27;xx&#x27;</span>,<span class="string">&#x27;cc&#x27;</span>);</span><br><span class="line">代表我只在name和owner字段上面插入的一条,其他皆为<span class="keyword">NULL</span><span class="operator">/</span>默认值的数据</span><br></pre></td></tr></table></figure><p>10.mysql 常用数据类型</p><p>注意:金钱最好用int/bigint(整数,单位用分,拿出来进行*100换成元),千万不要直接用浮点,会有精度损失.</p><p>11.如何删除数据</p><p>先插入数据:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pet <span class="keyword">VALUES</span>(<span class="string">&#x27;kk1&#x27;</span>,<span class="string">&#x27;cc1&#x27;</span>,<span class="string">&#x27;dog1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1998-1-2&#x27;</span>,<span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pet <span class="keyword">VALUES</span>(<span class="string">&#x27;kk2&#x27;</span>,<span class="string">&#x27;cc2&#x27;</span>,<span class="string">&#x27;dog2&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;1998-2-2&#x27;</span>,<span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pet <span class="keyword">VALUES</span>(<span class="string">&#x27;kk3&#x27;</span>,<span class="string">&#x27;cc3&#x27;</span>,<span class="string">&#x27;dog3&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1998-3-2&#x27;</span>,<span class="string">&#x27;1998-12-2&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pet <span class="keyword">VALUES</span>(<span class="string">&#x27;kk4&#x27;</span>,<span class="string">&#x27;cc4&#x27;</span>,<span class="string">&#x27;dog4&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;1998-4-2&#x27;</span>,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>删除语句:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tablesName WHRER 条件;</span><br></pre></td></tr></table></figure><p>修改数据:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE tableName <span class="keyword">SET</span> 字段<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>,字段<span class="number">2</span><span class="operator">=</span>值<span class="number">2</span> ... <span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></table></figure><p>12.mysql建表中的约束</p><p>1.主键约束:</p><p>它能够唯一确定一张表中的一条记录,增加主键约束之后,就可以使得字段不重复而且不为空</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 张三 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+</span></span><br><span class="line"></span><br><span class="line">运行<span class="keyword">DESCRIBE</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line">发现 id是不可以为<span class="keyword">null</span> 而且 key的值 也变为:PRI(<span class="keyword">primary</span>)</span><br></pre></td></tr></table></figure><p>2.复合主键:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user2(</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    password <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> key(id,name)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">运行<span class="keyword">DESCRIBE</span> user2;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field    <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id       <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name     <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> password <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------+------+-----+---------+-------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user2 <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;老王&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user2 <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="string">&#x27;老王&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 老王 <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 老王 <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+----------+</span></span><br></pre></td></tr></table></figure><p>说明了复合主键只要所有的字段都不是相同的情况下可以允许其中的字段重复:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user2 <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;老李&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user2;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 老李 <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 老王 <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 老王 <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+----------+</span></span><br><span class="line">场景:表中有班级号以及学生座位号,我们可以用班级号<span class="operator">+</span>学生的座位号可以准确的定位一个学生,如:(<span class="number">1</span>班<span class="number">5</span>号可以准确的确定一个学生)</span><br></pre></td></tr></table></figure><p>3.自增约束:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user3(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">运行<span class="keyword">DESCRIBE</span> user3;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user3(name) <span class="keyword">VALUES</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user3(name) <span class="keyword">VALUES</span>(<span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 张三 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 李四 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+</span></span><br><span class="line">没有自定义id值 但是自动生成了id</span><br></pre></td></tr></table></figure><p>4.唯一约束:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user5(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line">运行 <span class="keyword">DESCRIBE</span> user5;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"></span><br><span class="line">新增name为唯一约束:</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user5 <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span>(name);</span><br><span class="line">运行 <span class="keyword">DESCRIBE</span> user5;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span> UNI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line">测试:插入数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user5(name) <span class="keyword">VALUES</span> (<span class="string">&#x27;cc&#x27;</span>);</span><br><span class="line">运行 <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user5; 查看结果:</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> cc   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+</span></span><br><span class="line">再次插入<span class="keyword">INSERT</span> <span class="keyword">INTO</span> user5(name) <span class="keyword">VALUES</span> (<span class="string">&#x27;cc&#x27;</span>);</span><br><span class="line">出现:ERROR <span class="number">1062</span> (<span class="number">23000</span>): Duplicate entry <span class="string">&#x27;cc&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;name&#x27;</span></span><br><span class="line"></span><br><span class="line">换个试试 <span class="keyword">INSERT</span> <span class="keyword">INTO</span> user5(name) <span class="keyword">VALUES</span> (<span class="string">&#x27;aa&#x27;</span>);</span><br><span class="line">运行 <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user5; 查看结果:</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> aa   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> cc   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+</span></span><br><span class="line">总结一下:</span><br><span class="line">    主键约束(<span class="keyword">primary</span> key)中包含了唯一约束</span><br><span class="line">场景:业务需求:设计一张用户注册表,用户姓名必须要用手机号来注册,而且手机号和用户名称都不能为空,那么:</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user_test(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT COMMENT<span class="string">&#x27;主键id&#x27;</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;用户姓名,不能为空&#x27;</span>,</span><br><span class="line">    phone_number <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;用户手机,不能重复且不能为空&#x27;</span></span><br><span class="line">);</span><br><span class="line">运行 <span class="keyword">DESCRIBE</span> user_test;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field        <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id           <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name         <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> phone_number <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> UNI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+------+-----+---------+----------------+</span></span><br><span class="line">这样的话就达到了每一个手机号都只能出现一次,达到了每个手机号只能被注册一次.</span><br><span class="line">用户姓名可以重复,但是手机号码却不能重复,复合正常的逻辑需求</span><br></pre></td></tr></table></figure><p>5.非空约束:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name和phone_number都设置了非空,先只设置name参数不设置phone_number参数试一试</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_test (name) <span class="keyword">VALUES</span> (<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line">会出现Field <span class="string">&#x27;phone_number&#x27;</span> doesn<span class="string">&#x27;t have a default value</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">两个非空参数一起设置:</span></span><br><span class="line"><span class="string">INSERT INTO user_test (name,phone_number) VALUES (&#x27;</span>张三<span class="string">&#x27;,&#x27;</span><span class="number">12345678901</span><span class="string">&#x27;);</span></span><br><span class="line"><span class="string">+----+------+--------------+</span></span><br><span class="line"><span class="string">| id | name | phone_number |</span></span><br><span class="line"><span class="string">+----+------+--------------+</span></span><br><span class="line"><span class="string">|  1 | 张三 | 12345678901  |</span></span><br><span class="line"><span class="string">+----+------+--------------+</span></span><br></pre></td></tr></table></figure><p>6.默认约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user6(</span><br><span class="line">   id <span class="type">int</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT COMMENT<span class="string">&#x27;主键id&#x27;</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;用户姓名不能为空&#x27;</span>,</span><br><span class="line">    phone_number <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT<span class="string">&#x27;用户手机号,不能为空&#x27;</span>,</span><br><span class="line">    status <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT<span class="string">&#x27;用户状态0:启用 1:禁封 默认:0&#x27;</span></span><br><span class="line">);</span><br><span class="line">运行<span class="keyword">DESCRIBE</span> user6;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field        <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id           <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name         <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> phone_number <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> status       <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)     <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="number">0</span>       <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+------+-----+---------+----------------+</span></span><br><span class="line">插入数据:</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user6(name,phone_number) <span class="keyword">VALUES</span> (<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user6(name,phone_number) <span class="keyword">VALUES</span>(<span class="string">&#x27;bb&#x27;</span>,<span class="string">&#x27;1234&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user6(name,phone_number) <span class="keyword">VALUES</span>(<span class="string">&#x27;cc&#x27;</span>,<span class="string">&#x27;1263456&#x27;</span>);</span><br><span class="line"></span><br><span class="line">查看数据:<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user6;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+--------------+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> phone_number <span class="operator">|</span> status <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+--------------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> aa   <span class="operator">|</span> <span class="number">123</span>          <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> bb   <span class="operator">|</span> <span class="number">1234</span>         <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> cc   <span class="operator">|</span> <span class="number">1263456</span>      <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+--------------+--------+</span></span><br><span class="line">我们没有设置status的值,但是给我们创建了默认值 <span class="number">0.</span></span><br><span class="line"></span><br><span class="line">应用场景:</span><br><span class="line">业务需求:找正常的用户,对这些正常用户进行发放优惠卷或者积分之类的东西,而被禁封的用户我们不让其参加多动.</span><br><span class="line">我们想要封用户只要将status的值从<span class="number">0</span>改为<span class="number">1</span>就行了,当然我们取用户的时候必须要先判断status是否是<span class="number">0.</span>若是<span class="number">1.</span>说明该用户已经被禁封.</span><br><span class="line">先封手机号为<span class="string">&#x27;1234&#x27;</span>的用户:</span><br><span class="line">UPDATE user6 <span class="keyword">SET</span> status <span class="operator">=</span> <span class="number">1</span> <span class="keyword">WHERE</span> phone_number<span class="operator">=</span> <span class="string">&#x27;1234&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user6;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+--------------+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> phone_number <span class="operator">|</span> status <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+--------------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> aa   <span class="operator">|</span> <span class="number">123</span>          <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> bb   <span class="operator">|</span> <span class="number">1234</span>         <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> cc   <span class="operator">|</span> <span class="number">1263456</span>      <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+--------------+--------+</span></span><br><span class="line">status为<span class="number">1</span>,说明用户已经被封,该用户不可以参加活动</span><br><span class="line"></span><br><span class="line">我们取用户的时候加上status的判断,如:</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user6 <span class="keyword">WHERE</span> status <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+--------------+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> phone_number <span class="operator">|</span> status <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+--------------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> aa   <span class="operator">|</span> <span class="number">123</span>          <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> cc   <span class="operator">|</span> <span class="number">1263456</span>      <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+--------------+--------+</span></span><br></pre></td></tr></table></figure><p>7.外键约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> classes(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT COMMENT<span class="string">&#x27;班级表id&#x27;</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT<span class="string">&#x27;班级名称&#x27;</span></span><br><span class="line">);</span><br><span class="line">运行<span class="keyword">DESCRIBE</span> classes;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">   id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT COMMENT<span class="string">&#x27;学生表id&#x27;</span>,</span><br><span class="line">   name <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT<span class="string">&#x27;学生姓名&#x27;</span>,</span><br><span class="line">    class_id <span class="type">int</span> COMMENT<span class="string">&#x27;教室id,这张表中的class_id是classes表中id的值&#x27;</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (class_id) <span class="keyword">REFERENCES</span> classes(id)</span><br><span class="line">);</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="keyword">FOREIGN</span> :外来  <span class="keyword">REFERENCES</span>:应用,参考</span><br><span class="line">运行<span class="keyword">DESCRIBE</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field    <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id       <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name     <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> class_id <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)     <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"></span><br><span class="line">班级插入数据:</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> CLASSES (name) <span class="keyword">VALUES</span> (<span class="string">&#x27;一班&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> CLASSES (name) <span class="keyword">VALUES</span> (<span class="string">&#x27;二班&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> CLASSES (name) <span class="keyword">VALUES</span> (<span class="string">&#x27;三班&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> CLASSES (name) <span class="keyword">VALUES</span> (<span class="string">&#x27;四班&#x27;</span>);</span><br><span class="line">查看数据 <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> classes;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 一班 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 二班 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 三班 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 四班 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+</span></span><br><span class="line"></span><br><span class="line">学生插入数据:</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (name,class_id) <span class="keyword">VALUES</span> (<span class="string">&#x27;小赵&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (name,class_id) <span class="keyword">VALUES</span> (<span class="string">&#x27;小钱&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (name,class_id) <span class="keyword">VALUES</span> (<span class="string">&#x27;小孙&#x27;</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (name,class_id) <span class="keyword">VALUES</span> (<span class="string">&#x27;小李&#x27;</span>,<span class="number">4</span>);</span><br><span class="line">查看数据 <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> class_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 小赵 <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 小钱 <span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 小孙 <span class="operator">|</span>        <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 小李 <span class="operator">|</span>        <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+----------+</span></span><br><span class="line">若是像插入班级为<span class="number">5</span>的数据 如:</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (name,class_id) <span class="keyword">VALUES</span> (<span class="string">&#x27;小周&#x27;</span>,<span class="number">5</span>);</span><br><span class="line">报错: Cannot <span class="keyword">add</span> <span class="keyword">or</span> update a child <span class="type">row</span></span><br><span class="line"></span><br><span class="line">我们删除正在被学生表引用的<span class="string">&#x27;四班&#x27;</span>试试:</span><br><span class="line"><span class="keyword">DELETE</span> classes <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;四班&#x27;</span>;</span><br><span class="line">出现:Cannot <span class="keyword">delete</span> <span class="keyword">or</span> update a parent <span class="type">row</span>:不能删除主表中的行</span><br><span class="line"></span><br><span class="line">我们先删除学生表中的 <span class="string">&#x27;小李&#x27;</span>从而解除班级中<span class="string">&#x27;四班&#x27;</span>的外键约束,再来删除<span class="string">&#x27;四班&#x27;</span>(因为小李引用了四班)</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;小李&#x27;</span>;</span><br><span class="line">再次删除classes表中的<span class="string">&#x27;四班&#x27;</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> classes <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;四班&#x27;</span>;</span><br><span class="line">最后: <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> classes;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 一班 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 二班 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 三班 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+</span></span><br><span class="line"><span class="string">&#x27;四班&#x27;</span>被成功删除<span class="operator">!</span></span><br><span class="line"></span><br><span class="line">总结:</span><br><span class="line"><span class="number">1.</span>主表中没有的数据,在附表中,是不可以使用的.</span><br><span class="line"><span class="number">2.</span>主表中记录的数据现在正在被附表所引用,那么主表中正在被引用的数据不可以被删除</span><br><span class="line"><span class="number">3.</span>若要想删除,先将附表中的数据删除在删除主表数据</span><br><span class="line"><span class="number">4.</span>对于外键约束大家可以联想 省,市 来进行联想 (市必须要依赖于省,只要省还有一个市在引用,那么就不可以删除省,要不然市就没有省了. 那么我们想删除省,必须要将该省下所有的市全部删除之后,才可以删除这个省)</span><br></pre></td></tr></table></figure><p>8.如何建表之后添加主键约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user4(</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line">运行<span class="keyword">DESCRIBE</span> user4;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)     <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"></span><br><span class="line">加入主键约束:</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user4 <span class="keyword">add</span> <span class="keyword">PRIMARY</span> KEY(id);</span><br><span class="line">再次运行<span class="keyword">DESCRIBE</span> user4;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"></span><br><span class="line">删除主键约束:</span><br><span class="line">ALERT <span class="keyword">TABLE</span> user4 <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br><span class="line">运行<span class="keyword">DESCRIBE</span> user4查看表结构:</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"></span><br><span class="line">使用modify 修改字段.添加约束:</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user4 MODIFY id <span class="type">INT</span> <span class="keyword">PRIMARY</span> key;</span><br><span class="line">使用<span class="keyword">DESCRIBE</span> user4 查看表结构:</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"></span><br><span class="line">给主键设置自增长:</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user4 MODIFY id <span class="type">INT</span> AUTO_INCREMENT;</span><br><span class="line">运行 <span class="keyword">DESCRIBE</span> user4 查看表结构:</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+ </span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-系统</title>
      <link href="2020/07/03/python%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>2020/07/03/python%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="一、系统需求"><a href="#一、系统需求" class="headerlink" title="一、系统需求"></a>一、系统需求</h2><p>使用面向对象编程思想完成学员管理系统的开发，具体如下：</p><ul><li>系统要求：学员数据存储在文件中</li><li>系统功能：添加学员、删除学员、修改学员信息、查询学员信息、显示所有学员信息、保存学员信息及退出系统等功能。</li></ul><h2 id="二、准备程序文件"><a href="#二、准备程序文件" class="headerlink" title="二、准备程序文件"></a>二、准备程序文件</h2><h3 id="1-分析"><a href="#1-分析" class="headerlink" title="1. 分析"></a>1. 分析</h3><ul><li>角色分析<ul><li>学员</li><li>管理系统</li></ul></li></ul><blockquote><p>工作中注意事项</p><ol><li>为了方便维护代码，一般一个角色一个程序文件；</li><li>项目要有主程序入口，习惯为<code>main.py</code></li></ol></blockquote><h3 id="2-创建程序文件"><a href="#2-创建程序文件" class="headerlink" title="2. 创建程序文件"></a>2. 创建程序文件</h3><p>创建项目目录，例如：<code>StudentManagerSystem</code></p><p>程序文件如下：</p><ul><li>程序入口文件：main.py</li><li>学员文件：student.py</li><li>管理系统文件：managerSystem.py</li></ul><h2 id="三、书写程序"><a href="#三、书写程序" class="headerlink" title="三、书写程序"></a>三、书写程序</h2><h3 id="1-student-py"><a href="#1-student-py" class="headerlink" title="1. student.py"></a>1. student.py</h3><p>需求：</p><ul><li>学员信息包含：姓名、性别、手机号；</li><li>添加<code>__str__</code>魔法方法，方便查看学员对象信息</li></ul><h4 id="1-1-程序代码"><a href="#1-1-程序代码" class="headerlink" title="1.1 程序代码"></a>1.1 程序代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, gender, tel</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.tel = tel</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>, <span class="subst">&#123;self.gender&#125;</span>, <span class="subst">&#123;self.tel&#125;</span>&#x27;</span></span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><h3 id="2-managerSystem-py"><a href="#2-managerSystem-py" class="headerlink" title="2. managerSystem.py"></a>2. managerSystem.py</h3><p>需求：</p><ul><li>存储数据的位置：文件(student.data)<ul><li>加载文件数据</li><li>修改数据后保存到文件</li></ul></li><li>存储数据的形式：列表存储学员对象</li><li>系统功能<ul><li>添加学员</li><li>删除学员</li><li>修改学员</li><li>查询学员信息</li><li>显示所有学员信息</li><li>保存学员信息</li><li>退出系统</li></ul></li></ul><h4 id="2-1-定义类"><a href="#2-1-定义类" class="headerlink" title="2.1 定义类"></a>2.1 定义类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentManager</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 存储数据所用的列表</span></span><br><span class="line">        self.student_list = []</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h4 id="2-2-管理系统框架"><a href="#2-2-管理系统框架" class="headerlink" title="2.2 管理系统框架"></a>2.2 管理系统框架</h4><p>需求：系统功能循环使用，用户输入不同的功能序号执行不同的功能。</p><ul><li>步骤<ul><li>定义程序入口函数<ul><li>加载数据</li><li>显示功能菜单</li><li>用户输入功能序号</li><li>根据用户输入的功能序号执行不同的功能</li></ul></li><li>定义系统功能函数，添加、删除学员等</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentManager</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 存储数据所用的列表</span></span><br><span class="line">        self.student_list = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 一. 程序入口函数，启动程序后执行的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 1. 加载学员信息</span></span><br><span class="line">        self.load_student()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 2. 显示功能菜单</span></span><br><span class="line">            self.show_menu()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 3. 用户输入功能序号</span></span><br><span class="line">            menu_num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入您需要的功能序号：&#x27;</span>))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 4 根据用户输入的功能序号执行不同的功能</span></span><br><span class="line">            <span class="keyword">if</span> menu_num == <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># 添加学员</span></span><br><span class="line">                self.add_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">2</span>:</span><br><span class="line">                <span class="comment"># 删除学员</span></span><br><span class="line">                self.del_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">3</span>:</span><br><span class="line">                <span class="comment"># 修改学员信息</span></span><br><span class="line">                self.modify_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">4</span>:</span><br><span class="line">                <span class="comment"># 查询学员信息</span></span><br><span class="line">                self.search_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">5</span>:</span><br><span class="line">                <span class="comment"># 显示所有学员信息</span></span><br><span class="line">                self.show_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">6</span>:</span><br><span class="line">                <span class="comment"># 保存学员信息</span></span><br><span class="line">                self.save_student()</span><br><span class="line">            <span class="keyword">elif</span> menu_num == <span class="number">7</span>:</span><br><span class="line">                <span class="comment"># 退出系统</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 二. 定义功能函数</span></span><br><span class="line">    <span class="comment"># 2.1 显示功能菜单</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_menu</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;请选择如下功能-----------------&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;1:添加学员&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;2:删除学员&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;3:修改学员信息&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;4:查询学员信息&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;5:显示所有学员信息&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;6:保存学员信息&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;7:退出系统&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.2 添加学员</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_student</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.3 删除学员</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_student</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.4 修改学员信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">modify_student</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.5 查询学员信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_student</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.6 显示所有学员信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_student</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.7 保存学员信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_student</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.8 加载学员信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_student</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980</span></span><br></pre></td></tr></table></figure><h3 id="3-main-py"><a href="#3-main-py" class="headerlink" title="3. main.py"></a>3. main.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 导入managerSystem模块</span></span><br><span class="line"><span class="keyword">from</span> managerSystem <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 启动学员管理系统</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    student_manager = StudentManager()</span><br><span class="line"></span><br><span class="line">    student_manager.run()</span><br><span class="line"><span class="number">123456789</span></span><br></pre></td></tr></table></figure><h3 id="4-定义系统功能函数"><a href="#4-定义系统功能函数" class="headerlink" title="4. 定义系统功能函数"></a>4. 定义系统功能函数</h3><h4 id="4-1-添加功能"><a href="#4-1-添加功能" class="headerlink" title="4.1 添加功能"></a>4.1 添加功能</h4><ul><li>需求：用户输入学员姓名、性别、手机号，将学员添加到系统。</li><li>步骤<ul><li>用户输入姓名、性别、手机号</li><li>创建该学员对象</li><li>将该学员对象添加到列表</li></ul></li><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加学员函数内部需要创建学员对象，故先导入student模块</span></span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentManager</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">......</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2.2 添加学员</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_student</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 1. 用户输入姓名、性别、手机号</span></span><br><span class="line">        name = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的姓名：&#x27;</span>)</span><br><span class="line">        gender = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的性别：&#x27;</span>)</span><br><span class="line">        tel = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的手机号：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 创建学员对象：先导入学员模块，再创建对象</span></span><br><span class="line">        student = Student(name, gender, tel)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 将该学员对象添加到列表</span></span><br><span class="line">        self.student_list.append(student)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 打印信息</span></span><br><span class="line">        <span class="built_in">print</span>(self.student_list)</span><br><span class="line">        <span class="built_in">print</span>(student)</span><br><span class="line"><span class="number">1234567891011121314151617181920212223</span></span><br></pre></td></tr></table></figure><h4 id="4-2-删除学员"><a href="#4-2-删除学员" class="headerlink" title="4.2 删除学员"></a>4.2 删除学员</h4><ul><li>需求：用户输入目标学员姓名，如果学员存在则删除该学员。</li><li>步骤<ul><li>用户输入目标学员姓名</li><li>遍历学员数据列表，如果用户输入的学员姓名存在则删除，否则则提示该学员不存在。</li></ul></li><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 2.3 删除学员：删除指定姓名的学员</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_student</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 1. 用户输入目标学员姓名</span></span><br><span class="line">        del_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要删除的学员姓名：&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2. 如果用户输入的目标学员存在则删除，否则提示学员不存在</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list:</span><br><span class="line">            <span class="keyword">if</span> i.name == del_name:</span><br><span class="line">                self.student_list.remove(i)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;查无此人！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打印学员列表，验证删除功能</span></span><br><span class="line">        <span class="built_in">print</span>(self.student_list)</span><br><span class="line"><span class="number">123456789101112131415</span></span><br></pre></td></tr></table></figure><h4 id="4-3-修改学员信息"><a href="#4-3-修改学员信息" class="headerlink" title="4.3 修改学员信息"></a>4.3 修改学员信息</h4><ul><li>需求：用户输入目标学员姓名，如果学员存在则修改该学员信息。</li><li>步骤<ul><li>用户输入目标学员姓名；</li><li>遍历学员数据列表，如果用户输入的学员姓名存在则修改学员的姓名、性别、手机号数据，否则则提示该学员不存在。</li></ul></li><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.4 修改学员信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">modify_student</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 1. 用户输入目标学员姓名</span></span><br><span class="line">        modify_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要修改的学员的姓名：&#x27;</span>)</span><br><span class="line">        <span class="comment"># 2. 如果用户输入的目标学员存在则修改姓名、性别、手机号等数据，否则提示学员不存在</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list:</span><br><span class="line">            <span class="keyword">if</span> i.name == modify_name:</span><br><span class="line">                i.name = <span class="built_in">input</span>(<span class="string">&#x27;请输入学员姓名：&#x27;</span>)</span><br><span class="line">                i.gender = <span class="built_in">input</span>(<span class="string">&#x27;请输入学员性别：&#x27;</span>)</span><br><span class="line">                i.tel = <span class="built_in">input</span>(<span class="string">&#x27;请输入学员手机号：&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;修改该学员信息成功，姓名<span class="subst">&#123;i.name&#125;</span>,性别<span class="subst">&#123;i.gender&#125;</span>, 手机号<span class="subst">&#123;i.tel&#125;</span>&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;查无此人！&#x27;</span>)</span><br><span class="line"><span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure><h4 id="4-4-查询学员信息"><a href="#4-4-查询学员信息" class="headerlink" title="4.4 查询学员信息"></a>4.4 查询学员信息</h4><ul><li>需求：用户输入目标学员姓名，如果学员存在则打印该学员信息</li><li>步骤<ul><li>用户输入目标学员姓名</li><li>遍历学员数据列表，如果用户输入的学员姓名存在则打印学员信息，否则提示该学员不存在。</li></ul></li><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.5 查询学员信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_student</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 1. 用户输入目标学员姓名</span></span><br><span class="line">        search_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要查询的学员的姓名：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 如果用户输入的目标学员存在，则打印学员信息，否则提示学员不存在</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list:</span><br><span class="line">            <span class="keyword">if</span> i.name == search_name:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;姓名<span class="subst">&#123;i.name&#125;</span>,性别<span class="subst">&#123;i.gender&#125;</span>, 手机号<span class="subst">&#123;i.tel&#125;</span>&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;查无此人!&#x27;</span>)</span><br><span class="line"><span class="number">123456789101112</span></span><br></pre></td></tr></table></figure><h4 id="4-5-显示所有学员信息"><a href="#4-5-显示所有学员信息" class="headerlink" title="4.5 显示所有学员信息"></a>4.5 显示所有学员信息</h4><ul><li>打印所有学员信息</li><li>步骤<ul><li>遍历学员数据列表，打印所有学员信息</li></ul></li><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 2.6 显示所有学员信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_student</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;姓名\t性别\t手机号&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i.name&#125;</span>\t<span class="subst">&#123;i.gender&#125;</span>\t<span class="subst">&#123;i.tel&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><h4 id="4-6-保存学员信息"><a href="#4-6-保存学员信息" class="headerlink" title="4.6 保存学员信息"></a>4.6 保存学员信息</h4><ul><li>需求：将修改后的学员数据保存到存储数据的文件。</li><li>步骤<ul><li>打开文件</li><li>文件写入数据</li><li>关闭文件</li></ul></li></ul><blockquote><p>思考</p><ol><li>文件写入的数据是学员对象的内存地址吗？</li><li>文件内数据要求的数据类型是什么？</li></ol></blockquote><ul><li>拓展<code>__dict__</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.b = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">aa = A()</span><br><span class="line"><span class="comment"># 返回类内部所有属性和方法对应的字典</span></span><br><span class="line"><span class="built_in">print</span>(A.__dict__)</span><br><span class="line"><span class="comment"># 返回实例属性和值组成的字典</span></span><br><span class="line"><span class="built_in">print</span>(aa.__dict__)</span><br><span class="line"><span class="number">123456789101112</span></span><br></pre></td></tr></table></figure><p>在Python中：</p><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 2.7 保存学员信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_student</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 1. 打开文件</span></span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&#x27;student.data&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 文件写入学员数据</span></span><br><span class="line">        <span class="comment"># 注意1：文件写入的数据不能是学员对象的内存地址，需要把学员数据转换成列表字典数据再做存储</span></span><br><span class="line">        new_list = [i.__dict__ <span class="keyword">for</span> i <span class="keyword">in</span> self.student_list]</span><br><span class="line">        <span class="comment"># [&#123;&#x27;name&#x27;: &#x27;aa&#x27;, &#x27;gender&#x27;: &#x27;nv&#x27;, &#x27;tel&#x27;: &#x27;111&#x27;&#125;]</span></span><br><span class="line">        <span class="built_in">print</span>(new_list)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 注意2：文件内数据要求为字符串类型，故需要先转换数据类型为字符串才能文件写入数据</span></span><br><span class="line">        f.write(<span class="built_in">str</span>(new_list))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 关闭文件</span></span><br><span class="line">        f.close()</span><br><span class="line"><span class="number">12345678910111213141516</span></span><br></pre></td></tr></table></figure><h4 id="4-7-加载学员信息"><a href="#4-7-加载学员信息" class="headerlink" title="4.7 加载学员信息"></a>4.7 加载学员信息</h4><ul><li>需求：每次进入系统后，修改的数据是文件里面的数据</li><li>步骤<ul><li>尝试以<code>&quot;r&quot;</code>模式打开学员数据文件，如果文件不存在则以<code>&quot;w&quot;</code>模式打开文件</li><li>如果文件存在则读取数据并存储数据<ul><li>读取数据</li><li>转换数据类型为列表并转换列表内的字典为对象</li><li>存储学员数据到学员列表</li></ul></li><li>关闭文件</li></ul></li><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.8 加载学员信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_student</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 尝试以&quot;r&quot;模式打开数据文件，文件不存在则提示用户；文件存在（没有异常）则读取数据</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            f = <span class="built_in">open</span>(<span class="string">&#x27;student.data&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            f = <span class="built_in">open</span>(<span class="string">&#x27;student.data&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 1. 读取数据</span></span><br><span class="line">            data = f.read()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 2. 文件中读取的数据都是字符串且字符串内部为字典数据，故需要转换数据类型再转换字典为对象后存储到学员列表</span></span><br><span class="line">            new_list = <span class="built_in">eval</span>(data)</span><br><span class="line">            self.student_list = [Student(i[<span class="string">&#x27;name&#x27;</span>], i[<span class="string">&#x27;gender&#x27;</span>], i[<span class="string">&#x27;tel&#x27;</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> new_list]</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment"># 3. 关闭文件</span></span><br><span class="line">            f.close()</span><br><span class="line"><span class="number">1234567891011121314151617</span></span><br></pre></td></tr></table></figure><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><ul><li>函数<ul><li>定义和调用</li><li>参数的使用</li></ul></li><li>面向对象<ul><li>定义类</li><li>创建对象</li><li>定义和调用实例属性</li><li>定义和调用实例方法</li></ul></li><li>数据类型<ul><li>列表<ul><li>增加删除数据</li><li>列表推导式</li></ul></li><li>字典</li><li>字符串</li></ul></li><li>文件操作<ul><li>打开文件</li><li>读取或写入</li><li>关闭文件</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> py基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-文件操作</title>
      <link href="2020/06/26/python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>2020/06/26/python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="一、文件操作的作用"><a href="#一、文件操作的作用" class="headerlink" title="一、文件操作的作用"></a>一、文件操作的作用</h2><p>思考：文件操作包含什么？</p><p>答：打开、关闭、读、写、复制…</p><p>思考：文件操作的的作用是什么？</p><p>答：读取内容、写入内容、备份内容…</p><blockquote><p>总结：文件操作的作用就是把一些内容(数据)存储存放起来，可以让程序下一次执行的时候直接使用，而不必重新制作一份，省时省力。</p></blockquote><h2 id="二、文件的基本操作"><a href="#二、文件的基本操作" class="headerlink" title="二、文件的基本操作"></a>二、文件的基本操作</h2><h3 id="1-文件操作步骤"><a href="#1-文件操作步骤" class="headerlink" title="1. 文件操作步骤"></a>1. 文件操作步骤</h3><ol><li>打开文件</li><li>读写等操作</li><li>关闭文件</li></ol><blockquote><p>注意：可以只打开和关闭文件，不进行任何读写操作。</p></blockquote><h4 id="1-1-打开"><a href="#1-1-打开" class="headerlink" title="1.1 打开"></a>1.1 打开</h4><p>在python，使用open函数，可以打开一个已经存在的文件，或者创建一个新文件，语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>(name, mode)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>name：是要打开的目标文件名的字符串(可以包含文件所在的具体路径)。</p><p>mode：设置打开文件的模式(访问模式)：只读、写入、追加等。</p><h5 id="1-1-1-打开文件模式"><a href="#1-1-1-打开文件模式" class="headerlink" title="1.1.1 打开文件模式"></a>1.1.1 打开文件模式</h5><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>w</td><td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>w+</td><td>打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td>ab+</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><h5 id="1-1-2-快速体验"><a href="#1-1-2-快速体验" class="headerlink" title="1.1.2 快速体验"></a>1.1.2 快速体验</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：此时的<code>f</code>是<code>open</code>函数的文件对象。</p></blockquote><h4 id="2-1-文件对象方法"><a href="#2-1-文件对象方法" class="headerlink" title="2.1 文件对象方法"></a>2.1 文件对象方法</h4><h5 id="1-2-1-写"><a href="#1-2-1-写" class="headerlink" title="1.2.1 写"></a>1.2.1 写</h5><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">文件对象.write(<span class="string">&#x27;内容&#x27;</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>体验</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 打开文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.文件写入</span></span><br><span class="line">f.write(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 关闭文件</span></span><br><span class="line">f.close()</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li><code>w</code>和<code>a</code>模式：如果文件不存在则创建该文件；如果文件存在，<code>w</code>模式先清空再写入，<code>a</code>模式直接末尾追加。</li><li><code>r</code>模式：如果文件不存在则报错。</li></ol></blockquote><h5 id="1-2-2-读"><a href="#1-2-2-读" class="headerlink" title="1.2.2 读"></a>1.2.2 读</h5><ul><li>read()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">文件对象.read(num)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>num表示要从文件中读取的数据的长度（单位是字节），如果没有传入num，那么就表示读取文件中所有的数据。</p></blockquote><ul><li>readlines()</li></ul><p>readlines可以按照行的方式把整个文件中的内容进行一次性读取，并且返回的是一个列表，其中每一行的数据为一个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">content = f.readlines()</span><br><span class="line"></span><br><span class="line"><span class="comment"># [&#x27;hello world\n&#x27;, &#x27;abcdefg\n&#x27;, &#x27;aaa\n&#x27;, &#x27;bbb\n&#x27;, &#x27;ccc&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">f.close()</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><ul><li>readline()</li></ul><p>readline()一次读取一行内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">content = f.readline()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;第一行：<span class="subst">&#123;content&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">content = f.readline()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;第二行：<span class="subst">&#123;content&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">f.close()</span><br><span class="line"><span class="number">12345678910</span></span><br></pre></td></tr></table></figure><h5 id="1-2-3-seek"><a href="#1-2-3-seek" class="headerlink" title="1.2.3 seek()"></a>1.2.3 seek()</h5><p>作用：用来移动文件指针。</p><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">文件对象.seek(偏移量, 起始位置)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>起始位置：</p><ul><li>0：文件开头</li><li>1：当前位置</li><li>2：文件结尾</li></ul></blockquote><h4 id="3-1-关闭"><a href="#3-1-关闭" class="headerlink" title="3.1 关闭"></a>3.1 关闭</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">文件对象.close()</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="三、文件备份"><a href="#三、文件备份" class="headerlink" title="三、文件备份"></a>三、文件备份</h2><p>需求：用户输入当前目录下任意文件名，程序完成对该文件的备份功能(备份文件名为xx[备份]后缀，例如：test[备份].txt)。</p><h3 id="1-步骤"><a href="#1-步骤" class="headerlink" title="1. 步骤"></a>1. 步骤</h3><ol><li>接收用户输入的文件名</li><li>规划备份文件名</li><li>备份文件写入数据</li></ol><h3 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h3><ol><li>接收用户输入目标文件名</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">old_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入您要备份的文件名：&#x27;</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ol><li><p>规划备份文件名</p><p>2.1 提取目标文件后缀</p><p>2.2 组织备份的文件名，xx[备份]后缀</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.1 提取文件后缀点的下标</span></span><br><span class="line">index = old_name.rfind(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(index)  # 后缀中.的下标</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(old_name[:index])  # 源文件名（无后缀）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.2 组织新文件名 旧文件名 + [备份] + 后缀</span></span><br><span class="line">new_name = old_name[:index] + <span class="string">&#x27;[备份]&#x27;</span> + old_name[index:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印新文件名（带后缀）</span></span><br><span class="line"><span class="comment"># print(new_name)</span></span><br><span class="line"><span class="number">123456789101112</span></span><br></pre></td></tr></table></figure><ol><li><p>备份文件写入数据</p><p>3.1 打开源文件 和 备份文件</p><p>3.2 将源文件数据写入备份文件</p><p>3.3 关闭文件</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3.1 打开文件</span></span><br><span class="line">old_f = <span class="built_in">open</span>(old_name, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">new_f = <span class="built_in">open</span>(new_name, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.2 将源文件数据写入备份文件</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    con = old_f.read(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(con) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    new_f.write(con)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.3 关闭文件</span></span><br><span class="line">old_f.close()</span><br><span class="line">new_f.close()</span><br><span class="line"><span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure><h3 id="3-思考"><a href="#3-思考" class="headerlink" title="3. 思考"></a>3. 思考</h3><p>如果用户输入<code>.txt</code>，这是一个无效文件，程序如何更改才能限制只有有效的文件名才能备份？</p><p>答：添加条件判断即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">old_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入您要备份的文件名：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">index = old_name.rfind(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> index &gt; <span class="number">0</span>:</span><br><span class="line">    postfix = old_name[index:]</span><br><span class="line"></span><br><span class="line">new_name = old_name[:index] + <span class="string">&#x27;[备份]&#x27;</span> + postfix</span><br><span class="line"></span><br><span class="line">old_f = <span class="built_in">open</span>(old_name, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">new_f = <span class="built_in">open</span>(new_name, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    con = old_f.read(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(con) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    new_f.write(con)</span><br><span class="line"></span><br><span class="line">old_f.close()</span><br><span class="line">new_f.close()</span><br><span class="line"><span class="number">123456789101112131415161718192021</span></span><br></pre></td></tr></table></figure><h2 id="四、文件和文件夹的操作"><a href="#四、文件和文件夹的操作" class="headerlink" title="四、文件和文件夹的操作"></a>四、文件和文件夹的操作</h2><p>在Python中文件和文件夹的操作要借助os模块里面的相关功能，具体步骤如下：</p><ol><li>导入os模块</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ol><li>使用<code>os</code>模块相关功能</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.函数名()</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="1-文件重命名"><a href="#1-文件重命名" class="headerlink" title="1. 文件重命名"></a>1. 文件重命名</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.rename(目标文件名, 新文件名)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="2-删除文件"><a href="#2-删除文件" class="headerlink" title="2. 删除文件"></a>2. 删除文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.remove(目标文件名)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="3-创建文件夹"><a href="#3-创建文件夹" class="headerlink" title="3. 创建文件夹"></a>3. 创建文件夹</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.mkdir(文件夹名字)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="4-删除文件夹"><a href="#4-删除文件夹" class="headerlink" title="4. 删除文件夹"></a>4. 删除文件夹</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.rmdir(文件夹名字)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="5-获取当前目录"><a href="#5-获取当前目录" class="headerlink" title="5. 获取当前目录"></a>5. 获取当前目录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.getcwd()</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="6-改变默认目录"><a href="#6-改变默认目录" class="headerlink" title="6. 改变默认目录"></a>6. 改变默认目录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.chdir(目录)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="7-获取目录列表"><a href="#7-获取目录列表" class="headerlink" title="7. 获取目录列表"></a>7. 获取目录列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.listdir(目录)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="五、应用案例"><a href="#五、应用案例" class="headerlink" title="五、应用案例"></a>五、应用案例</h2><p>需求：批量修改文件名，既可添加指定字符串，又能删除指定字符串。</p><ul><li>步骤</li></ul><ol><li>设置添加删除字符串的的标识</li><li>获取指定目录的所有文件</li><li>将原有文件名添加/删除指定字符串，构造新名字</li><li>os.rename()重命名</li></ol><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置重命名标识：如果为1则添加指定字符，flag取值为2则删除指定字符</span></span><br><span class="line">flag = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定目录</span></span><br><span class="line">dir_name = <span class="string">&#x27;./&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定目录的文件列表</span></span><br><span class="line">file_list = os.listdir(dir_name)</span><br><span class="line"><span class="comment"># print(file_list)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历文件列表内的文件</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> file_list:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加指定字符</span></span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">        new_name = <span class="string">&#x27;Python-&#x27;</span> + name</span><br><span class="line">    <span class="comment"># 删除指定字符</span></span><br><span class="line">    <span class="keyword">elif</span> flag == <span class="number">2</span>:</span><br><span class="line">        num = <span class="built_in">len</span>(<span class="string">&#x27;Python-&#x27;</span>)</span><br><span class="line">        new_name = name[num:]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印新文件名，测试程序正确性</span></span><br><span class="line">    <span class="built_in">print</span>(new_name)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 重命名</span></span><br><span class="line">    os.rename(dir_name+name, dir_name+new_name)</span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526272829</span></span><br></pre></td></tr></table></figure><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><ul><li><p>文件操作步骤</p><ul><li>打开</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">文件对象 = <span class="built_in">open</span>(目标文件, 访问模式)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li><p>操作</p><ul><li>读</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">文件对象.read()</span><br><span class="line">文件对象.readlines()</span><br><span class="line">文件对象.readline()</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><ul><li>写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">文件对象.write()</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>seek()</li></ul></li><li><p>关闭</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">文件对象.close()</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>主访问模式</p><ul><li>w：写，文件不存在则新建该文件</li><li>r：读，文件不存在则报错</li><li>a：追加</li></ul></li><li><p>文件和文件夹操作</p><ul><li>重命名：<code>os.rename()</code></li><li>获取当前目录：<code>os.getcwd()</code></li><li>获取目录列表：<code>os.listdir()</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> py基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python伪私有属性</title>
      <link href="2020/06/22/python%E4%BC%AA%E7%A7%81%E6%9C%89%E5%B1%9E%E6%80%A7/"/>
      <url>2020/06/22/python%E4%BC%AA%E7%A7%81%E6%9C%89%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h2><p>我们都知道：在Python中，没有类似<code>private</code>之类的关键字来声明私有方法或属性。</p><p>Python中要声明私有属性，需要在属性前加上双下划线（但是结尾处不能有双下划线），如：<code>self.__a</code>。然而这样的什么方式并不是真正的私有，而是“伪私有”。</p><p>Python的伪私有属性，实际是通过变量名压缩（mangling）来实现变量名局部化。变量名压缩的规则：在初始的变量名头部加上一个下划线，再加上类的名称，最后是初始变量名的名称。</p><h2 id="二、实例"><a href="#二、实例" class="headerlink" title="二、实例"></a>二、实例</h2><h3 id="1-代码"><a href="#1-代码" class="headerlink" title="1. 代码"></a>1. 代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="comment"># 私有类属性</span></span><br><span class="line">    __flag = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 私有实例方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__func</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ok&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(A.__dict__)</span><br><span class="line"><span class="number">123456789</span></span><br></pre></td></tr></table></figure><h3 id="2-执行"><a href="#2-执行" class="headerlink" title="2. 执行"></a>2. 执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;__module__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;_A__flag&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;_A__func&#x27;</span>: &lt;function A.__func at <span class="number">0x000002422B7789D0</span>&gt;, <span class="string">&#x27;__dict__&#x27;</span>: &lt;attribute <span class="string">&#x27;__dict__&#x27;</span> of <span class="string">&#x27;A&#x27;</span> objects&gt;, <span class="string">&#x27;__weakref__&#x27;</span>: &lt;attribute <span class="string">&#x27;__weakref__&#x27;</span> of <span class="string">&#x27;A&#x27;</span> objects&gt;, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="3-分析"><a href="#3-分析" class="headerlink" title="3. 分析"></a>3. 分析</h3><p>通过上面的执行效果，我们可以看到：我们在类里面创建了一个私有类属性（__flag）、一个私有实例方法（__func），而我们在打印<code>__dict__</code>的时候发现——私有属性、私有方法的名字变了！此时显示：私有类属性（_A__flag）、私有实例方法（_A__func），这是为什么呢？</p><p>之前我们说过：Python没有类似<code>private</code>之类的关键字来声明私有方法或属性，那么它是靠什么来区分私有、公有呢？靠的就是在属性前加上双下划线，此时我们的Python解释器在执行到这里的时候，发现了这个<code>__</code>。此时它会耍一个“小聪明”，也就是根据我们之前说的变量名压缩（mangling），给这个属性、方法换一个变量名进行存储。那么此时，就可以实现私有化了。</p><h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h3><p>那么现在，我们去访问一下我们创建的类属性、实例方法，看一下效果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = A()</span><br><span class="line"><span class="built_in">print</span>(a.flag)</span><br><span class="line">a.func()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.__flag)</span><br><span class="line">a.__func()</span><br><span class="line"><span class="comment"># AttributeError: &#x27;A&#x27; object has no attribute &#x27;flag&#x27;</span></span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><p>那么我们之所以说它是“伪私有”，是因为在了解伪私有变量的变量名压缩规则后，可以根据压缩规则进行调用。此时，我们再去访问一下更名后的名字，看一下效果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a._A__flag)</span><br><span class="line">a._A__func()</span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># ok</span></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><p>此时，我们可以看到：成功的进行访问了。</p><h3 id="5-反思"><a href="#5-反思" class="headerlink" title="5. 反思"></a>5. 反思</h3><p>通过上面的演示，我们可以看出：私有其实就是我们的Python解释器给其换了一个名字。那么此时，你再去访问它之前的名字，肯定是访问不到的，这个很好理解。</p><p>此时，我也不建议你去通过我们上面的这种方法去访问。因为这样，就与Python的设计初衷相违背了，如果你要访问、修改，不妨通过<code>get</code>、<code>set</code>方法，也就是我们之前说过的“函数封装”。</p><p><strong>由此可见：Python的类并不存在正在的私有属性，通过双下划线实现的伪私有属性，本质上是对变量名进行压缩，使之无法直接在外部调用。</strong></p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>Python中默认的成员函数，成员变量都是公开的（public），而且Python中没有类似<code>public</code>、<code>private</code>等关键词来修饰成员函数，成员变量。</p><p>在Python中定义私有变量只需要在变量名或函数名前加上“<code>__</code>”两个下划线，那么这个函数或变量就会为私有的了。</p><p>在内部，Python使用一种 name mangling 技术，将 __membername替换成 _classname__membername，所以你在外部使用原来的私有成员的名字时，会提示找不到。</p><p>命名混淆意在给出一个在类中定义“私有”实例变量和方法的简单途径， 避免派生类的实例变量定义产生问题，或者与外界代码中的变量搞混。 要注意的是混淆规则主要目的在于避免意外错误， 被认作为私有的变量仍然有可能被访问或修改。 在特定的场合它也是有用的，比如调试的时候， 这也是一直没有堵上这个漏洞的原因之一 （小漏洞：派生类和基类取相同的名字就可以使用基类的私有变量）。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> py基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之面向对象</title>
      <link href="2020/06/19/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>2020/06/19/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、理解面向对象"><a href="#一、理解面向对象" class="headerlink" title="一、理解面向对象"></a>一、理解面向对象</h2><p>面向对象是一种抽象化的编程思想，很多编程语言中都有的一种思想。</p><p>例如：洗衣服</p><p>思考：几种途径可以完成洗衣服？</p><p>答： 手洗 和 机洗。</p><p>手洗：找盆 - 放水 - 加洗衣粉 - 浸泡 - 搓洗 - 拧干水 - 倒水 - 漂洗N次 - 拧干 - 晾晒。</p><p>机洗：打开洗衣机 - 放衣服 - 加洗衣粉 - 按下开始按钮 - 晾晒。</p><p>思考：对比两种洗衣服途径，同学们发现了什么？</p><p>答：机洗更简单</p><p>思考：机洗，只需要找到一台洗衣机，加入简单操作就可以完成洗衣服的工作，而不需要关心洗衣机内部发生了什么事情。</p><blockquote><p>总结：面向对象就是将编程当成是一个事物，对外界来说，事物是直接使用的，不用去管他内部的情况。而编程就是设置事物能够做什么事。</p></blockquote><h2 id="二、类和对象"><a href="#二、类和对象" class="headerlink" title="二、类和对象"></a>二、类和对象</h2><p>思考：洗衣机洗衣服描述过程中，洗衣机其实就是一个事物，即对象，洗衣机对象哪来的呢？</p><p>答：洗衣机是由工厂工人制作出来。</p><p>思考：工厂工人怎么制作出的洗衣机？</p><p>答：工人根据设计师设计的功能图纸制作洗衣机。</p><p>总结：图纸 → 洗衣机 → 洗衣服。</p><p>在面向对象编程过程中，有两个重要组成部分：类 和 对象。</p><p>类和对象的关系：用类去创建一个对象。</p><h3 id="1-理解类和对象"><a href="#1-理解类和对象" class="headerlink" title="1. 理解类和对象"></a>1. 理解类和对象</h3><h4 id="1-1-类"><a href="#1-1-类" class="headerlink" title="1.1 类"></a>1.1 类</h4><p>类是对一系列具有相同特征和行为的事物的统称，是一个抽象的概念，不是真实存在的事物。</p><ul><li>特征即是属性</li><li>行为即是方法</li></ul><p>类比如是制造洗衣机时要用到的图纸，也就是说类是用来创建对象。</p><h4 id="1-2-对象"><a href="#1-2-对象" class="headerlink" title="1.2 对象"></a>1.2 对象</h4><p>对象是类创建出来的真实存在的事物，例如：洗衣机。</p><blockquote><p>注意：开发中，先有类，再有对象。</p></blockquote><h3 id="2-面向对象实现方法"><a href="#2-面向对象实现方法" class="headerlink" title="2. 面向对象实现方法"></a>2. 面向对象实现方法</h3><h4 id="2-1-定义类"><a href="#2-1-定义类" class="headerlink" title="2.1 定义类"></a>2.1 定义类</h4><p>Python2中类分为：经典类 和 新式类</p><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名():</span></span><br><span class="line">    代码</span><br><span class="line">    ......</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：类名要满足标识符命名规则，同时遵循大驼峰命名习惯。</p></blockquote><ul><li>体验</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Washer</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wash</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我会洗衣服&#x27;</span>)</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><ul><li>拓展：经典类</li></ul><p>不由任意内置类型派生出的类，称之为经典类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名:</span></span><br><span class="line">    代码</span><br><span class="line">    ......</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h4 id="2-2-定义类"><a href="#2-2-定义类" class="headerlink" title="2.2 定义类"></a>2.2 定义类</h4><p>对象又名实例。</p><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对象名 = 类名()</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>体验</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">haier1 = Washer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;__main__.Washer object at 0x0000018B7B224240&gt;</span></span><br><span class="line"><span class="built_in">print</span>(haier1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># haier对象调用实例方法</span></span><br><span class="line">haier1.wash()</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：创建对象的过程也叫实例化对象。</p></blockquote><h4 id="2-3-self"><a href="#2-3-self" class="headerlink" title="2.3 self"></a>2.3 self</h4><p>self指的是调用该函数的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Washer</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wash</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我会洗衣服&#x27;</span>)</span><br><span class="line">        <span class="comment"># &lt;__main__.Washer object at 0x0000024BA2B34240&gt;</span></span><br><span class="line">        <span class="built_in">print</span>(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 创建对象</span></span><br><span class="line">haier1 = Washer()</span><br><span class="line"><span class="comment"># &lt;__main__.Washer object at 0x0000018B7B224240&gt;</span></span><br><span class="line"><span class="built_in">print</span>(haier1)</span><br><span class="line"><span class="comment"># haier1对象调用实例方法</span></span><br><span class="line">haier1.wash()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">haier2 = Washer()</span><br><span class="line"><span class="comment"># &lt;__main__.Washer object at 0x0000022005857EF0&gt;</span></span><br><span class="line"><span class="built_in">print</span>(haier2)</span><br><span class="line"><span class="number">12345678910111213141516171819</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：打印对象和self得到的结果是一致的，都是当前对象的内存中存储地址。</p></blockquote><h2 id="三、添加和获取对象属性"><a href="#三、添加和获取对象属性" class="headerlink" title="三、添加和获取对象属性"></a>三、添加和获取对象属性</h2><p>属性即是特征，比如：洗衣机的宽度、高度、重量…</p><p>对象属性既可以在类外面添加和获取，也能在类里面添加和获取。</p><h3 id="1-类外面添加对象属性"><a href="#1-类外面添加对象属性" class="headerlink" title="1. 类外面添加对象属性"></a>1. 类外面添加对象属性</h3><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对象名.属性名 = 值</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>体验</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">haier1.width = <span class="number">500</span></span><br><span class="line">haier1.height = <span class="number">800</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h3 id="2-类外面获取对象属性"><a href="#2-类外面获取对象属性" class="headerlink" title="2. 类外面获取对象属性"></a>2. 类外面获取对象属性</h3><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对象名.属性名</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>体验</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;haier1洗衣机的宽度是<span class="subst">&#123;haier1.width&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;haier1洗衣机的高度是<span class="subst">&#123;haier1.height&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h3 id="3-类里面获取对象属性"><a href="#3-类里面获取对象属性" class="headerlink" title="3. 类里面获取对象属性"></a>3. 类里面获取对象属性</h3><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.属性名</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>体验</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Washer</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 类里面获取实例属性</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;haier1洗衣机的宽度是<span class="subst">&#123;self.width&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;haier1洗衣机的高度是<span class="subst">&#123;self.height&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">haier1 = Washer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加实例属性</span></span><br><span class="line">haier1.width = <span class="number">500</span></span><br><span class="line">haier1.height = <span class="number">800</span></span><br><span class="line"></span><br><span class="line">haier1.print_info()</span><br><span class="line"><span class="number">123456789101112131415</span></span><br></pre></td></tr></table></figure><h2 id="四、魔法方法"><a href="#四、魔法方法" class="headerlink" title="四、魔法方法"></a>四、魔法方法</h2><p>在Python中，<code>__xx__()</code>的函数叫做魔法方法，指的是具有特殊功能的函数。</p><h3 id="1-init"><a href="#1-init" class="headerlink" title="1. __init__()"></a>1. <code>__init__()</code></h3><h4 id="1-1-体验-init"><a href="#1-1-体验-init" class="headerlink" title="1.1 体验__init__()"></a>1.1 体验<code>__init__()</code></h4><p>思考：洗衣机的宽度高度是与生俱来的属性，可不可以在生产过程中就赋予这些属性呢？</p><p>答：理应如此。</p><p><code>__init__()</code>方法的作用：初始化对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Washer</span>():</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 定义初始化功能的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 添加实例属性</span></span><br><span class="line">        self.width = <span class="number">500</span></span><br><span class="line">        self.height = <span class="number">800</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 类里面调用实例属性</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;洗衣机的宽度是<span class="subst">&#123;self.width&#125;</span>, 高度是<span class="subst">&#123;self.height&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">haier1 = Washer()</span><br><span class="line">haier1.print_info()</span><br><span class="line"><span class="number">12345678910111213141516</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li><code>__init__()</code>方法，在创建一个对象时默认被调用，不需要手动调用</li><li><code>__init__(self)</code>中的self参数，不需要开发者传递，python解释器会自动把当前的对象引用传递过去。</li></ul></blockquote><h4 id="1-2-带参数的-init"><a href="#1-2-带参数的-init" class="headerlink" title="1.2 带参数的__init__()"></a>1.2 带参数的<code>__init__()</code></h4><p>思考：一个类可以创建多个对象，如何对不同的对象设置不同的初始化属性呢？</p><p>答：传参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Washer</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, width, height</span>):</span></span><br><span class="line">        self.width = width</span><br><span class="line">        self.height = height</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;洗衣机的宽度是<span class="subst">&#123;self.width&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;洗衣机的高度是<span class="subst">&#123;self.height&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">haier1 = Washer(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">haier1.print_info()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">haier2 = Washer(<span class="number">30</span>, <span class="number">40</span>)</span><br><span class="line">haier2.print_info()</span><br><span class="line"><span class="number">12345678910111213141516</span></span><br></pre></td></tr></table></figure><h3 id="2-str"><a href="#2-str" class="headerlink" title="2. __str__()"></a>2. <code>__str__()</code></h3><p>当使用print输出对象的时候，默认打印对象的内存地址。如果类定义了<code>__str__</code>方法，那么就会打印从在这个方法中 return 的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Washer</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, width, height</span>):</span></span><br><span class="line">        self.width = width</span><br><span class="line">        self.height = height</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;这是海尔洗衣机的说明书&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">haier1 = Washer(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="comment"># 这是海尔洗衣机的说明书</span></span><br><span class="line"><span class="built_in">print</span>(haier1)</span><br><span class="line"><span class="number">123456789101112</span></span><br></pre></td></tr></table></figure><h3 id="3-del"><a href="#3-del" class="headerlink" title="3. __del__()"></a>3. <code>__del__()</code></h3><p>当删除对象时，python解释器也会默认调用<code>__del__()</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Washer</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, width, height</span>):</span></span><br><span class="line">        self.width = width</span><br><span class="line">        self.height = height</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self&#125;</span>对象已经被删除&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">haier1 = Washer(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;__main__.Washer object at 0x0000026118223278&gt;对象已经被删除</span></span><br><span class="line"><span class="keyword">del</span> haier1</span><br><span class="line"><span class="number">12345678910111213</span></span><br></pre></td></tr></table></figure><h2 id="五、综合应用"><a href="#五、综合应用" class="headerlink" title="五、综合应用"></a>五、综合应用</h2><h3 id="1-烤地瓜"><a href="#1-烤地瓜" class="headerlink" title="1. 烤地瓜"></a>1. 烤地瓜</h3><h4 id="1-1-需求"><a href="#1-1-需求" class="headerlink" title="1.1 需求"></a>1.1 需求</h4><p>需求主线：</p><ol><li><p>被烤的时间和对应的地瓜状态：</p><p>0-3分钟：生的</p><p>3-5分钟：半生不熟</p><p>5-8分钟：熟的</p><p>超过8分钟：烤糊了</p></li><li><p>添加的调料：</p><p>用户可以按自己的意愿添加调料</p></li></ol><h4 id="1-2-步骤分析"><a href="#1-2-步骤分析" class="headerlink" title="1.2 步骤分析"></a>1.2 步骤分析</h4><p>需求涉及一个事物： 地瓜，故案例涉及一个类：地瓜类。</p><h5 id="1-2-1-定义类"><a href="#1-2-1-定义类" class="headerlink" title="1.2.1 定义类"></a>1.2.1 定义类</h5><ul><li>地瓜的属性<ul><li>被烤的时间</li><li>地瓜的状态</li><li>添加的调料</li></ul></li><li>地瓜的方法<ul><li>被烤<ul><li>用户根据意愿设定每次烤地瓜的时间</li><li>判断地瓜被烤的总时间是在哪个区间，修改地瓜状态</li></ul></li><li>添加调料<ul><li>用户根据意愿设定添加的调料</li><li>将用户添加的调料存储</li></ul></li></ul></li><li>显示对象信息</li></ul><h5 id="1-2-2-创建对象，调用相关实例方法"><a href="#1-2-2-创建对象，调用相关实例方法" class="headerlink" title="1.2.2 创建对象，调用相关实例方法"></a>1.2.2 创建对象，调用相关实例方法</h5><h4 id="1-3-代码实现"><a href="#1-3-代码实现" class="headerlink" title="1.3 代码实现"></a>1.3 代码实现</h4><h5 id="1-3-1-定义类"><a href="#1-3-1-定义类" class="headerlink" title="1.3.1 定义类"></a>1.3.1 定义类</h5><ul><li>地瓜属性<ul><li>定义地瓜初始化属性，后期根据程序推进更新实例属性</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SweetPotato</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 被烤的时间</span></span><br><span class="line">        self.cook_time = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 地瓜的状态</span></span><br><span class="line">        self.cook_static = <span class="string">&#x27;生的&#x27;</span></span><br><span class="line">        <span class="comment"># 调料列表</span></span><br><span class="line">        self.condiments = []</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><h5 id="1-3-2-定义烤地瓜方法"><a href="#1-3-2-定义烤地瓜方法" class="headerlink" title="1.3.2 定义烤地瓜方法"></a>1.3.2 定义烤地瓜方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SweetPotato</span>():</span></span><br><span class="line">    ......</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cook</span>(<span class="params">self, time</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;烤地瓜的方法&quot;&quot;&quot;</span></span><br><span class="line">        self.cook_time += time</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= self.cook_time &lt; <span class="number">3</span>:</span><br><span class="line">            self.cook_static = <span class="string">&#x27;生的&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="number">3</span> &lt;= self.cook_time &lt; <span class="number">5</span>:</span><br><span class="line">            self.cook_static = <span class="string">&#x27;半生不熟&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="number">5</span> &lt;= self.cook_time &lt; <span class="number">8</span>:</span><br><span class="line">            self.cook_static = <span class="string">&#x27;熟了&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self.cook_time &gt;= <span class="number">8</span>:</span><br><span class="line">            self.cook_static = <span class="string">&#x27;烤糊了&#x27;</span></span><br><span class="line"><span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure><h5 id="1-3-3-书写str魔法方法，用于输出对象状态"><a href="#1-3-3-书写str魔法方法，用于输出对象状态" class="headerlink" title="1.3.3 书写str魔法方法，用于输出对象状态"></a>1.3.3 书写str魔法方法，用于输出对象状态</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SweetPotato</span>():</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;这个地瓜烤了<span class="subst">&#123;self.cook_time&#125;</span>分钟, 状态是<span class="subst">&#123;self.cook_static&#125;</span>&#x27;</span></span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><h5 id="1-3-4-创建对象，测试实例属性和实例方法"><a href="#1-3-4-创建对象，测试实例属性和实例方法" class="headerlink" title="1.3.4 创建对象，测试实例属性和实例方法"></a>1.3.4 创建对象，测试实例属性和实例方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">digua1 = SweetPotato()</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h5 id="1-3-5-定义添加调料方法，并调用该实例方法"><a href="#1-3-5-定义添加调料方法，并调用该实例方法" class="headerlink" title="1.3.5 定义添加调料方法，并调用该实例方法"></a>1.3.5 定义添加调料方法，并调用该实例方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SweetPotato</span>():</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_condiments</span>(<span class="params">self, condiment</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;添加调料&quot;&quot;&quot;</span></span><br><span class="line">        self.condiments.append(condiment)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;这个地瓜烤了<span class="subst">&#123;self.cook_time&#125;</span>分钟, 状态是<span class="subst">&#123;self.cook_static&#125;</span>, 添加的调料有<span class="subst">&#123;self.condiments&#125;</span>&#x27;</span></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">digua1 = SweetPotato()</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"></span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line">digua1.add_condiments(<span class="string">&#x27;酱油&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"></span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line">digua1.add_condiments(<span class="string">&#x27;辣椒面&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"></span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"></span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526</span></span><br></pre></td></tr></table></figure><h4 id="1-4-代码总览"><a href="#1-4-代码总览" class="headerlink" title="1.4 代码总览"></a>1.4 代码总览</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SweetPotato</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 被烤的时间</span></span><br><span class="line">        self.cook_time = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 地瓜的状态</span></span><br><span class="line">        self.cook_static = <span class="string">&#x27;生的&#x27;</span></span><br><span class="line">        <span class="comment"># 调料列表</span></span><br><span class="line">        self.condiments = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cook</span>(<span class="params">self, time</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;烤地瓜的方法&quot;&quot;&quot;</span></span><br><span class="line">        self.cook_time += time</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= self.cook_time &lt; <span class="number">3</span>:</span><br><span class="line">            self.cook_static = <span class="string">&#x27;生的&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="number">3</span> &lt;= self.cook_time &lt; <span class="number">5</span>:</span><br><span class="line">            self.cook_static = <span class="string">&#x27;半生不熟&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="number">5</span> &lt;= self.cook_time &lt; <span class="number">8</span>:</span><br><span class="line">            self.cook_static = <span class="string">&#x27;熟了&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self.cook_time &gt;= <span class="number">8</span>:</span><br><span class="line">            self.cook_static = <span class="string">&#x27;烤糊了&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_condiments</span>(<span class="params">self, condiment</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;添加调料&quot;&quot;&quot;</span></span><br><span class="line">        self.condiments.append(condiment)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;这个地瓜烤了<span class="subst">&#123;self.cook_time&#125;</span>分钟, 状态是<span class="subst">&#123;self.cook_static&#125;</span>, 添加的调料有<span class="subst">&#123;self.condiments&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">digua1 = SweetPotato()</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"></span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line">digua1.add_condiments(<span class="string">&#x27;酱油&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"></span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line">digua1.add_condiments(<span class="string">&#x27;辣椒面&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"></span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"></span><br><span class="line">digua1.cook(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(digua1)</span><br><span class="line"><span class="number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546</span></span><br></pre></td></tr></table></figure><h3 id="2-搬家具"><a href="#2-搬家具" class="headerlink" title="2. 搬家具"></a>2. 搬家具</h3><h4 id="2-1-需求"><a href="#2-1-需求" class="headerlink" title="2.1 需求"></a>2.1 需求</h4><p>将小于房子剩余面积的家具摆放到房子中。</p><h4 id="2-2-步骤分析"><a href="#2-2-步骤分析" class="headerlink" title="2.2 步骤分析"></a>2.2 步骤分析</h4><p>需求涉及两个事物：房子 和 家具，故被案例涉及两个类：房子类 和 家具类。</p><h5 id="2-2-1-定义类"><a href="#2-2-1-定义类" class="headerlink" title="2.2.1 定义类"></a>2.2.1 定义类</h5><ul><li>房子类<ul><li>实例属性<ul><li>房子地理位置</li><li>房子占地面积</li><li>房子剩余面积</li><li>房子内家具列表</li></ul></li><li>实例方法<ul><li>容纳家具</li></ul></li><li>显示房屋信息</li></ul></li><li>家具类<ul><li>家具名称</li><li>家具占地面积</li></ul></li></ul><h5 id="2-2-2-创建对象并调用相关方法"><a href="#2-2-2-创建对象并调用相关方法" class="headerlink" title="2.2.2 创建对象并调用相关方法"></a>2.2.2 创建对象并调用相关方法</h5><h4 id="2-3-代码实现"><a href="#2-3-代码实现" class="headerlink" title="2.3 代码实现"></a>2.3 代码实现</h4><h5 id="2-3-1-定义类"><a href="#2-3-1-定义类" class="headerlink" title="2.3.1 定义类"></a>2.3.1 定义类</h5><ul><li>家具类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Furniture</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, area</span>):</span></span><br><span class="line">        <span class="comment"># 家具名字</span></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="comment"># 家具占地面积</span></span><br><span class="line">        self.area = area</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><ul><li>房子类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, address, area</span>):</span></span><br><span class="line">        <span class="comment"># 地理位置</span></span><br><span class="line">        self.address = address</span><br><span class="line">        <span class="comment"># 房屋面积</span></span><br><span class="line">        self.area = area</span><br><span class="line">        <span class="comment"># 剩余面积</span></span><br><span class="line">        self.free_area = area</span><br><span class="line">        <span class="comment"># 家具列表</span></span><br><span class="line">        self.furniture = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;房子坐落于<span class="subst">&#123;self.address&#125;</span>, 占地面积<span class="subst">&#123;self.area&#125;</span>, 剩余面积<span class="subst">&#123;self.free_area&#125;</span>, 家具有<span class="subst">&#123;self.furniture&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_furniture</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;容纳家具&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.free_area &gt;= item.area:</span><br><span class="line">            self.furniture.append(item.name)</span><br><span class="line">            <span class="comment"># 家具搬入后，房屋剩余面积 = 之前剩余面积 - 该家具面积</span></span><br><span class="line">            self.free_area -= item.area</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;家具太大，剩余面积不足，无法容纳&#x27;</span>)</span><br><span class="line"><span class="number">12345678910111213141516171819202122</span></span><br></pre></td></tr></table></figure><h5 id="2-3-2-创建对象并调用实例属性和方法"><a href="#2-3-2-创建对象并调用实例属性和方法" class="headerlink" title="2.3.2 创建对象并调用实例属性和方法"></a>2.3.2 创建对象并调用实例属性和方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">bed = Furniture(<span class="string">&#x27;双人床&#x27;</span>, <span class="number">6</span>)</span><br><span class="line">jia1 = Home(<span class="string">&#x27;北京&#x27;</span>, <span class="number">1200</span>)</span><br><span class="line"><span class="built_in">print</span>(jia1)</span><br><span class="line"></span><br><span class="line">jia1.add_furniture(bed)</span><br><span class="line"><span class="built_in">print</span>(jia1)</span><br><span class="line"></span><br><span class="line">sofa = Furniture(<span class="string">&#x27;沙发&#x27;</span>, <span class="number">10</span>)</span><br><span class="line">jia1.add_furniture(sofa)</span><br><span class="line"><span class="built_in">print</span>(jia1)</span><br><span class="line"></span><br><span class="line">ball = Furniture(<span class="string">&#x27;篮球场&#x27;</span>, <span class="number">1500</span>)</span><br><span class="line">jia1.add_furniture(ball)</span><br><span class="line"><span class="built_in">print</span>(jia1)</span><br><span class="line"><span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure><h2 id="六、三大特征"><a href="#六、三大特征" class="headerlink" title="六、三大特征"></a>六、三大特征</h2><ul><li>封装<ul><li>将属性和方法书写到类的里面的操作即为封装</li><li>封装可以为属性和方法添加私有权限</li></ul></li><li>继承<ul><li>子类默认继承父类的所有属性和方法</li><li>子类可以重写父类属性和方法</li></ul></li><li>多态<ul><li>传入不同的对象，产生不同的结果</li></ul></li></ul><h2 id="七、封装"><a href="#七、封装" class="headerlink" title="七、封装"></a>七、封装</h2><p><strong>什么是封装：</strong></p><ol><li>封装是面向对象编程的一大特点</li><li>面向对象编程的第一步，将属性和方法封装到一个抽象的类中(为什么说是抽象的，因为类不能直接使用)</li><li>外界使用类创建对象，然后让对象调用方法</li><li>对象方法的细节都被封装在类的内部</li></ol><blockquote><p>总结：类里面不光有属性还有方法。这种将属性通过方法直接在类内部操作的形式叫做封装。这里的封装是把属性封装在类内部。这样对类形成了一种“黑盒”状态，我们不需要知道类内部是什么样的，只要对对象进行操作就可以。在封装时，我们也可以根据自身的需求，设置一定的访问/设置条件（权限），对数据和代码起到一定的保护作用。</p></blockquote><h2 id="八、继承"><a href="#八、继承" class="headerlink" title="八、继承"></a>八、继承</h2><h3 id="1-继承的概念"><a href="#1-继承的概念" class="headerlink" title="1. 继承的概念"></a>1. 继承的概念</h3><p>生活中的继承，一般指的是子女继承父辈的财产。</p><ul><li>拓展1：经典类或旧式类</li></ul><p>不由任意内置类型派生出的类，称之为经典类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名:</span></span><br><span class="line">    代码</span><br><span class="line">    ......</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><ul><li>拓展2：新式类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">  代码</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p>Python面向对象的继承指的是多个类之间的所属关系，即子类默认继承父类的所有属性和方法，具体如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 父类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.num = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info_print</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子类B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = B()</span><br><span class="line">result.info_print()  <span class="comment"># 1</span></span><br><span class="line"><span class="number">123456789101112131415</span></span><br></pre></td></tr></table></figure><blockquote><p>在Python中，所有类默认继承object类，object类是顶级类或基类；其他子类叫做派生类。</p></blockquote><h3 id="2-单继承"><a href="#2-单继承" class="headerlink" title="2. 单继承"></a>2. 单继承</h3><p>所谓单继承意思就是一个子类只能继承一个父类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 师父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Master</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[古法煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 2. 徒弟类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prentice</span>(<span class="params">Master</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 创建对象daqiu</span></span><br><span class="line">daqiu = Prentice()</span><br><span class="line"><span class="comment"># 4. 对象访问实例属性</span></span><br><span class="line"><span class="built_in">print</span>(daqiu.kongfu)</span><br><span class="line"><span class="comment"># 5. 对象调用实例方法</span></span><br><span class="line">daqiu.make_cake()</span><br><span class="line"><span class="number">1234567891011121314151617181920</span></span><br></pre></td></tr></table></figure><h3 id="3-多继承"><a href="#3-多继承" class="headerlink" title="3. 多继承"></a>3. 多继承</h3><p>所谓多继承意思就是一个类同时继承了多个父类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Master</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[古法煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建学校类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[现代煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prentice</span>(<span class="params">School, Master</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">daqiu = Prentice()</span><br><span class="line"><span class="built_in">print</span>(daqiu.kongfu)</span><br><span class="line">daqiu.make_cake()</span><br><span class="line"><span class="number">123456789101112131415161718192021222324</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：当一个类有多个父类的时候，默认使用第一个父类的同名属性和方法。</p></blockquote><h3 id="4-子类重写父类同名方法和属性"><a href="#4-子类重写父类同名方法和属性" class="headerlink" title="4. 子类重写父类同名方法和属性"></a>4. 子类重写父类同名方法和属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Master</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[古法煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[现代煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 独创配方</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prentice</span>(<span class="params">School, Master</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[独创煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">daqiu = Prentice()</span><br><span class="line"><span class="built_in">print</span>(daqiu.kongfu)</span><br><span class="line">daqiu.make_cake()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印继承链</span></span><br><span class="line"><span class="built_in">print</span>(Prentice.__mro__)</span><br><span class="line"><span class="number">12345678910111213141516171819202122232425262728293031</span></span><br></pre></td></tr></table></figure><blockquote><p>子类和父类具有同名属性和方法，默认使用子类的同名属性和方法。</p></blockquote><h3 id="5-子类调用父类的同名方法和属性"><a href="#5-子类调用父类的同名方法和属性" class="headerlink" title="5. 子类调用父类的同名方法和属性"></a>5. 子类调用父类的同名方法和属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Master</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[古法煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[现代煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prentice</span>(<span class="params">School, Master</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[独创煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 如果是先调用了父类的属性和方法，父类属性会覆盖子类属性，故在调用属性前，先调用自己子类的初始化</span></span><br><span class="line">        self.__init__()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用父类方法，但是为保证调用到的也是父类的属性，必须在调用方法前调用父类的初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_master_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        Master.__init__(self)</span><br><span class="line">        Master.make_cake(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_school_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        School.__init__(self)</span><br><span class="line">        School.make_cake(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">daqiu = Prentice()</span><br><span class="line"></span><br><span class="line">daqiu.make_cake()</span><br><span class="line"></span><br><span class="line">daqiu.make_master_cake()</span><br><span class="line"></span><br><span class="line">daqiu.make_school_cake()</span><br><span class="line"></span><br><span class="line">daqiu.make_cake()</span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526272829303132333435363738394041424344</span></span><br></pre></td></tr></table></figure><h3 id="6-多层继承"><a href="#6-多层继承" class="headerlink" title="6. 多层继承"></a>6. 多层继承</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Master</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[古法煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[现代煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prentice</span>(<span class="params">School, Master</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[独创煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__init__()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_master_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        Master.__init__(self)</span><br><span class="line">        Master.make_cake(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_school_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        School.__init__(self)</span><br><span class="line">        School.make_cake(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 徒孙类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tusun</span>(<span class="params">Prentice</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xiaoqiu = Tusun()</span><br><span class="line"></span><br><span class="line">xiaoqiu.make_cake()</span><br><span class="line"></span><br><span class="line">xiaoqiu.make_school_cake()</span><br><span class="line"></span><br><span class="line">xiaoqiu.make_master_cake()</span><br><span class="line"></span><br><span class="line"><span class="number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546</span></span><br></pre></td></tr></table></figure><h3 id="7-super-调用父类方法"><a href="#7-super-调用父类方法" class="headerlink" title="7. super()调用父类方法"></a>7. super()调用父类方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Master</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[古法煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span>(<span class="params">Master</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[现代煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 方法2.1</span></span><br><span class="line">        <span class="comment"># super(School, self).__init__()</span></span><br><span class="line">        <span class="comment"># super(School, self).make_cake()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 方法2.2</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="built_in">super</span>().make_cake()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prentice</span>(<span class="params">School</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[独创煎饼果子技术]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__init__()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 子类调用父类的同名方法和属性：把父类的同名属性和方法再次封装</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_master_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        Master.__init__(self)</span><br><span class="line">        Master.make_cake(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_school_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        School.__init__(self)</span><br><span class="line">        School.make_cake(self)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 一次性调用父类的同名属性和方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_old_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 方法一：代码冗余；父类类名如果变化，这里代码需要频繁修改</span></span><br><span class="line">        <span class="comment"># Master.__init__(self)</span></span><br><span class="line">        <span class="comment"># Master.make_cake(self)</span></span><br><span class="line">        <span class="comment"># School.__init__(self)</span></span><br><span class="line">        <span class="comment"># School.make_cake(self)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 方法二: super()</span></span><br><span class="line">        <span class="comment"># 方法2.1 super(当前类名, self).函数()</span></span><br><span class="line">        <span class="comment"># super(Prentice, self).__init__()</span></span><br><span class="line">        <span class="comment"># super(Prentice, self).make_cake()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 方法2.2 super().函数()</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="built_in">super</span>().make_cake()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">daqiu = Prentice()</span><br><span class="line"></span><br><span class="line">daqiu.make_old_cake()</span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：使用super() 可以自动查找父类。调用顺序遵循 <code>__mro__</code> 类属性的顺序。比较适合单继承使用。</p></blockquote><h3 id="8-私有权限"><a href="#8-私有权限" class="headerlink" title="8. 私有权限"></a>8. 私有权限</h3><h4 id="8-1-定义私有属性和方法"><a href="#8-1-定义私有属性和方法" class="headerlink" title="8.1 定义私有属性和方法"></a>8.1 定义私有属性和方法</h4><p>在Python中，可以为实例属性和方法设置私有权限，即设置某个实例属性或实例方法不继承给子类。</p><p>设置私有权限的方法：在属性名和方法名 前面 加上两个下划线 <code>__</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Master</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[古法煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[现代煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prentice</span>(<span class="params">School, Master</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[独创煎饼果子配方]&#x27;</span></span><br><span class="line">        <span class="comment"># 定义私有属性</span></span><br><span class="line">        self.__money = <span class="number">2000000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义私有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__info_print</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.kongfu)</span><br><span class="line">        <span class="built_in">print</span>(self.__money)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__init__()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_master_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        Master.__init__(self)</span><br><span class="line">        Master.make_cake(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_school_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        School.__init__(self)</span><br><span class="line">        School.make_cake(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 徒孙类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tusun</span>(<span class="params">Prentice</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">daqiu = Prentice()</span><br><span class="line"><span class="comment"># 对象不能访问私有属性和私有方法</span></span><br><span class="line"><span class="comment"># print(daqiu.__money)</span></span><br><span class="line"><span class="comment"># daqiu.__info_print()</span></span><br><span class="line"></span><br><span class="line">xiaoqiu = Tusun()</span><br><span class="line"><span class="comment"># 子类无法继承父类的私有属性和私有方法</span></span><br><span class="line"><span class="comment"># print(xiaoqiu.__money)  # 无法访问实例属性__money</span></span><br><span class="line"><span class="comment"># xiaoqiu.__info_print()</span></span><br><span class="line"><span class="number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：私有属性和私有方法只能在类里面访问和修改。</p></blockquote><h4 id="8-2-获取和修改私有属性值"><a href="#8-2-获取和修改私有属性值" class="headerlink" title="8.2 获取和修改私有属性值"></a>8.2 获取和修改私有属性值</h4><p>在Python中，一般定义函数名<code>get_xx</code>用来获取私有属性，定义<code>set_xx</code>用来修改私有属性值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Master</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[古法煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[现代煎饼果子配方]&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prentice</span>(<span class="params">School, Master</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.kongfu = <span class="string">&#x27;[独创煎饼果子配方]&#x27;</span></span><br><span class="line">        self.__money = <span class="number">2000000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取私有属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_money</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__money</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改私有属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_money</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__money = <span class="number">500</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__info_print</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.kongfu)</span><br><span class="line">        <span class="built_in">print</span>(self.__money)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__init__()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;运用<span class="subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_master_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        Master.__init__(self)</span><br><span class="line">        Master.make_cake(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_school_cake</span>(<span class="params">self</span>):</span></span><br><span class="line">        School.__init__(self)</span><br><span class="line">        School.make_cake(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 徒孙类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tusun</span>(<span class="params">Prentice</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">daqiu = Prentice()</span><br><span class="line"></span><br><span class="line">xiaoqiu = Tusun()</span><br><span class="line"><span class="comment"># 调用get_money函数获取私有属性money的值</span></span><br><span class="line"><span class="built_in">print</span>(xiaoqiu.get_money())</span><br><span class="line"><span class="comment"># 调用set_money函数修改私有属性money的值</span></span><br><span class="line">xiaoqiu.set_money()</span><br><span class="line"><span class="built_in">print</span>(xiaoqiu.get_money())</span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859</span></span><br></pre></td></tr></table></figure><h3 id="9-总结"><a href="#9-总结" class="headerlink" title="9. 总结"></a>9. 总结</h3><ul><li>继承的特点<ul><li>子类默认拥有父类的所有属性和方法</li><li>子类重写父类同名方法和属性</li><li>子类调用父类同名方法和属性</li></ul></li><li>super()方法快速调用父类方法</li><li>私有权限<ul><li>不能继承给子类的属性和方法需要添加私有权限</li><li>语法</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名():</span></span><br><span class="line">  <span class="comment"># 私有属性</span></span><br><span class="line">  __属性名 = 值</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 私有方法</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__</span>函数名(<span class="params">self</span>):</span></span><br><span class="line">    代码</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><h2 id="九、多态"><a href="#九、多态" class="headerlink" title="九、多态"></a>九、多态</h2><h3 id="1-了解多态"><a href="#1-了解多态" class="headerlink" title="1. 了解多态"></a>1. 了解多态</h3><p>多态指的是一类事物有多种形态，（一个抽象类有多个子类，因而多态的概念依赖于继承）。</p><ul><li>定义：多态是一种使用对象的方式，子类重写父类方法，调用不同子类对象的相同父类方法，可以产生不同的执行结果</li><li>好处：调用灵活，有了多态，更容易编写出通用的代码，做出通用的编程，以适应需求的不断变化！</li><li>实现步骤：<ul><li>定义父类，并提供公共方法</li><li>定义子类，并重写父类方法</li><li>传递子类对象给调用者，可以看到不同子类执行效果不同</li></ul></li></ul><h3 id="2-体验多态"><a href="#2-体验多态" class="headerlink" title="2. 体验多态"></a>2. 体验多态</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work</span>(<span class="params">self</span>):</span>  <span class="comment"># 父类提供统一的方法，哪怕是空方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;指哪打哪...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArmyDog</span>(<span class="params">Dog</span>):</span>  <span class="comment"># 继承Dog类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work</span>(<span class="params">self</span>):</span>  <span class="comment"># 子类重写父类同名方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;追击敌人...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrugDog</span>(<span class="params">Dog</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;追查毒品...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work_with_dog</span>(<span class="params">self, dog</span>):</span>  <span class="comment"># 传入不同的对象，执行不同的代码，即不同的work函数</span></span><br><span class="line">        dog.work()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ad = ArmyDog()</span><br><span class="line">dd = DrugDog()</span><br><span class="line"></span><br><span class="line">daqiu = Person()</span><br><span class="line">daqiu.work_with_dog(ad)</span><br><span class="line">daqiu.work_with_dog(dd)</span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526</span></span><br></pre></td></tr></table></figure><h2 id="十、类属性和实例属性"><a href="#十、类属性和实例属性" class="headerlink" title="十、类属性和实例属性"></a>十、类属性和实例属性</h2><h3 id="1-类属性"><a href="#1-类属性" class="headerlink" title="1. 类属性"></a>1. 类属性</h3><h4 id="1-1-设置和访问类属性"><a href="#1-1-设置和访问类属性" class="headerlink" title="1.1 设置和访问类属性"></a>1.1 设置和访问类属性</h4><ul><li>类属性就是 <strong>类对象</strong> 所拥有的属性，它被 <strong>该类的所有实例对象所共有</strong>。</li><li>类属性可以使用 <strong>类对象</strong> 或 <strong>实例对象</strong> 访问。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    tooth = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wangcai = Dog()</span><br><span class="line">xiaohei = Dog()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Dog.tooth)  <span class="comment"># 10</span></span><br><span class="line"><span class="built_in">print</span>(wangcai.tooth)  <span class="comment"># 10</span></span><br><span class="line"><span class="built_in">print</span>(xiaohei.tooth)  <span class="comment"># 10</span></span><br><span class="line"><span class="number">12345678910</span></span><br></pre></td></tr></table></figure><blockquote><p>类属性的优点</p><ul><li><strong>记录的某项数据 始终保持一致时</strong>，则定义类属性。</li><li><strong>实例属性</strong> 要求 <strong>每个对象</strong> 为其 <strong>单独开辟一份内存空间</strong> 来记录数据，而 <strong>类属性</strong> 为全类所共有 ，<strong>仅占用一份内存</strong>，<strong>更加节省内存空间</strong>。</li></ul></blockquote><h4 id="1-2-修改类属性"><a href="#1-2-修改类属性" class="headerlink" title="1.2 修改类属性"></a>1.2 修改类属性</h4><p>类属性只能通过类对象修改，不能通过实例对象修改，如果通过实例对象修改类属性，表示的是创建了一个实例属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    tooth = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wangcai = Dog()</span><br><span class="line">xiaohei = Dog()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改类属性</span></span><br><span class="line">Dog.tooth = <span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(Dog.tooth)  <span class="comment"># 12</span></span><br><span class="line"><span class="built_in">print</span>(wangcai.tooth)  <span class="comment"># 12</span></span><br><span class="line"><span class="built_in">print</span>(xiaohei.tooth)  <span class="comment"># 12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不能通过对象修改属性，如果这样操作，实则是创建了一个实例属性</span></span><br><span class="line">wangcai.tooth = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(Dog.tooth)  <span class="comment"># 12</span></span><br><span class="line"><span class="built_in">print</span>(wangcai.tooth)  <span class="comment"># 20</span></span><br><span class="line"><span class="built_in">print</span>(xiaohei.tooth)  <span class="comment"># 12</span></span><br><span class="line"><span class="number">123456789101112131415161718</span></span><br></pre></td></tr></table></figure><h3 id="2-实例属性"><a href="#2-实例属性" class="headerlink" title="2. 实例属性"></a>2. 实例属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.age = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info_print</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wangcai = Dog()</span><br><span class="line"><span class="built_in">print</span>(wangcai.age)  <span class="comment"># 5</span></span><br><span class="line"><span class="comment"># print(Dog.age)  # 报错：实例属性不能通过类访问</span></span><br><span class="line">wangcai.info_print()  <span class="comment"># 5</span></span><br><span class="line"><span class="number">123456789101112</span></span><br></pre></td></tr></table></figure><h2 id="十一、类方法和静态方法"><a href="#十一、类方法和静态方法" class="headerlink" title="十一、类方法和静态方法"></a>十一、类方法和静态方法</h2><h3 id="1-类方法"><a href="#1-类方法" class="headerlink" title="1. 类方法"></a>1. 类方法</h3><h4 id="1-1-类方法特点"><a href="#1-1-类方法特点" class="headerlink" title="1.1 类方法特点"></a>1.1 类方法特点</h4><p>需要用装饰器<code>@classmethod</code>来标识其为类方法，对于类方法，<strong>第一个参数必须是类对象</strong>，一般以<code>cls</code>作为第一个参数。</p><h4 id="1-2-类方法特点"><a href="#1-2-类方法特点" class="headerlink" title="1.2 类方法特点"></a>1.2 类方法特点</h4><ul><li>当方法中 <strong>需要使用类对象</strong> (如访问私有类属性等)时，定义类方法</li><li>类方法一般和类属性配合使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    __tooth = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_tooth</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="keyword">return</span> cls.__tooth</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wangcai = Dog()</span><br><span class="line">result = wangcai.get_tooth()</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 10</span></span><br><span class="line"><span class="number">1234567891011</span></span><br></pre></td></tr></table></figure><h3 id="2-静态方法"><a href="#2-静态方法" class="headerlink" title="2. 静态方法"></a>2. 静态方法</h3><h4 id="2-1-静态方法特点"><a href="#2-1-静态方法特点" class="headerlink" title="2.1 静态方法特点"></a>2.1 静态方法特点</h4><ul><li>需要通过装饰器<code>@staticmethod</code>来进行修饰，<strong>静态方法既不需要传递类对象也不需要传递实例对象（形参没有self/cls）</strong>。</li><li>静态方法 也能够通过 <strong>实例对象</strong> 和 <strong>类对象</strong> 去访问。</li></ul><h4 id="2-2-静态方法使用场景"><a href="#2-2-静态方法使用场景" class="headerlink" title="2.2 静态方法使用场景"></a>2.2 静态方法使用场景</h4><ul><li>当方法中 <strong>既不需要使用实例对象</strong>(如实例对象，实例属性)，<strong>也不需要使用类对象</strong> (如类属性、类方法、创建实例等)时，定义静态方法</li><li><strong>取消不需要的参数传递</strong>，有利于 <strong>减少不必要的内存占用和性能消耗</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info_print</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是一个狗类，用于创建狗实例....&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wangcai = Dog()</span><br><span class="line"><span class="comment"># 静态方法既可以使用对象访问又可以使用类访问</span></span><br><span class="line">wangcai.info_print()</span><br><span class="line">Dog.info_print()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> py基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-函数篇（2）</title>
      <link href="2020/06/16/Python-%E5%87%BD%E6%95%B0%E7%AF%87%EF%BC%882%EF%BC%89/"/>
      <url>2020/06/16/Python-%E5%87%BD%E6%95%B0%E7%AF%87%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="一、高阶函数"><a href="#一、高阶函数" class="headerlink" title="一、高阶函数"></a>一、高阶函数</h2><p>把函数作为参数传入，这样的函数称为高阶函数，高阶函数是函数式编程的体现。函数式编程就是指这种高度抽象的编程范式。</p><h2 id="二、体验高阶函数"><a href="#二、体验高阶函数" class="headerlink" title="二、体验高阶函数"></a>二、体验高阶函数</h2><p>在Python中，<code>abs()</code>函数可以完成对数字求绝对值计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">abs</span>(-<span class="number">10</span>)  <span class="comment"># 10</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><code>round()</code>函数可以完成对数字的四舍五入计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">round</span>(<span class="number">1.2</span>)  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">round</span>(<span class="number">1.9</span>)  <span class="comment"># 2</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p>需求：任意两个数字，按照指定要求整理数字后再进行求和计算。</p><ul><li>方法1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_num</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(a) + <span class="built_in">abs</span>(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = add_num(-<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 3</span></span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><ul><li>方法2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num</span>(<span class="params">a, b, f</span>):</span></span><br><span class="line">    <span class="keyword">return</span> f(a) + f(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = sum_num(-<span class="number">1</span>, <span class="number">2</span>, <span class="built_in">abs</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 3</span></span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：两种方法对比之后，发现，方法2的代码会更加简洁，函数灵活性更高。</p></blockquote><p><em>函数式编程大量使用函数，减少了代码的重复，因此程序比较短，开发速度较快。</em></p><h2 id="三、内置高阶函数"><a href="#三、内置高阶函数" class="headerlink" title="三、内置高阶函数"></a>三、内置高阶函数</h2><h3 id="1-map"><a href="#1-map" class="headerlink" title="1. map()"></a>1. map()</h3><p><code>map(func, lst)</code>，将传入的函数变量 func 作用到 lst 变量的每个元素中，并将结果组成新的列表(Python2)/迭代器(Python3)返回。</p><p>需求：计算 list1 序列中各个数字的2次方。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = <span class="built_in">map</span>(func, list1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># &lt;map object at 0x0000013769653198&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))  <span class="comment"># [1, 4, 9, 16, 25]</span></span><br><span class="line"><span class="number">1234567891011</span></span><br></pre></td></tr></table></figure><h3 id="2-reduce"><a href="#2-reduce" class="headerlink" title="2. reduce()"></a>2. reduce()</h3><p><code>reduce(func, lst)</code>，其中 func 必须有两个参数。每次 func 计算的结果继续和序列的下一个元素做累积计算。</p><blockquote><p>注意：<code>reduce()</code>传入的参数 func 必须接收2个参数。</p></blockquote><p>需求：计算 list1 序列中各个数字的累加和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = functools.reduce(func, list1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 15</span></span><br><span class="line"><span class="number">123456789101112</span></span><br></pre></td></tr></table></figure><h3 id="3-filter"><a href="#3-filter" class="headerlink" title="3. filter()"></a>3. filter()</h3><p><code>filter(func, lst)</code>函数用于过滤序列, 过滤掉不符合条件的元素, 返回一个 filter 对象。如果要转换为列表, 可以使用<code>list()</code>来转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = <span class="built_in">filter</span>(func, list1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># &lt;filter object at 0x0000017AF9DC3198&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))  <span class="comment"># [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> py基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-函数篇（1）</title>
      <link href="2020/06/14/Python-%E5%87%BD%E6%95%B0%E7%AF%87%EF%BC%881%EF%BC%89/"/>
      <url>2020/06/14/Python-%E5%87%BD%E6%95%B0%E7%AF%87%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="一-函数的作用"><a href="#一-函数的作用" class="headerlink" title="一. 函数的作用"></a>一. 函数的作用</h2><p>函数就是将一段具有独立功能的代码块 整合到一个整体并命名，在需要的位置调用这个名称即可完成对应的需求。</p><blockquote><p>函数在开发过程中，可以更高效的实现代码重用。</p></blockquote><h2 id="二-函数的使用步骤"><a href="#二-函数的使用步骤" class="headerlink" title="二. 函数的使用步骤"></a>二. 函数的使用步骤</h2><h3 id="1-定义函数"><a href="#1-定义函数" class="headerlink" title="1. 定义函数"></a>1. 定义函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名(<span class="params">参数</span>):</span></span><br><span class="line">    代码<span class="number">1</span></span><br><span class="line">    代码<span class="number">2</span></span><br><span class="line">    ......</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h3 id="2-调用函数"><a href="#2-调用函数" class="headerlink" title="2. 调用函数"></a>2. 调用函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数名(参数)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>不同的需求，参数可有可无。</li><li>在Python中，函数必须先定义后使用。</li></ol><p>一定是先定义函数，后调用函数。</p><h2 id="三-函数的参数作用"><a href="#三-函数的参数作用" class="headerlink" title="三. 函数的参数作用"></a>三. 函数的参数作用</h2><p>思考：完成需求如下：一个函数完成两个数1和2的加法运算，如何书写程序？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_num1</span>():</span></span><br><span class="line">    result = <span class="number">1</span> + <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">add_num1()</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><p>思考：上述add_num1函数只能完成数字1和2的加法运算，如果想要这个函数变得更灵活，可以计算任何用户指定的两个数字的和，如何书写程序？</p><p>分析：用户要在调用函数的时候指定具体数字，那么在定义函数的时候就需要接收用户指定的数字。函数调用时候指定的数字和定义函数时候接收的数字即是函数的参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义函数时同时定义了接收用户数据的参数a和b，a和b是形参</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_num2</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    result = a + b</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数时传入了真实的数据10 和 20，真实数据为实参</span></span><br><span class="line">add_num2(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><p><strong>函数的参数：函数调用的时候可以传入真实数据，增大函数的使用的灵活性。</strong></p><ul><li>形参：函数定义时书写的参数(非真实数据)</li><li>实参：函数调用时书写的参数(真实数据)</li></ul><h2 id="四-函数的返回值作用"><a href="#四-函数的返回值作用" class="headerlink" title="四. 函数的返回值作用"></a>四. 函数的返回值作用</h2><p>例如：我们去超市购物，比如买烟，给钱之后，是不是售货员会返回给我们烟这个商品，在函数中，如果需要返回结果给用户需要使用函数返回值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;烟&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用变量保存函数返回值</span></span><br><span class="line">goods = buy()</span><br><span class="line"><span class="built_in">print</span>(goods)</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><p>需求：制作一个计算器，计算任意两数字之和，并保存结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用result变量保存函数返回值</span></span><br><span class="line">result = sum_num(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><p><strong>函数的返回值</strong></p><ul><li>作用：函数调用后，返回需要的计算结果</li><li>写法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> 表达式</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="五-函数的说明文档"><a href="#五-函数的说明文档" class="headerlink" title="五. 函数的说明文档"></a>五. 函数的说明文档</h2><p>思考：定义一个函数后，程序员如何书写程序能够快速提示这个函数的作用？</p><p>答：注释</p><p>思考：如果代码多，我们是不是需要在很多代码中找到这个函数定义的位置才能看到注释？如果想更方便的查看函数的作用怎么办？</p><p>答：函数的说明文档</p><blockquote><p>函数的说明文档也叫函数的文档说明。</p></blockquote><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1. 语法"></a>1. 语法</h3><ul><li>定义函数的说明文档</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名(<span class="params">参数</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 说明文档的位置 &quot;&quot;&quot;</span></span><br><span class="line">    代码</span><br><span class="line">    ......</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><ul><li>查看函数的说明文档</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span>(函数名)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="2-快速体验"><a href="#2-快速体验" class="headerlink" title="2. 快速体验"></a>2. 快速体验</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 求和函数 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">help</span>(sum_num)</span><br></pre></td></tr></table></figure><p><strong>函数的说明文档</strong></p><ul><li>作用：保存函数解释说明的信息</li><li>写法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 函数说明文档 &quot;&quot;&quot;</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h2 id="六-函数嵌套调用"><a href="#六-函数嵌套调用" class="headerlink" title="六. 函数嵌套调用"></a>六. 函数嵌套调用</h2><p>所谓函数嵌套调用指的是一个函数里面又调用了另外一个函数。</p><ul><li>示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testB</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---- testB start----&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这里是testB函数执行的代码...(省略)...&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---- testB end----&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testA</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---- testA start----&#x27;</span>)</span><br><span class="line">    testB()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---- testA end----&#x27;</span>)</span><br><span class="line"></span><br><span class="line">testA()</span><br></pre></td></tr></table></figure><blockquote><p>如果函数A中，调用了另外一个函数B，那么先把函数B中的任务都执行完毕之后才会回到上次 函数A执行的位置。</p></blockquote><h2 id="七-函数应用"><a href="#七-函数应用" class="headerlink" title="七. 函数应用"></a>七. 函数应用</h2><h3 id="1-打印图形"><a href="#1-打印图形" class="headerlink" title="1. 打印图形"></a>1. 打印图形</h3><ol><li>打印一条横线</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_line</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print_line()</span><br></pre></td></tr></table></figure><ol><li>打印多条横线</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_line</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_lines</span>(<span class="params">num</span>):</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; num:</span><br><span class="line">        print_line()</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print_lines(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="2-函数计算"><a href="#2-函数计算" class="headerlink" title="2. 函数计算"></a>2. 函数计算</h3><ol><li>求三个数之和</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num</span>(<span class="params">a, b, c</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = sum_num(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 6</span></span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><ol><li>求三个数平均值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average_num</span>(<span class="params">a, b, c</span>):</span></span><br><span class="line">    sumResult = sum_num(a, b, c)</span><br><span class="line">    <span class="keyword">return</span> sumResult / <span class="number">3</span></span><br><span class="line"></span><br><span class="line">result = average_num(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 2.0</span></span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><h2 id="八-变量作用域"><a href="#八-变量作用域" class="headerlink" title="八. 变量作用域"></a>八. 变量作用域</h2><p>变量作用域指的是变量生效的范围，主要分为两类：局部变量和全局变量。</p><ul><li>局部变量</li></ul><p>所谓局部变量是定义在函数体内部的变量，即只在函数体内部生效。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testA</span>():</span></span><br><span class="line">    a = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">testA()  <span class="comment"># 100</span></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 报错：name &#x27;a&#x27; is not defined</span></span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><blockquote><p>变量a是定义在<code>testA</code>函数内部的变量，在函数外部访问则立即报错。</p></blockquote><p>局部变量的作用：在函数体内部，临时保存数据，即当函数调用完成后，则销毁局部变量。</p><p>全局变量：指的是在函数体内、外都能生效的变量。</p><blockquote><p>思考：如果有一个数据，在函数A和函数B中都要使用，该怎么办？</p><p>答：将这个数据存储在一个全局变量里面。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义全局变量a</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testA</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(a)  <span class="comment"># 访问全局变量a，并打印变量a存储的数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testB</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(a)  <span class="comment"># 访问全局变量a，并打印变量a存储的数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">testA()  <span class="comment"># 100</span></span><br><span class="line">testB()  <span class="comment"># 100</span></span><br><span class="line"><span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure><p>思考：<code>testB</code>函数需求修改变量a的值为200，如何修改程序？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testA</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testB</span>():</span></span><br><span class="line">    a = <span class="number">200</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">testA()  <span class="comment"># 100</span></span><br><span class="line">testB()  <span class="comment"># 200</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;全局变量a = <span class="subst">&#123;a&#125;</span>&#x27;</span>)  <span class="comment"># 全局变量a = 100</span></span><br><span class="line"><span class="number">123456789101112131415</span></span><br></pre></td></tr></table></figure><p>思考：在<code>testB</code>函数内部的<code>a = 200</code>中的变量a是在修改全局变量<code>a</code>吗？</p><p>答：不是。观察上述代码发现，15行得到a的数据是100，仍然是定义全局变量a时候的值，而没有返回</p><p><code>testB</code>函数内部的200。综上：<code>testB</code>函数内部的<code>a = 200</code>是定义了一个局部变量。</p><p>思考：如何在函数体内部修改全局变量？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testA</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testB</span>():</span></span><br><span class="line">    <span class="comment"># global 关键字声明a是全局变量</span></span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a = <span class="number">200</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">testA()  <span class="comment"># 100</span></span><br><span class="line">testB()  <span class="comment"># 200</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;全局变量a = <span class="subst">&#123;a&#125;</span>&#x27;</span>)  <span class="comment"># 全局变量a = 200</span></span><br><span class="line"><span class="number">1234567891011121314151617</span></span><br></pre></td></tr></table></figure><h2 id="九-多函数程序执行流程"><a href="#九-多函数程序执行流程" class="headerlink" title="九. 多函数程序执行流程"></a>九. 多函数程序执行流程</h2><p>一般在实际开发过程中，一个程序往往由多个函数（后面知识中会讲解类）组成，并且多个函数共享某些数据，如下所示：</p><ul><li>共用全局变量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 定义全局变量</span></span><br><span class="line">glo_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>():</span></span><br><span class="line">    <span class="keyword">global</span> glo_num</span><br><span class="line">    <span class="comment"># 修改全局变量</span></span><br><span class="line">    glo_num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span>():</span></span><br><span class="line">    <span class="comment"># 调用test1函数中修改后的全局变量</span></span><br><span class="line">    <span class="built_in">print</span>(glo_num)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 调用test1函数，执行函数内部代码：声明和修改全局变量</span></span><br><span class="line">test1()</span><br><span class="line"><span class="comment"># 3. 调用test2函数，执行函数内部代码：打印</span></span><br><span class="line">test2()  <span class="comment"># 100</span></span><br><span class="line"><span class="number">12345678910111213141516171819</span></span><br></pre></td></tr></table></figure><ul><li>返回值作为参数传递</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">50</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 保存函数test1的返回值</span></span><br><span class="line">result = test1()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.将函数返回值所在变量作为参数传递到test2函数</span></span><br><span class="line">test2(result)  <span class="comment"># 50</span></span><br><span class="line"><span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure><h2 id="十-函数的返回值"><a href="#十-函数的返回值" class="headerlink" title="十. 函数的返回值"></a>十. 函数的返回值</h2><p>思考：如果一个函数如些两个return (如下所示)，程序如何执行？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">return_num</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = return_num()</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 1</span></span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><p>答：只执行了第一个return，原因是因为return可以退出当前函数，导致return下方的代码不执行。</p><p>思考：如果一个函数要有多个返回值，该如何书写代码？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">return_num</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = return_num()</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># (1, 2)</span></span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li><code>return a, b</code>写法，返回多个数据的时候，默认是元组类型。</li><li>return后面可以连接列表、元组或字典，以返回多个值。</li></ol></blockquote><h2 id="十一-函数的参数"><a href="#十一-函数的参数" class="headerlink" title="十一. 函数的参数"></a>十一. 函数的参数</h2><h3 id="1-位置参数"><a href="#1-位置参数" class="headerlink" title="1. 位置参数"></a>1. 位置参数</h3><p>位置参数：调用函数时根据函数定义的参数位置来传递参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span>(<span class="params">name, age, gender</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的名字是<span class="subst">&#123;name&#125;</span>, 年龄是<span class="subst">&#123;age&#125;</span>, 性别是<span class="subst">&#123;gender&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_info(<span class="string">&#x27;TOM&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：传递和定义参数的顺序及个数必须一致。</p></blockquote><h3 id="2-关键字参数"><a href="#2-关键字参数" class="headerlink" title="2. 关键字参数"></a>2. 关键字参数</h3><p>函数调用，通过“键=值”形式加以指定。可以让函数更加清晰、容易使用，同时也清除了参数的顺序需求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span>(<span class="params">name, age, gender</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的名字是<span class="subst">&#123;name&#125;</span>, 年龄是<span class="subst">&#123;age&#125;</span>, 性别是<span class="subst">&#123;gender&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_info(<span class="string">&#x27;Rose&#x27;</span>, age=<span class="number">20</span>, gender=<span class="string">&#x27;女&#x27;</span>)</span><br><span class="line">user_info(<span class="string">&#x27;小明&#x27;</span>, gender=<span class="string">&#x27;男&#x27;</span>, age=<span class="number">16</span>)</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><p>注意：<strong>函数调用时，如果有位置参数时，位置参数必须在关键字参数的前面，但关键字参数之间不存在先后顺序。</strong></p><h3 id="3-缺省参数"><a href="#3-缺省参数" class="headerlink" title="3. 缺省参数"></a>3. 缺省参数</h3><p>缺省参数也叫默认参数，用于定义函数，为参数提供默认值，调用函数时可不传该默认参数的值（注意：所有位置参数必须出现在默认参数前，包括函数定义和调用）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span>(<span class="params">name, age, gender=<span class="string">&#x27;男&#x27;</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的名字是<span class="subst">&#123;name&#125;</span>, 年龄是<span class="subst">&#123;age&#125;</span>, 性别是<span class="subst">&#123;gender&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_info(<span class="string">&#x27;TOM&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">user_info(<span class="string">&#x27;Rose&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;女&#x27;</span>)</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：函数调用时，如果为缺省参数传值则修改默认参数值；否则使用这个默认值。</p></blockquote><h3 id="4-不定长参数"><a href="#4-不定长参数" class="headerlink" title="4. 不定长参数"></a>4. 不定长参数</h3><p>不定长参数也叫可变参数。用于不确定调用的时候会传递多少个参数(不传参也可以)的场景。此时，可用包裹(packing)位置参数，或者包裹关键字参数，来进行参数传递，会显得非常方便。</p><ul><li>包裹位置传递</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># (&#x27;TOM&#x27;,)</span></span><br><span class="line">user_info(<span class="string">&#x27;TOM&#x27;</span>)</span><br><span class="line"><span class="comment"># (&#x27;TOM&#x27;, 18)</span></span><br><span class="line">user_info(<span class="string">&#x27;TOM&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：传进的所有参数都会被args变量收集，它会根据传进参数的位置合并为一个元组(tuple)，args是元组类型，这就是包裹位置传递。</p></blockquote><ul><li>包裹关键字传递</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;TOM&#x27;, &#x27;age&#x27;: 18, &#x27;id&#x27;: 110&#125;</span></span><br><span class="line">user_info(name=<span class="string">&#x27;TOM&#x27;</span>, age=<span class="number">18</span>, <span class="built_in">id</span>=<span class="number">110</span>)</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><blockquote><p>综上：无论是包裹位置传递还是包裹关键字传递，都是一个组包的过程。</p></blockquote><h2 id="十二-拆包和交换变量值"><a href="#十二-拆包和交换变量值" class="headerlink" title="十二. 拆包和交换变量值"></a>十二. 拆包和交换变量值</h2><h3 id="1-拆包"><a href="#1-拆包" class="headerlink" title="1. 拆包"></a>1. 拆包</h3><ul><li>拆包：元组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">return_num</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>, <span class="number">200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num1, num2 = return_num()</span><br><span class="line"><span class="built_in">print</span>(num1)  <span class="comment"># 100</span></span><br><span class="line"><span class="built_in">print</span>(num2)  <span class="comment"># 200</span></span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><ul><li>拆包：字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;TOM&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line">a, b = dict1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对字典进行拆包，取出来的是字典的key</span></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># name</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># age</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dict1[a])  <span class="comment"># TOM</span></span><br><span class="line"><span class="built_in">print</span>(dict1[b])  <span class="comment"># 18</span></span><br><span class="line"><span class="number">123456789</span></span><br></pre></td></tr></table></figure><h3 id="2-交换变量值"><a href="#2-交换变量值" class="headerlink" title="2. 交换变量值"></a>2. 交换变量值</h3><p>需求：有变量<code>a = 10</code>和<code>b = 20</code>，交换两个变量的值。</p><ul><li>方法一</li></ul><p>借助第三变量存储数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 定义中间变量</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 将a的数据存储到c</span></span><br><span class="line">c = a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 将b的数据20赋值到a，此时a = 20</span></span><br><span class="line">a = b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 将之前c的数据10赋值到b，此时b = 10</span></span><br><span class="line">b = c</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 20</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 10</span></span><br><span class="line"><span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure><ul><li>方法二</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">a, b = b, a</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 1</span></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h2 id="十三-引用"><a href="#十三-引用" class="headerlink" title="十三. 引用"></a>十三. 引用</h2><h3 id="1-了解引用"><a href="#1-了解引用" class="headerlink" title="1. 了解引用"></a>1. 了解引用</h3><p>在python中，值是靠引用来传递来的。</p><p><strong>我们可以用<code>id()</code>来判断两个变量是否为同一个值的引用。</strong> 我们可以将id值理解为那块内存的地址标识。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. int类型</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = a</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))  <span class="comment"># 140708464157520</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(b))  <span class="comment"># 140708464157520</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 1,说明int类型为不可变类型 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))  <span class="comment"># 140708464157552，此时得到是的数据2的内存地址</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(b))  <span class="comment"># 140708464157520</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">aa = [<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">bb = aa</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(aa))  <span class="comment"># 2325297783432</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(bb))  <span class="comment"># 2325297783432</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">aa.append(<span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(bb)  <span class="comment"># [10, 20, 30], 列表为可变类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(aa))  <span class="comment"># 2325297783432</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(bb))  <span class="comment"># 2325297783432</span></span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526272829</span></span><br></pre></td></tr></table></figure><h3 id="2-引用当做实参"><a href="#2-引用当做实参" class="headerlink" title="2. 引用当做实参"></a>2. 引用当做实参</h3><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"></span><br><span class="line">    a += a</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># int：计算前后id值不同</span></span><br><span class="line">b = <span class="number">100</span></span><br><span class="line">test1(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表：计算前后id值相同</span></span><br><span class="line">c = [<span class="number">11</span>, <span class="number">22</span>]</span><br><span class="line">test1(c)</span><br></pre></td></tr></table></figure><h2 id="十四-可变和不可变类型"><a href="#十四-可变和不可变类型" class="headerlink" title="十四. 可变和不可变类型"></a>十四. 可变和不可变类型</h2><p>所谓可变类型与不可变类型是指：数据能够直接进行修改，如果能直接修改那么就是可变，否则是不可变。</p><ul><li>可变类型<ul><li>列表</li><li>字典</li><li>集合</li></ul></li><li>不可变类型<ul><li>整型</li><li>浮点型</li><li>布尔</li><li>字符串</li><li>元组</li></ul></li></ul><h2 id="十五-总结"><a href="#十五-总结" class="headerlink" title="十五. 总结"></a>十五. 总结</h2><ul><li>变量作用域<ul><li>全局：函数体内外都能生效</li><li>局部：当前函数体内部生效</li></ul></li><li>函数多返回值写法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> 表达式<span class="number">1</span>, 表达式<span class="number">2.</span>..</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>函数的参数<ul><li>位置参数<ul><li>形参和实参的个数和书写顺序必须一致</li></ul></li><li>关键字参数<ul><li>写法： <code>key=value</code></li><li>特点：形参和实参的书写顺序可以不一致；关键字参数必须书写在位置参数的后面</li></ul></li><li>缺省参数<ul><li>缺省参数就是默认参数</li><li>写法：<code>key=vlaue</code></li></ul></li><li>不定长位置参数<ul><li>收集所有位置参数，返回一个元组</li></ul></li><li>不定长关键字参数<ul><li>收集所有关键字参数，返回一个字典</li></ul></li></ul></li></ul><blockquote><p>引用：Python中，数据的传递都是通过引用。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> py基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-异常</title>
      <link href="2020/06/14/Python%E5%BC%82%E5%B8%B8-%E6%A8%A1%E5%9D%97-%E5%8C%85/"/>
      <url>2020/06/14/Python%E5%BC%82%E5%B8%B8-%E6%A8%A1%E5%9D%97-%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="一、了解异常"><a href="#一、了解异常" class="headerlink" title="一、了解异常"></a>一、了解异常</h2><p>当检测到一个错误时，解释器就无法继续执行了，反而出现了一些错误的提示，这就是所谓的”异常”。</p><p>例如：以<code>r</code>方式打开一个不存在的文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileNotFoundError: [Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory: <span class="string">&#x27;test.txt&#x27;</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="二、异常的写法"><a href="#二、异常的写法" class="headerlink" title="二、异常的写法"></a>二、异常的写法</h2><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1. 语法"></a>1. 语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    可能发生错误的代码</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    如果出现异常执行的代码</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h3 id="2-快速体验"><a href="#2-快速体验" class="headerlink" title="2. 快速体验"></a>2. 快速体验</h3><p>需求：尝试以<code>r</code>模式打开文件，如果文件不存在，则以<code>w</code>方式打开。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h3 id="3-捕获指定异常"><a href="#3-捕获指定异常" class="headerlink" title="3. 捕获指定异常"></a>3. 捕获指定异常</h3><h4 id="3-1-语法"><a href="#3-1-语法" class="headerlink" title="3.1 语法"></a>3.1 语法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    可能发生错误的代码</span><br><span class="line"><span class="keyword">except</span> 异常类型:</span><br><span class="line">    如果捕获到该异常类型执行的代码</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h4 id="3-2-体验"><a href="#3-2-体验" class="headerlink" title="3.2 体验"></a>3.2 体验</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;有错误&#x27;</span>)</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li>如果尝试执行的代码的异常类型和要捕获的异常类型不一致，则无法捕获异常。</li><li>一般try下方只放一行尝试执行的代码。</li></ol></blockquote><h4 id="3-3-捕获多个指定异常"><a href="#3-3-捕获多个指定异常" class="headerlink" title="3.3 捕获多个指定异常"></a>3.3 捕获多个指定异常</h4><p>当捕获多个异常时，可以把要捕获的异常类型的名字，放到<code>except</code>后，并使用元组的方式进行书写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> (NameError, ZeroDivisionError):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;有错误&#x27;</span>)</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><h4 id="3-4-捕获异常描述信息"><a href="#3-4-捕获异常描述信息" class="headerlink" title="3.4 捕获异常描述信息"></a>3.4 捕获异常描述信息</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"><span class="keyword">except</span> (NameError, ZeroDivisionError) <span class="keyword">as</span> result:</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h4 id="3-5-捕获所有异常"><a href="#3-5-捕获所有异常" class="headerlink" title="3.5 捕获所有异常"></a>3.5 捕获所有异常</h4><p><code>Exception</code>是所有程序异常类的父类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h3 id="4-异常的else"><a href="#4-异常的else" class="headerlink" title="4. 异常的else"></a>4. 异常的else</h3><p><code>else</code>表示的是如果没有异常要执行的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是else，是没有异常的时候执行的代码&#x27;</span>)</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><h3 id="5-异常的finally"><a href="#5-异常的finally" class="headerlink" title="5. 异常的finally"></a>5. 异常的finally</h3><p><code>finally</code>表示的是无论是否异常都要执行的代码，例如关闭文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;没有异常，真开心&#x27;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><h2 id="三、异常的传递"><a href="#三、异常的传递" class="headerlink" title="三、异常的传递"></a>三、异常的传递</h2><p>需求：</p><ol><li><p>尝试只读方式打开test.txt文件，如果文件存在则读取文件内容，文件不存在则提示用户即可。</p></li><li><p>读取内容要求：尝试循环读取内容，读取过程中如果检测到用户意外终止程序，则<code>except</code>捕获异常并提示用户。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            content = f.readline()</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(content) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">print</span>(content)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="comment"># 如果在读取文件的过程中，产生了异常，那么就会捕获到</span></span><br><span class="line">        <span class="comment"># 比如 按下了 ctrl+c</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;意外终止了读取数据&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;关闭文件&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;没有这个文件&quot;</span>)</span><br><span class="line"><span class="number">12345678910111213141516171819</span></span><br></pre></td></tr></table></figure><h2 id="四、自定义异常"><a href="#四、自定义异常" class="headerlink" title="四、自定义异常"></a>四、自定义异常</h2><p>在Python中，抛出自定义异常的语法为<code>raise 异常类对象</code>。</p><p>需求：密码长度不足，则报异常（用户输入密码，如果输入的长度不足3位，则报错，即抛出自定义异常，并捕获该异常）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义异常类，继承Exception</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShortInputError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, length, min_len</span>):</span></span><br><span class="line">        self.length = length</span><br><span class="line">        self.min_len = min_len</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置抛出异常的描述信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;你输入的长度是<span class="subst">&#123;self.length&#125;</span>, 不能少于<span class="subst">&#123;self.min_len&#125;</span>个字符&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        con = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码：&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(con) &lt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">raise</span> ShortInputError(<span class="built_in">len</span>(con), <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;密码已经输入完成&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"><span class="number">1234567891011121314151617181920212223</span></span><br></pre></td></tr></table></figure><h2 id="五、模块"><a href="#五、模块" class="headerlink" title="五、模块"></a>五、模块</h2><p>Python 模块(Module)，是一个 Python 文件，以 .py 结尾，包含了 Python 对象定义和Python语句。</p><p>模块能定义函数，类和变量，模块里也能包含可执行的代码。</p><h3 id="1-导入模块"><a href="#1-导入模块" class="headerlink" title="1. 导入模块"></a>1. 导入模块</h3><h4 id="1-1-导入模块的方式"><a href="#1-1-导入模块的方式" class="headerlink" title="1.1 导入模块的方式"></a>1.1 导入模块的方式</h4><ul><li>import 模块名</li><li>import 模块名1, 模块名2（不建议使用，非PEP8规范）</li><li>from 模块名 import 功能名</li><li>from 模块名 import *</li><li>import 模块名 as 别名</li><li>from 模块名 import 功能名 as 别名</li></ul><h4 id="1-2-导入方式详解"><a href="#1-2-导入方式详解" class="headerlink" title="1.2 导入方式详解"></a>1.2 导入方式详解</h4><h5 id="1-2-1-import"><a href="#1-2-1-import" class="headerlink" title="1.2.1 import"></a>1.2.1 import</h5><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 导入模块</span></span><br><span class="line"><span class="keyword">import</span> 模块名</span><br><span class="line"><span class="keyword">import</span> 模块名<span class="number">1</span>, 模块名<span class="number">2.</span>..</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 调用功能</span></span><br><span class="line">模块名.功能名()</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><ul><li>体验</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(math.sqrt(<span class="number">9</span>))  <span class="comment"># 3.0</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h5 id="1-2-2-from…import…"><a href="#1-2-2-from…import…" class="headerlink" title="1.2.2 from…import…"></a>1.2.2 from…import…</h5><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 功能<span class="number">1</span>, 功能<span class="number">2</span>, 功能<span class="number">3.</span>..</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>体验</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="built_in">print</span>(sqrt(<span class="number">9</span>))</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h5 id="1-2-3-from…import"><a href="#1-2-3-from…import" class="headerlink" title="1.2.3 from…import *"></a>1.2.3 from…import *</h5><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> *</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>体验</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(sqrt(<span class="number">9</span>))</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h5 id="1-2-4-from…import"><a href="#1-2-4-from…import" class="headerlink" title="1.2.4 from…import *"></a>1.2.4 from…import *</h5><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块定义别名</span></span><br><span class="line"><span class="keyword">import</span> 模块名 <span class="keyword">as</span> 别名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 功能定义别名</span></span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 功能 <span class="keyword">as</span> 别名</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><ul><li>体验</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块别名</span></span><br><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> tt</span><br><span class="line"></span><br><span class="line">tt.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 功能别名</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep <span class="keyword">as</span> sl</span><br><span class="line">sl(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="number">12345678910</span></span><br></pre></td></tr></table></figure><h3 id="2-制作模块"><a href="#2-制作模块" class="headerlink" title="2. 制作模块"></a>2. 制作模块</h3><p>在Python中，每个Python文件都可以作为一个模块，模块的名字就是文件的名字。<strong>也就是说自定义模块名必须要符合标识符命名规则。</strong></p><h4 id="2-1-定义模块"><a href="#2-1-定义模块" class="headerlink" title="2.1 定义模块"></a>2.1 定义模块</h4><p>新建一个Python文件，命名为<code>my_module1.py</code>，并定义<code>testA</code>函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testA</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h4 id="2-2-测试模块"><a href="#2-2-测试模块" class="headerlink" title="2.2 测试模块"></a>2.2 测试模块</h4><p>在实际开中，当一个开发人员编写完一个模块后，为了让模块能够在项目中达到想要的效果，这个开发人员会自行在py文件中添加一些测试信息.，例如，在<code>my_module1.py</code>文件中添加测试代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testA</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">testA(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><p>此时，无论是当前文件，还是其他已经导入了该模块的文件，在运行的时候都会自动执行<code>testA</code>函数的调用。</p><p>解决办法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testA</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只在当前文件中调用该函数，其他导入的文件内不符合该条件，则不执行testA函数调用</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    testA(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><h4 id="2-3-调用模块"><a href="#2-3-调用模块" class="headerlink" title="2.3 调用模块"></a>2.3 调用模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> my_module1</span><br><span class="line">my_module1.testA(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h4 id="2-4-调用模块"><a href="#2-4-调用模块" class="headerlink" title="2.4 调用模块"></a>2.4 调用模块</h4><p>如果使用<code>from .. import ..</code>或<code>from .. import *</code>导入多个模块的时候，且模块内有同名功能。当调用这个同名功能的时候，调用到的是后面导入的模块的功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块1代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_test</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模块2代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_test</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a - b)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 导入模块和调用功能代码</span></span><br><span class="line"><span class="keyword">from</span> my_module1 <span class="keyword">import</span> my_test</span><br><span class="line"><span class="keyword">from</span> my_module2 <span class="keyword">import</span> my_test</span><br><span class="line"></span><br><span class="line"><span class="comment"># my_test函数是模块2中的函数</span></span><br><span class="line">my_test(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure><h3 id="3-模块定位顺序"><a href="#3-模块定位顺序" class="headerlink" title="3. 模块定位顺序"></a>3. 模块定位顺序</h3><p>当导入一个模块，Python解析器对模块位置的搜索顺序是：</p><ol><li>当前目录</li><li>如果不在当前目录，Python则搜索在shell变量PYTHONPATH下的每个目录。</li><li>如果都找不到，Python会察看默认路径。UNIX下，默认路径一般为/usr/local/lib/python/</li></ol><p>模块搜索路径存储在system模块的sys.path变量中。变量里包含当前目录，PYTHONPATH和由安装过程决定的默认目录。</p><ul><li>注意<ul><li>自己的文件名不要和已有模块名重复，否则导致模块功能无法使用</li><li><code>使用from 模块名 import 功能</code>的时候，如果功能名字重复，调用到的是最后定义或导入的功能。</li></ul></li></ul><h3 id="4-all"><a href="#4-all" class="headerlink" title="4. __all__"></a>4. <code>__all__</code></h3><p>如果一个模块文件中有<code>__all__</code>变量，当使用<code>from xxx import *</code>导入时，只能导入这个列表中的元素。</p><ul><li>my_module1模块代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">__all__ = [<span class="string">&#x27;testA&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testA</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;testA&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testB</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;testB&#x27;</span>)</span><br><span class="line"><span class="number">123456789</span></span><br></pre></td></tr></table></figure><ul><li>导入模块的文件代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> my_module1 <span class="keyword">import</span> *</span><br><span class="line">testA()</span><br><span class="line">testB()</span><br><span class="line"><span class="comment"># NameError: name &#x27;testB&#x27; is not defined</span></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h2 id="六、包"><a href="#六、包" class="headerlink" title="六、包"></a>六、包</h2><p>包将有联系的模块组织在一起，即放到同一个文件夹下，并且在这个文件夹创建一个名字为<code>__init__.py</code> 文件，那么这个文件夹就称之为包。</p><h3 id="1-制作包"><a href="#1-制作包" class="headerlink" title="1. 制作包"></a>1. 制作包</h3><p>[New] — [Python Package] — 输入包名 — [OK] — 新建功能模块(有联系的模块)。</p><p>注意：新建包后，包内部会自动创建<code>__init__.py</code>文件，这个文件控制着包的导入行为。</p><h4 id="1-1-快速体验"><a href="#1-1-快速体验" class="headerlink" title="1.1 快速体验"></a>1.1 快速体验</h4><ol><li>新建包<code>mypackage</code></li><li>新建包内模块：<code>my_module1</code> 和 <code>my_module2</code></li><li>模块内代码如下</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my_module1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info_print1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;my_module1&#x27;</span>)</span><br><span class="line"><span class="number">123456</span></span><br><span class="line"><span class="comment"># my_module2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info_print2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;my_module2&#x27;</span>)</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><h4 id="1-2-导入包"><a href="#1-2-导入包" class="headerlink" title="1.2 导入包"></a>1.2 导入包</h4><h5 id="1-2-1-方法一"><a href="#1-2-1-方法一" class="headerlink" title="1.2.1 方法一"></a>1.2.1 方法一</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 包名.模块名</span><br><span class="line"></span><br><span class="line">包名.模块名.目标</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="keyword">import</span> my_package.my_module1</span><br><span class="line"></span><br><span class="line">my_package.my_module1.info_print1()</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h5 id="1-2-2-方法二"><a href="#1-2-2-方法二" class="headerlink" title="1.2.2 方法二"></a>1.2.2 方法二</h5><p>注意：必须在<code>__init__.py</code>文件中添加<code>__all__ = []</code>，控制允许导入的模块列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> 包名 <span class="keyword">import</span> *</span><br><span class="line">模块名.目标</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="keyword">from</span> my_package <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">my_module1.info_print1()</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><h3 id="1-异常"><a href="#1-异常" class="headerlink" title="1. 异常"></a>1. 异常</h3><ul><li>异常语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  可能发生异常的代码</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">  如果出现异常执行的代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  没有异常执行的代码</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">  无论是否异常都要执行的代码</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><ul><li>捕获异常</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">except</span> 异常类型:</span><br><span class="line">  代码</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> 异常类型 <span class="keyword">as</span> xx:</span><br><span class="line">代码</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><ul><li>自定义异常</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 自定义异常类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 异常类类名(<span class="params">Exception</span>):</span></span><br><span class="line">  代码</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置抛出异常的描述信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="keyword">return</span> ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 抛出异常</span></span><br><span class="line"><span class="keyword">raise</span> 异常类名()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 捕获异常</span></span><br><span class="line"><span class="keyword">except</span> Exception...</span><br><span class="line"><span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure><h3 id="2-模块、包"><a href="#2-模块、包" class="headerlink" title="2. 模块、包"></a>2. 模块、包</h3><ul><li>导入模块方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 目标</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> *</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><ul><li>导入包</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 包名.模块名</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> 包名 <span class="keyword">import</span> *</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><ul><li><code>__all__ = []</code> ：允许导入的模块或功能列表</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> py基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初遇Python</title>
      <link href="2020/06/09/python%E5%9F%BA%E7%A1%80/"/>
      <url>2020/06/09/python%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Python基础语法介绍"><a href="#Python基础语法介绍" class="headerlink" title="Python基础语法介绍"></a>Python基础语法介绍</h1><h2 id="一、Python简介"><a href="#一、Python简介" class="headerlink" title="一、Python简介"></a>一、Python简介</h2><h3 id="1-了解Python"><a href="#1-了解Python" class="headerlink" title="1. 了解Python"></a>1. 了解Python</h3><p>Python是一种解释型（这意味着开发过程中没有了编译这个环节）、面向对象（支持面向对象的风格或代码封装在对象的编程技术）、动态数据类型的交互式（可在命令行中通过Python提示符及直接代码执行程序）高级程序设计语言。</p><h3 id="2-Python介绍"><a href="#2-Python介绍" class="headerlink" title="2. Python介绍"></a>2. Python介绍</h3><p>Python是时下最流行、最火爆的编程语言</p><ul><li>免费、开源</li><li>应用领域广泛</li></ul><p>以下知名框架均是Python语言开发:</p><ol><li>Google开源机器学习框架：TensorFlow</li><li>开源社区主推学习框架：Scikit-learn</li><li>百度开源深度学习框架：Paddle</li></ol><h3 id="3-Python特点"><a href="#3-Python特点" class="headerlink" title="3. Python特点"></a>3. Python特点</h3><ol><li>易于学习：Python有相对较少的关键字，结构简单，和一个明确定义的语法，学习起来更加简单。</li><li>易于阅读：Python代码定义的更清晰。</li><li>易于维护：Python的成功在于它的源代码是相当容易维护的。</li><li>一个广泛的标准库：Python的最大的优势之一是丰富的库，跨平台的，在UNIX，Windows和Macintosh兼容很好。</li><li>互动模式：互动模式的支持，您可以从终端输入执行代码并获得结果的语言，互动的测试和调试代码片断。</li><li>可移植：基于其开放源代码的特性，Python已经被移植（也就是使其工作）到许多平台。</li><li>可扩展：如果你需要一段运行很快的关键代码，或者是想要编写一些不愿开放的算法，你可以使用C或C++完成那部分程序，然后从你的Python程序中调用。</li><li>数据库：Python提供所有主要的商业数据库的接口。</li><li>GUI编程：Python支持GUI可以创建和移植到许多系统调用。</li><li>可嵌入: 你可以将Python嵌入到C/C++程序，让你的程序的用户获得”脚本化”的能力。</li></ol><h3 id="4-Python发展历史"><a href="#4-Python发展历史" class="headerlink" title="4. Python发展历史"></a>4. Python发展历史</h3><p>Python发展历史：<a href="https://baike.baidu.com/item/Python/407313?fr=aladdin">https://baike.baidu.com/item/Python/407313?fr=aladdin</a></p><h3 id="5-Python版本"><a href="#5-Python版本" class="headerlink" title="5. Python版本"></a>5. Python版本</h3><ul><li>Python 2.X</li><li>Python 3.X</li></ul><h2 id="二、Python解释器"><a href="#二、Python解释器" class="headerlink" title="二、Python解释器"></a>二、Python解释器</h2><h3 id="1-python解释器是什么"><a href="#1-python解释器是什么" class="headerlink" title="1. python解释器是什么"></a>1. python解释器是什么</h3><p>我们怎么让计算机去读取并执行Python代码文件呢？python解释器是什么？</p><p>Python语言是编程语言，是计算机能听懂的语言。</p><p>计算机的大脑是CPU， 中文名叫中央处理器，它仍然不能直接处理 Python 语言。</p><p>CPU 只能直接处理机器指令语言，那是一种由0和1 数字组成的语言。</p><p>这是一种我们人很难直接写出来的语言。</p><p>所以，我们需要一个翻译， 把Python语言翻译成 计算机CPU 能听懂的 机器指令语言，这样计算机才能按照我们的Python程序的要求去做事。</p><p>就像如果你要让一个美国人干一件事，你又只会说中国话，那么你就需要一名会说英语的中国翻译， 你和翻译说中国话，翻译听了，再对美国人说英语，告诉他怎么做。</p><p>让计算机执行Python程序时，这个翻译就是 Python解释器。</p><p>Python解释器本身也是个程序， 它是解释执行 Python代码的，所以叫解释器。</p><p>没有它，我们的Python代码是没有办法运行的。</p><p>我们运行Python程序时，先运行Python解释器，通过这个解释器，去读取我们的Python程序文件，这个解释器再以机器指令语言告诉CPU如何去做。</p><h3 id="2-解释器的作用"><a href="#2-解释器的作用" class="headerlink" title="2. 解释器的作用"></a>2. 解释器的作用</h3><ul><li>Python解释器作用：运行文件</li><li>Python解释器种类<ol><li>CPython，C语言开发的解释器[官方]，应用广泛的解释器。</li><li>IPython，基于CPython的一种交互式解释器。</li><li>其他解释器<ul><li>PyPy，基于Python语言开发的解释器。</li><li>Jython，运行在Java平台的解释器，直接把Python代码编译成Java字节码执行。</li><li>IronPython，运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。</li></ul></li></ol></li></ul><h2 id="三、PyCharm安装与使用"><a href="#三、PyCharm安装与使用" class="headerlink" title="三、PyCharm安装与使用"></a>三、PyCharm安装与使用</h2><h3 id="1-PyCharm的作用"><a href="#1-PyCharm的作用" class="headerlink" title="1. PyCharm的作用"></a>1. PyCharm的作用</h3><p>PyCharm是一种Python IDE（集成开发环境），带有一整套可以帮助用户在使用Python语言开发时提高其效率的工具，内部集成的功能如下：</p><ul><li>Project管理</li><li>智能提示</li><li>语法高亮</li><li>代码跳转</li><li>调试代码</li><li>解释代码(解释器)</li><li>框架和库</li><li>…</li></ul><h2 id="四、注释"><a href="#四、注释" class="headerlink" title="四、注释"></a>四、注释</h2><h3 id="1-注释的作用"><a href="#1-注释的作用" class="headerlink" title="1. 注释的作用"></a>1. 注释的作用</h3><p>通过用自己熟悉的语言，在程序中对某些代码进行标注说明，这就是注释的作用，能够大大增强程序的可读性。</p><h3 id="2-注释的分类及语法"><a href="#2-注释的分类及语法" class="headerlink" title="2. 注释的分类及语法"></a>2. 注释的分类及语法</h3><p>注释分为两类：单行注释 和 多行注释。</p><ul><li>单行注释</li></ul><p>只能注释一行内容，语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注释内容</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>多行注释</li></ul><p>可以注释多行内容，一般用在注释一段代码的情况， 语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">第一行注释</span></span><br><span class="line"><span class="string">第二行注释</span></span><br><span class="line"><span class="string">第三行注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">注释1</span></span><br><span class="line"><span class="string">注释2</span></span><br><span class="line"><span class="string">注释3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="number">1234567891011</span></span><br></pre></td></tr></table></figure><blockquote><p>快捷键： ctrl + /</p></blockquote><p><strong>注意：解释器不执行任何的注释内容。</strong></p><h2 id="五、变量"><a href="#五、变量" class="headerlink" title="五、变量"></a>五、变量</h2><h3 id="1-变量的作用"><a href="#1-变量的作用" class="headerlink" title="1. 变量的作用"></a>1. 变量的作用</h3><p>​    变量，简单来说，其实就是计算机内存中的一块储存空间，用来存储CPU需要使用的数据。 而这个储存空间需要一个名字，这个名字的统称就叫变量。</p><p>作用：</p><ol><li>用来临时保存数据</li><li>便于项目的后期升级维护</li><li>节约内存</li></ol><h3 id="2-定义变量"><a href="#2-定义变量" class="headerlink" title="2. 定义变量"></a>2. 定义变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量名 = 值</span><br></pre></td></tr></table></figure><p><strong>变量名自定义，要满足标识符命名规则。</strong></p><h4 id="2-1-标识符"><a href="#2-1-标识符" class="headerlink" title="2.1 标识符"></a>2.1 标识符</h4><p>标识符命名规则是Python中定义各种名字的时候的统一规范，具体如下：</p><ul><li>由数字、字母、下划线组成</li><li>不能数字开头</li><li>不能使用内置关键字</li><li>严格区分大小写</li></ul><h4 id="2-2-命名习惯"><a href="#2-2-命名习惯" class="headerlink" title="2.2 命名习惯"></a>2.2 命名习惯</h4><ul><li>见名知义。</li><li>大驼峰：即每个单词首字母都大写，例如：<code>MyName</code>。</li><li>小驼峰：第二个（含）以后的单词首字母大写，例如：<code>myName</code>。</li><li>下划线：例如：<code>my_name</code>。</li></ul><h4 id="2-3-使用变量"><a href="#2-3-使用变量" class="headerlink" title="2.3 使用变量"></a>2.3 使用变量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_name = <span class="string">&quot;张三&quot;</span></span><br><span class="line"><span class="built_in">print</span>(my_name)</span><br><span class="line"></span><br><span class="line">myAge = <span class="number">23</span></span><br><span class="line"><span class="built_in">print</span>(myAge)</span><br></pre></td></tr></table></figure><h4 id="2-4-认识bug"><a href="#2-4-认识bug" class="headerlink" title="2.4 认识bug"></a>2.4 认识bug</h4><p>所谓bug，就是程序中的错误。如果程序有错误，需要程序员排查问题，纠正错误。</p><h4 id="2-5-Debug工具"><a href="#2-5-Debug工具" class="headerlink" title="2.5 Debug工具"></a>2.5 Debug工具</h4><p>Debug工具是PyCharm IDE中集成的用来调试程序的工具，在这里程序员可以查看程序的执行细节和流程或者调解bug。</p><p>Debug工具使用步骤：</p><ol><li>打断点</li><li>Debug调试</li></ol><h2 id="六、数据类型"><a href="#六、数据类型" class="headerlink" title="六、数据类型"></a>六、数据类型</h2><p><strong>在 Python 里为了应对不同的业务需求，也把数据分为不同的类型。</strong></p><blockquote><p>检测数据类型的方法：<code>type(变量名或者数值)</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))  <span class="comment"># &lt;class &#x27;int&#x27;&gt; -- 整型</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">1.1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))  <span class="comment"># &lt;class &#x27;float&#x27;&gt; -- 浮点型</span></span><br><span class="line"></span><br><span class="line">c = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(c))  <span class="comment"># &lt;class &#x27;bool&#x27;&gt; -- 布尔型</span></span><br><span class="line"></span><br><span class="line">d = <span class="string">&quot;12345&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(d))  <span class="comment"># &lt;class &#x27;str&#x27;&gt; -- 字符串</span></span><br><span class="line"></span><br><span class="line">e = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(e))  <span class="comment"># &lt;class &#x27;list&#x27;&gt; -- 列表</span></span><br><span class="line"></span><br><span class="line">f = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f))  <span class="comment"># &lt;class &#x27;tuple&#x27;&gt; -- 元组</span></span><br><span class="line"></span><br><span class="line">h = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(h))  <span class="comment"># &lt;class &#x27;set&#x27;&gt; -- 集合</span></span><br><span class="line"></span><br><span class="line">g = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(g))  <span class="comment"># &lt;class &#x27;dict&#x27;&gt; -- 字典</span></span><br><span class="line"><span class="number">1234567891011121314151617181920212223</span></span><br></pre></td></tr></table></figure><p>思考：</p><ol><li>为什么Python会提出这么多种的数据类型?</li></ol><blockquote><p>有限的内存, 无限的变量, 合理的使用内存</p></blockquote><ol><li>Python中，程序员定义变量需要关心变量的类型吗?</li></ol><blockquote><ul><li>Python弱类型语言</li><li>程序员不需要关心变量的类型, 只需要把数据书写正确即可，python会通过自动推到出您变量的类型。</li></ul></blockquote><h2 id="七、输出"><a href="#七、输出" class="headerlink" title="七、输出"></a>七、输出</h2><p><strong>作用：程序输出内容给用户。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello Python&#x27;</span>)</span><br><span class="line"></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(age)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需求：输出“今年我的年龄是18岁”</span></span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><h3 id="1-格式化输出"><a href="#1-格式化输出" class="headerlink" title="1. 格式化输出"></a>1. 格式化输出</h3><table><thead><tr><th>格式符号</th><th>转换</th></tr></thead><tbody><tr><td>%s</td><td>字符串</td></tr><tr><td>%d</td><td>有符号的十进制整数</td></tr><tr><td>%f</td><td>浮点数</td></tr><tr><td>%c</td><td>字符</td></tr><tr><td>%u</td><td>无符号十进制整数</td></tr><tr><td>%o</td><td>八进制整数</td></tr><tr><td>%x</td><td>十六进制整数（小写ox）</td></tr><tr><td>%X</td><td>十六进制整数（大写OX）</td></tr><tr><td>%e</td><td>科学计数法（小写’e’）</td></tr><tr><td>%E</td><td>科学计数法（大写’E’）</td></tr><tr><td>%g</td><td>%f和%e的简写</td></tr><tr><td>%G</td><td>%f和%E的简写</td></tr></tbody></table><blockquote><ul><li>%06d，表示输出的整数显示位数，不足以0补全，超出当前位数则原样输出。</li><li>%.2f，表示小数点后显示的小数位数。</li></ul></blockquote><h3 id="2-内置函数format"><a href="#2-内置函数format" class="headerlink" title="2. 内置函数format"></a>2. 内置函数format</h3><p>format()用于字符串格式化，功能非常强大，格式是str.format()，format函数可以接受不限个参数，位置可以不按顺序。</p><h3 id="3-f-格式化字符串"><a href="#3-f-格式化字符串" class="headerlink" title="3. f-格式化字符串"></a>3. f-格式化字符串</h3><p>f-string是格式化字符串的一种很好的新方法。与其他格式化方式相比，它不仅更易读，更简洁，不易出错，而且速度更快！格式为：<code>f&#39;&#123;表达式&#125;&#39;</code>。</p><h3 id="4-体验格式化字符串"><a href="#4-体验格式化字符串" class="headerlink" title="4. 体验格式化字符串"></a>4. 体验格式化字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">age = <span class="number">23</span></span><br><span class="line">weight = <span class="number">75.5</span></span><br><span class="line">student_id = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的名字是张三</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我的名字是%s&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的学号是0001</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我的学号是%04d&#x27;</span> % student_id)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的体重是75.50公斤</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我的体重是%.2f公斤&#x27;</span> % weight)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的名字是张三，今年23岁了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我的名字是%s，今年%d岁了&#x27;</span> % (name, age))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的名字是张三，明年24岁了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我的名字是%s，明年%d岁了&#x27;</span> % (name, age + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的名字是张三，明年24岁了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我的名字是&#123;0&#125;, 明年&#123;1&#125;岁了&#x27;</span>.<span class="built_in">format</span>(name, age+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的名字是李思，今年18岁了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我的名字是&#123;0&#125;, 今年&#123;1&#125;岁了&#x27;</span>.<span class="built_in">format</span>(<span class="string">&quot;李思&quot;</span>, <span class="number">18</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的名字是张三，明年24岁了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;我的名字是<span class="subst">&#123;name&#125;</span>, 明年<span class="subst">&#123;age + <span class="number">1</span>&#125;</span>岁了&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="5-补充知识"><a href="#5-补充知识" class="headerlink" title="5. 补充知识"></a>5. 补充知识</h3><p>字符串输出的本质其实就是拼接字符串，那么我们都用<code>%s</code>完全也是可以的。很多时候，我们不用区分整型、浮点型等，直接用<code>%s</code>输出就可以了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我的名字是%s，今年%s岁了，我的体重是%s公斤&#x27;</span> % (name, age ,weight))</span><br></pre></td></tr></table></figure><h3 id="6-转义字符"><a href="#6-转义字符" class="headerlink" title="6. 转义字符"></a>6. 转义字符</h3><ul><li><code>\n</code>：换行。</li><li><code>\t</code>：制表符，一个tab键（4个空格）的距离。</li></ul><h3 id="7-结束符"><a href="#7-结束符" class="headerlink" title="7. 结束符"></a>7. 结束符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print会默认换行输出</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;输出的内容&#x27;</span>, end=<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><blockquote><p>在Python中，print()， 默认自带<code>end=&quot;\n&quot;</code>这个换行结束符，所以导致每两个<code>print</code>直接会换行展示，用户可以按需求更改结束符。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 改变Python换行输出</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;内容&#x27;</span>, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;内容&#x27;</span>, end=<span class="string">&quot;···&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="八、输入"><a href="#八、输入" class="headerlink" title="八、输入"></a>八、输入</h2><p><strong>在Python中，程序接收用户输入的数据的功能即是输入。</strong></p><h3 id="1-输入的语法"><a href="#1-输入的语法" class="headerlink" title="1. 输入的语法"></a>1. 输入的语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span>(<span class="string">&quot;提示信息&quot;</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="2-输入的特点"><a href="#2-输入的特点" class="headerlink" title="2. 输入的特点"></a>2. 输入的特点</h3><ul><li>当程序执行到<code>input</code>，等待用户输入，输入完成之后才继续向下执行。</li><li>在Python中，<code>input</code>接收用户输入后，一般存储到变量，方便使用。</li><li>在Python中，<code>input</code>会把接收到的任意用户输入的数据都当做字符串处理。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">password = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的密码：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;您输入的密码是<span class="subst">&#123;password&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(password))</span><br></pre></td></tr></table></figure><h2 id="九、转换数据类型"><a href="#九、转换数据类型" class="headerlink" title="九、转换数据类型"></a>九、转换数据类型</h2><h3 id="1-转换数据类型的作用"><a href="#1-转换数据类型的作用" class="headerlink" title="1. 转换数据类型的作用"></a>1. 转换数据类型的作用</h3><p>问：input()接收用户输入的数据都是字符串类型，如果用户输入1，想得到整型该如何操作？</p><p>答：转换数据类型即可，即将字符串类型转换成整型。</p><h3 id="2-转换数据类型的函数"><a href="#2-转换数据类型的函数" class="headerlink" title="2. 转换数据类型的函数"></a>2. 转换数据类型的函数</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>int(x [,base ])</td><td>将x转换为一个整数</td></tr><tr><td>float(x )</td><td>将x转换为一个浮点数</td></tr><tr><td>complex(real [,imag ])</td><td>创建一个复数，real为实部，imag为虚部</td></tr><tr><td>str(x )</td><td>将对象 x 转换为字符串</td></tr><tr><td>repr(x )</td><td>将对象 x 转换为表达式字符串</td></tr><tr><td>eval(str )</td><td>用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td>tuple(s )</td><td>将序列 s 转换为一个元组</td></tr><tr><td>list(s )</td><td>将序列 s 转换为一个列表</td></tr><tr><td>chr(x )</td><td>将一个整数转换为一个Unicode字符</td></tr><tr><td>ord(x )</td><td>将一个字符转换为它的ASCII整数值</td></tr><tr><td>hex(x )</td><td>将一个整数转换为一个十六进制字符串</td></tr><tr><td>oct(x )</td><td>将一个整数转换为一个八进制字符串</td></tr><tr><td>bin(x )</td><td>将一个整数转换为一个二进制字符串</td></tr></tbody></table><h3 id="3-体验转换数据类型"><a href="#3-体验转换数据类型" class="headerlink" title="3. 体验转换数据类型"></a>3. 体验转换数据类型</h3><p>需求：input接收用户输入，用户输入“1”，将这个数据1转换成整型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 接收用户输入</span></span><br><span class="line">num = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的幸运数字：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;您的幸运数字是<span class="subst">&#123;num&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 检测接收到的用户输入的数据类型 -- str类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 转换数据类型为整型 -- int类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">int</span>(num)))</span><br><span class="line"><span class="number">123456789101112</span></span><br><span class="line"><span class="comment"># 1. float() -- 转换成浮点型</span></span><br><span class="line">num1 = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(num1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">float</span>(num1)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. str() -- 转换成字符串类型</span></span><br><span class="line">num2 = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">str</span>(num2)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. tuple() -- 将一个序列转换成元组</span></span><br><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(list1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">tuple</span>(list1)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. list() -- 将一个序列转换成列表</span></span><br><span class="line">t1 = (<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(t1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">list</span>(t1)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. eval() -- 将字符串中的数据转换成Python表达式原本类型</span></span><br><span class="line">str1 = <span class="string">&#x27;10&#x27;</span></span><br><span class="line">str2 = <span class="string">&#x27;[1, 2, 3]&#x27;</span></span><br><span class="line">str3 = <span class="string">&#x27;(1000, 2000, 3000)&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">eval</span>(str1)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">eval</span>(str2)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">eval</span>(str3)))</span><br><span class="line"><span class="number">123456789101112131415161718192021222324252627</span></span><br></pre></td></tr></table></figure><h2 id="十、运算符"><a href="#十、运算符" class="headerlink" title="十、运算符"></a>十、运算符</h2><h3 id="1-运算符的分类"><a href="#1-运算符的分类" class="headerlink" title="1. 运算符的分类"></a>1. 运算符的分类</h3><ul><li>算数运算符</li><li>赋值运算符</li><li>复合赋值运算符</li><li>比较运算符</li><li>逻辑运算符</li></ul><h3 id="2-算数运算符"><a href="#2-算数运算符" class="headerlink" title="2. 算数运算符"></a>2. 算数运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>1 + 1 输出结果为 2</td></tr><tr><td>-</td><td>减</td><td>1-1 输出结果为 0</td></tr><tr><td>*</td><td>乘</td><td>2 * 2 输出结果为 4</td></tr><tr><td>/</td><td>除</td><td>10 / 2 输出结果为 5</td></tr><tr><td>//</td><td>整除</td><td>9 // 4 输出结果为2</td></tr><tr><td>%</td><td>取余</td><td>9 % 4 输出结果为 1</td></tr><tr><td>**</td><td>指数</td><td>2 ** 4 输出结果为 16，即 2 * 2 * 2 * 2</td></tr><tr><td>()</td><td>小括号</td><td>小括号用来提高运算优先级，即 (1 + 2) * 3 输出结果为 9</td></tr></tbody></table><blockquote><p>混合运算优先级顺序：<code>()</code>高于 <code>**</code> 高于 <code>*</code> <code>/</code> <code>//</code> <code>%</code> 高于 <code>+</code> <code>-</code></p></blockquote><h3 id="3-赋值运算符"><a href="#3-赋值运算符" class="headerlink" title="3. 赋值运算符"></a>3. 赋值运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>将<code>=</code>右侧的结果赋值给等号左侧的变量</td></tr></tbody></table><ol><li>单个变量赋值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num = 1<span class="built_in">print</span>(num)<span class="number">12</span></span><br></pre></td></tr></table></figure><ol><li>多个变量赋值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num1, float1, str1 = <span class="number">10</span>, <span class="number">0.5</span>, <span class="string">&#x27;hello world&#x27;</span><span class="built_in">print</span>(num1)<span class="built_in">print</span>(float1)<span class="built_in">print</span>(str1)<span class="number">1234</span></span><br></pre></td></tr></table></figure><ol><li>多变量赋相同值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = b = 10<span class="built_in">print</span>(a)<span class="built_in">print</span>(b)<span class="number">123</span></span><br></pre></td></tr></table></figure><h3 id="4-复合赋值运算符"><a href="#4-复合赋值运算符" class="headerlink" title="4. 复合赋值运算符"></a>4. 复合赋值运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+=</td><td>加法赋值运算符</td><td>c += a 等价于 c = c + a</td></tr><tr><td>-=</td><td>减法赋值运算符</td><td>c -= a 等价于 c = c- a</td></tr><tr><td>*=</td><td>乘法赋值运算符</td><td>c *= a 等价于 c = c * a</td></tr><tr><td>/=</td><td>除法赋值运算符</td><td>c /= a 等价于 c = c / a</td></tr><tr><td>//=</td><td>整除赋值运算符</td><td>c //= a 等价于 c = c // a</td></tr><tr><td>%=</td><td>取余赋值运算符</td><td>c %= a 等价于 c = c % a</td></tr><tr><td>**=</td><td>幂赋值运算符</td><td>c ** = a 等价于 c = c ** a</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = 100a += <span class="number">1</span><span class="comment"># 输出101  a = a + 1,最终a = 100 + 1print(a)b = 2b *= 3# 输出6  b = b * 3,最终b = 2 * 3print(b)c = 10c += 1 + 2# 输出13, 先算运算符右侧1 + 2 = 3， c += 3 , 推导出c = 10 + 3print(c)1234567891011121314</span></span><br></pre></td></tr></table></figure><h3 id="5-比较运算符"><a href="#5-比较运算符" class="headerlink" title="5. 比较运算符"></a>5. 比较运算符</h3><p><strong>比较运算符也叫关系运算符， 通常用来判断。</strong></p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>判断相等。如果两个操作数的结果相等，则条件结果为真(True)，否则条件结果为假(False)</td><td>如a=3,b=3，则（a == b) 为 True</td></tr><tr><td>!=</td><td>不等于 。如果两个操作数的结果不相等，则条件为真(True)，否则条件结果为假(False)</td><td>如a=3,b=3，则（a == b) 为 True如a=1,b=3，则(a != b) 为 True</td></tr><tr><td>&gt;</td><td>运算符左侧操作数结果是否大于右侧操作数结果，如果大于，则条件为真，否则为假</td><td>如a=7,b=3，则(a &gt; b) 为 True</td></tr><tr><td>&lt;</td><td>运算符左侧操作数结果是否小于右侧操作数结果，如果小于，则条件为真，否则为假</td><td>如a=7,b=3，则(a &lt; b) 为 False</td></tr><tr><td>&gt;=</td><td>运算符左侧操作数结果是否大于等于右侧操作数结果，如果大于，则条件为真，否则为假</td><td>如a=7,b=3，则(a &lt; b) 为 False如a=3,b=3，则(a &gt;= b) 为 True</td></tr><tr><td>&lt;=</td><td>运算符左侧操作数结果是否小于等于右侧操作数结果，如果小于，则条件为真，否则为假</td><td>如a=3,b=3，则(a &lt;= b) 为 True</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = 7b = 5<span class="built_in">print</span>(a == b)  <span class="comment"># Falseprint(a != b)  # Trueprint(a &lt; b)   # Falseprint(a &gt; b)   # Trueprint(a &lt;= b)  # Falseprint(a &gt;= b)  # True12345678</span></span><br></pre></td></tr></table></figure><h3 id="6-逻辑运算符"><a href="#6-逻辑运算符" class="headerlink" title="6. 逻辑运算符"></a>6. 逻辑运算符</h3><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>布尔”与”：如果 x 为 False，x and y 返回 False，否则它返回 y 的值。</td><td>True and False， 返回 False。</td></tr><tr><td>or</td><td>x or y</td><td>布尔”或”：如果 x 是 True，它返回 True，否则它返回 y 的值。</td><td>False or True， 返回 True。</td></tr><tr><td>not</td><td>not x</td><td>布尔”非”：如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td>not True 返回 False, not False 返回 True</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = 1b = 2c = 3<span class="built_in">print</span>((a &lt; b) <span class="keyword">and</span> (b &lt; c))  <span class="comment"># Trueprint((a &gt; b) and (b &lt; c))  # Falseprint((a &gt; b) or (b &lt; c))   # Trueprint(not (a &gt; b))          # True1234567</span></span><br></pre></td></tr></table></figure><h3 id="7-补充知识"><a href="#7-补充知识" class="headerlink" title="7. 补充知识"></a>7. 补充知识</h3><p>数字之间的逻辑运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line">c = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># and运算符，只要有一个值为0，则结果为0，否则结果为最后一个非0数字</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">and</span> b)  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(b <span class="keyword">and</span> a)  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">and</span> c)  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(c <span class="keyword">and</span> a)  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(b <span class="keyword">and</span> c)  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(c <span class="keyword">and</span> b)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or运算符，只有所有值为0结果才为0，否则结果为第一个非0数字</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">or</span> b)  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">or</span> c)  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(b <span class="keyword">or</span> c)  <span class="comment"># 1</span></span><br><span class="line"><span class="number">12345678910111213141516</span></span><br></pre></td></tr></table></figure><h2 id="十一、条件语句"><a href="#十一、条件语句" class="headerlink" title="十一、条件语句"></a>十一、条件语句</h2><h3 id="1-了解条件语句"><a href="#1-了解条件语句" class="headerlink" title="1. 了解条件语句"></a>1. 了解条件语句</h3><p>Python条件语句是通过一条或多条语句的执行结果（True或者False）来决定执行的代码块。</p><h3 id="2-if语法"><a href="#2-if语法" class="headerlink" title="2. if语法"></a>2. if语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    条件成立执行的代码<span class="number">1</span></span><br><span class="line">    条件成立执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h4 id="2-1-体验if语句"><a href="#2-1-体验if语句" class="headerlink" title="2.1 体验if语句"></a>2.1 体验if语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;条件成立执行的代码1&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;条件成立执行的代码2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下方的代码没有缩进到if语句块，所以和if条件无关</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我是无论条件是否成立都要执行的代码&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="2-2-简单版：网吧上网"><a href="#2-2-简单版：网吧上网" class="headerlink" title="2.2 简单版：网吧上网"></a>2.2 简单版：网吧上网</h4><p>需求分析：如果用户年龄大于等于18岁，即成年，输出”已经成年，可以上网”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;已经成年，可以上网&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;系统关闭&#x27;</span>)</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><h4 id="2-3-进阶版：网吧上网"><a href="#2-3-进阶版：网吧上网" class="headerlink" title="2.3 进阶版：网吧上网"></a>2.3 进阶版：网吧上网</h4><p>新增需求：用户可以输出自己的年龄，然后系统进行判断是否成年，成年则输出”您的年龄是’用户输入的年龄’，已经成年，可以上网”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># input接受用户输入的数据是字符串类型，条件是age和整型18做判断，所以这里要int转换数据类型</span></span><br><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入您的年龄：&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的年龄是<span class="subst">&#123;age&#125;</span>,已经成年，可以上网&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;系统关闭&#x27;</span>)</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><h3 id="3-if…else…"><a href="#3-if…else…" class="headerlink" title="3. if…else…"></a>3. if…else…</h3><p>作用：条件成立执行if下方的代码; 条件不成立执行else下方的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    条件成立执行的代码<span class="number">1</span></span><br><span class="line">    条件成立执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    条件不成立执行的代码<span class="number">1</span></span><br><span class="line">    条件不成立执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><blockquote><p>思考：网吧上网的实例，如果成年，允许上网，如果不成年呢？是不是应该回复用户不能上网？</p></blockquote><h4 id="3-1-实用版：网吧上网"><a href="#3-1-实用版：网吧上网" class="headerlink" title="3.1 实用版：网吧上网"></a>3.1 实用版：网吧上网</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入您的年龄：&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的年龄是<span class="subst">&#123;age&#125;</span>,已经成年，可以上网&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;您的年龄是<span class="subst">&#123;age&#125;</span>,未成年，请自行回家写作业&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;系统关闭&#x27;</span>)</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：如果条件成立执行了某些代码，那么其他的情况的代码将不会执行。</p></blockquote><h3 id="4-多重判断"><a href="#4-多重判断" class="headerlink" title="4. 多重判断"></a>4. 多重判断</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:    条件<span class="number">1</span>成立执行的代码<span class="number">1</span>    条件<span class="number">1</span>成立执行的代码<span class="number">2</span>    ......<span class="keyword">elif</span> 条件<span class="number">2</span>：条件<span class="number">2</span>成立执行的代码<span class="number">1</span>    条件<span class="number">2</span>成立执行的代码<span class="number">2</span>    ............<span class="keyword">else</span>:    以上条件都不成立执行执行的代码<span class="number">1234567891011</span></span><br></pre></td></tr></table></figure><p>多重判断也可以和else配合使用。一般else放在整个if语句的最后，表示以上条件都不成立的时候执行的代码。</p><blockquote><p>思考：中国合法工作年龄为18-60岁，即如果年龄小于18的情况为童工，不合法；如果年龄在18-60岁之间为合法工龄；大于60岁为法定退休年龄。</p></blockquote><h4 id="4-1-实例：工龄判断"><a href="#4-1-实例：工龄判断" class="headerlink" title="4.1 实例：工龄判断"></a>4.1 实例：工龄判断</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入您的年龄：&#x27;</span>))<span class="keyword">if</span> age &lt; <span class="number">18</span>:    <span class="built_in">print</span>(<span class="string">f&#x27;您的年龄是<span class="subst">&#123;age&#125;</span>,童工一枚&#x27;</span>)<span class="keyword">elif</span> (age &gt;= <span class="number">18</span>) <span class="keyword">and</span> (age &lt;= <span class="number">60</span>):    <span class="built_in">print</span>(<span class="string">f&#x27;您的年龄是<span class="subst">&#123;age&#125;</span>,合法工龄&#x27;</span>)<span class="keyword">elif</span> age &gt; <span class="number">60</span>:    <span class="built_in">print</span>(<span class="string">f&#x27;您的年龄是<span class="subst">&#123;age&#125;</span>,可以退休&#x27;</span>)<span class="number">1234567</span></span><br></pre></td></tr></table></figure><blockquote><p>拓展：<code>age &gt;= 18 and age &lt;= 60</code>可以化简为<code>18 &lt;= age &lt;= 60</code>。</p></blockquote><h3 id="5-if嵌套"><a href="#5-if嵌套" class="headerlink" title="5. if嵌套"></a>5. if嵌套</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>：</span><br><span class="line">条件<span class="number">1</span>成立执行的代码</span><br><span class="line">    条件<span class="number">1</span>成立执行的代码</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> 条件<span class="number">2</span>：</span><br><span class="line">    条件<span class="number">2</span>成立执行的代码</span><br><span class="line">        条件<span class="number">2</span>成立执行的代码</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><p>注意：条件2的if也是出于条件1的缩进关系内部。</p><blockquote><p>思考：坐公交：如果有钱可以上车，没钱不能上车；上车后如果有空座，则可以坐下；如果没空座，就要站着。怎么书写程序？</p></blockquote><h4 id="5-1-实例：坐公交"><a href="#5-1-实例：坐公交" class="headerlink" title="5.1 实例：坐公交"></a>5.1 实例：坐公交</h4><ol><li>判断是否能上车</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1. 如果有钱，则可以上车</span></span><br><span class="line"><span class="string">    2. 上车后，如果有空座，可以坐下</span></span><br><span class="line"><span class="string">    上车后，如果没有空座，则站着等空座位</span></span><br><span class="line"><span class="string">如果没钱，不能上车</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 假设用 money = 1 表示有钱, money = 0表示没有钱</span></span><br><span class="line">money = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> money == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;土豪，不差钱，顺利上车&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;没钱，不能上车，追着公交车跑&#x27;</span>)</span><br><span class="line"><span class="number">123456789101112</span></span><br></pre></td></tr></table></figure><ol><li>判断是否能坐下</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1. 如果有钱，则可以上车</span></span><br><span class="line"><span class="string">    2. 上车后，如果有空座，可以坐下</span></span><br><span class="line"><span class="string">    上车后，如果没有空座，则站着等空座位</span></span><br><span class="line"><span class="string">如果没钱，不能上车</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 假设用 money = 1 表示有钱, money = 0表示没有钱; seat = 1 表示有空座，seat = 0 表示没有空座</span></span><br><span class="line">money = <span class="number">1</span></span><br><span class="line">seat = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> money == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;土豪，不差钱，顺利上车&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> seat == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;有空座，可以坐下&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;没有空座，站等&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;没钱，不能上车，追着公交车跑&#x27;</span>)</span><br><span class="line"><span class="number">1234567891011121314151617</span></span><br></pre></td></tr></table></figure><h4 id="5-2-if嵌套执行流程"><a href="#5-2-if嵌套执行流程" class="headerlink" title="5.2 if嵌套执行流程"></a>5.2 if嵌套执行流程</h4><p>![image-20210725091850030](C:\Users\Jerome Silvia\AppData\Roaming\Typora\typora-user-images\image-20210725091850030.png)</p><h3 id="6-应用：猜拳游戏"><a href="#6-应用：猜拳游戏" class="headerlink" title="6. 应用：猜拳游戏"></a>6. 应用：猜拳游戏</h3><p>需求分析：</p><ul><li><p>参与游戏的角色</p><ul><li>玩家<ul><li>手动出拳</li></ul></li><li>电脑<ul><li>随机出拳</li></ul></li></ul></li><li><p>判断输赢</p><ul><li>玩家获胜</li></ul><table><thead><tr><th>玩家</th><th>电脑</th></tr></thead><tbody><tr><td>石头</td><td>剪刀</td></tr><tr><td>剪刀</td><td>布</td></tr><tr><td>布</td><td>石头</td></tr></tbody></table><ul><li>平局<ul><li>玩家出拳 和 电脑出拳相同</li></ul></li><li>电脑获胜</li></ul></li></ul><p>随机做法：</p><ol><li>导出random模块</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ol><li>使用random模块中的随机整数功能</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">random.randint(开始,结束)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="6-1-初始版：猜拳游戏"><a href="#6-1-初始版：猜拳游戏" class="headerlink" title="6.1 初始版：猜拳游戏"></a>6.1 初始版：猜拳游戏</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">提示：0-石头，1-剪刀，2-布</span></span><br><span class="line"><span class="string">3. 出拳</span></span><br><span class="line"><span class="string">玩家输入出拳</span></span><br><span class="line"><span class="string">电脑随机出拳</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4. 判断输赢</span></span><br><span class="line"><span class="string">玩家获胜</span></span><br><span class="line"><span class="string">平局</span></span><br><span class="line"><span class="string">电脑获胜</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入random模块</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算电脑出拳的随机数字</span></span><br><span class="line">computer = random.randint(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(computer)</span><br><span class="line"></span><br><span class="line">player = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请出拳：0-石头，1-剪刀，2-布：&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 玩家胜利 p0:c1 或 p1:c2 或 p2:c0</span></span><br><span class="line"><span class="keyword">if</span> (player == <span class="number">0</span> <span class="keyword">and</span> computer == <span class="number">1</span>) <span class="keyword">or</span> (player == <span class="number">1</span> <span class="keyword">and</span> computer == <span class="number">2</span>) <span class="keyword">or</span> (player == <span class="number">2</span> <span class="keyword">and</span> computer == <span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;玩家获胜&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平局：玩家 == 电脑</span></span><br><span class="line"><span class="keyword">elif</span> player == computer:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;平局&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;电脑获胜&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="6-2-进阶版：猜拳游戏"><a href="#6-2-进阶版：猜拳游戏" class="headerlink" title="6.2 进阶版：猜拳游戏"></a>6.2 进阶版：猜拳游戏</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">石头剪刀布游戏</span></span><br><span class="line"><span class="string">玩家VS电脑</span></span><br><span class="line"><span class="string">站在玩家的角度，分析胜利、失败、平局</span></span><br><span class="line"><span class="string">0-石头，1-剪刀，2-布</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 导入随机数模块</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----欢迎来到人机对战小游戏-----&quot;</span>)</span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;请输入您的游戏名：&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    stats = <span class="built_in">input</span>(<span class="string">&quot;欢迎“%s”来到本游戏，开始游戏输入Y，退出游戏输入N，请您输入：&quot;</span> % name)</span><br><span class="line">    <span class="keyword">if</span> stats == <span class="string">&quot;Y&quot;</span> <span class="keyword">or</span> stats == <span class="string">&quot;y&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;游戏开始……&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;石头输入0、剪刀输入1、布输入2&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> stats == <span class="string">&quot;N&quot;</span> <span class="keyword">or</span> stats == <span class="string">&quot;n&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;游戏结束……&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请按照要求重新输入！&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-------------加载中-------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Game</span>(<span class="params">user, comp</span>):</span></span><br><span class="line">    <span class="keyword">if</span> (user== <span class="number">0</span> <span class="keyword">and</span> comp== <span class="number">1</span>) <span class="keyword">or</span> (user== <span class="number">1</span> <span class="keyword">and</span> comp== <span class="number">2</span>) <span class="keyword">or</span> (user== <span class="number">2</span> <span class="keyword">and</span> comp== <span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;机器输入%d，您赢了！&quot;</span> % comp)</span><br><span class="line">    <span class="keyword">elif</span> user == comp:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;机器输入%d，平局了！&quot;</span> % comp)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;机器输入%d，您输了！&quot;</span> % comp)</span><br><span class="line">    res = <span class="built_in">input</span>(<span class="string">&quot;重新游戏请输入X，退出游戏按任意键&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> res == <span class="string">&quot;X&quot;</span> <span class="keyword">or</span> res == <span class="string">&quot;x&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    user = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请您出拳，输入相应数字！&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> user == <span class="number">0</span> <span class="keyword">or</span> user == <span class="number">1</span> <span class="keyword">or</span> user == <span class="number">2</span>:</span><br><span class="line">        comp = random.randint(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">        Game(user, comp)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入数字有误，请确认后，重新输入！&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="7-三目运算符"><a href="#7-三目运算符" class="headerlink" title="7. 三目运算符"></a>7. 三目运算符</h3><p><strong>三目运算符也叫三元运算符。</strong></p><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">值<span class="number">1</span> <span class="keyword">if</span> 条件 <span class="keyword">else</span> 值<span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>快速体验：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">c = a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><h2 id="十二、循环简介"><a href="#十二、循环简介" class="headerlink" title="十二、循环简介"></a>十二、循环简介</h2><h3 id="1-循环的作用"><a href="#1-循环的作用" class="headerlink" title="1. 循环的作用"></a>1. 循环的作用</h3><p><strong>让代码更高效的重复执行。</strong></p><h3 id="2-循环的分类"><a href="#2-循环的分类" class="headerlink" title="2. 循环的分类"></a>2. 循环的分类</h3><p>在Python中，循环分为<code>while</code>和<code>for</code>两种，最终实现效果相同。</p><h3 id="3-while的语法"><a href="#3-while的语法" class="headerlink" title="3. while的语法"></a>3. while的语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:    条件成立重复执行的代码<span class="number">1</span>    条件成立重复执行的代码<span class="number">2</span>    .....<span class="number">.1234</span></span><br></pre></td></tr></table></figure><h3 id="4-while循环快速体验"><a href="#4-while循环快速体验" class="headerlink" title="4. while循环快速体验"></a>4. while循环快速体验</h3><p>需求：复现重复执行10次<code>print(&#39;Hello World&#39;)</code>。</p><p>分析：初始值是0次，终点是10次，重复做的事情输出“Hello World”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 循环的计数器</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;任务结束&#x27;</span>)</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><h3 id="5-while的应用"><a href="#5-while的应用" class="headerlink" title="5. while的应用"></a>5. while的应用</h3><h4 id="5-1-应用一：计算1-100累加和"><a href="#5-1-应用一：计算1-100累加和" class="headerlink" title="5.1 应用一：计算1-100累加和"></a>5.1 应用一：计算1-100累加和</h4><p>分析：1-100的累加和，即1 + 2 + 3 + 4 +….，即前两个数字的相加结果 + 下一个数字( 前一个数字 + 1)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">    result += i</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出5050</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：为了验证程序的准确性，可以先改小数值，验证结果正确后，再改成1-100做累加。</p></blockquote><h4 id="5-2-应用二：计算1-100偶数累加和"><a href="#5-2-应用二：计算1-100偶数累加和" class="headerlink" title="5.2 应用二：计算1-100偶数累加和"></a>5.2 应用二：计算1-100偶数累加和</h4><p>分析：1-100的偶数和，即 2 + 4 + 6 + 8…，得到偶数的方法如下：</p><ul><li>偶数即是和2取余结果为0的数字，可以加入条件语句判断是否为偶数，为偶数则累加</li><li>初始值为0 / 2 , 计数器每次累加2</li></ul><p><strong>方法一：条件判断和2取余数则累加</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一：条件判断和2取余数为0则累加计算</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        result += i</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出2550</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="number">12345678910</span></span><br></pre></td></tr></table></figure><p><strong>方法二：计数器控制</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法二：计数器控制增量为2</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">    result += i</span><br><span class="line">    i += <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出2550</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="number">123456789</span></span><br></pre></td></tr></table></figure><h3 id="6-break和continue"><a href="#6-break和continue" class="headerlink" title="6. break和continue"></a>6. break和continue</h3><p><strong>break和continue是循环中满足一定条件退出循环的两种不同方式。</strong></p><h4 id="6-1-理解"><a href="#6-1-理解" class="headerlink" title="6.1 理解"></a>6.1 理解</h4><p>举例：一共吃5个苹果，吃完第一个，吃第二个…，这里”吃苹果”的动作是不是重复执行？</p><p>情况一：如果吃的过程中，吃完第三个吃饱了，则不需要再吃第4个和第五个苹果，即是吃苹果的动作停止，这里就是break控制循环流程，即终止此循环。</p><p>情况二：如果吃的过程中，吃到第三个吃出一个大虫子…,是不是这个苹果就不吃了，开始吃第四个苹果，这里就是continue控制循环流程，即退出当前一次循环继而执行下一次循环代码。</p><h4 id="6-2-break实例"><a href="#6-2-break实例" class="headerlink" title="6.2 break实例"></a>6.2 break实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;吃饱了不吃了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;吃了第<span class="subst">&#123;i&#125;</span>个苹果&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="6-3-continue实例"><a href="#6-3-continue实例" class="headerlink" title="6.3 continue实例"></a>6.3 continue实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;大虫子，第<span class="subst">&#123;i&#125;</span>个不吃了&#x27;</span>)</span><br><span class="line">        <span class="comment"># 在continue之前一定要修改计数器，否则会陷入死循环</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;吃了第<span class="subst">&#123;i&#125;</span>个苹果&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="number">123456789</span></span><br></pre></td></tr></table></figure><h3 id="7-while循环嵌套"><a href="#7-while循环嵌套" class="headerlink" title="7. while循环嵌套"></a>7. while循环嵌套</h3><h4 id="7-1-语法"><a href="#7-1-语法" class="headerlink" title="7.1 语法"></a>7.1 语法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件<span class="number">1</span>:</span><br><span class="line">    条件<span class="number">1</span>成立执行的代码</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">while</span> 条件<span class="number">2</span>:</span><br><span class="line">        条件<span class="number">2</span>成立执行的代码</span><br><span class="line">        ......</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><blockquote><p>总结：所谓while循环嵌套，就是一个while里面嵌套一个while的写法，每个while和之前的基础语法是相同的。</p></blockquote><h4 id="7-2-执行过程"><a href="#7-2-执行过程" class="headerlink" title="7.2 执行过程"></a>7.2 执行过程</h4><p>当内部循环执行完成之后，再执行下一次外部循环的条件判断。</p><p>![image-20210725092001911](C:\Users\Jerome Silvia\AppData\Roaming\Typora\typora-user-images\image-20210725092001911.png)</p><h4 id="7-3-while循环嵌套应用"><a href="#7-3-while循环嵌套应用" class="headerlink" title="7.3 while循环嵌套应用"></a>7.3 while循环嵌套应用</h4><p><strong>应用一：打印星号（正方形）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重复打印5行星星</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= <span class="number">4</span>:</span><br><span class="line">    <span class="comment"># 一行星星的打印</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= <span class="number">4</span>:</span><br><span class="line">        <span class="comment"># 一行内的星星不能换行，取消print默认结束符\n</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 每行结束要换行，这里借助一个空的print，利用print默认结束符换行</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    j += <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>应用二：打印星号（三角形）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重复打印5行星星</span></span><br><span class="line"><span class="comment"># j表示行号</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= <span class="number">4</span>:</span><br><span class="line">    <span class="comment"># 一行星星的打印</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="comment"># i表示每行里面星星的个数，这个数字要和行号相等所以i要和j联动</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= j:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    j += <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>应用二：九九乘法表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重复打印9行表达式</span></span><br><span class="line">j = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= <span class="number">9</span>:</span><br><span class="line">    <span class="comment"># 打印一行里面的表达式 a * b = a*b</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= j:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>*<span class="subst">&#123;j&#125;</span>=<span class="subst">&#123;j*i&#125;</span>&#x27;</span>, end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    j += <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="8-for循环"><a href="#8-for循环" class="headerlink" title="8. for循环"></a>8. for循环</h3><h4 id="8-1-语法"><a href="#8-1-语法" class="headerlink" title="8.1 语法"></a>8.1 语法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 序列:</span><br><span class="line">    重复执行的代码<span class="number">1</span></span><br><span class="line">    重复执行的代码<span class="number">2</span></span><br><span class="line">    ......</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h4 id="8-2-快速体验"><a href="#8-2-快速体验" class="headerlink" title="8.2 快速体验"></a>8.2 快速体验</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h4 id="8-3-break"><a href="#8-3-break" class="headerlink" title="8.3 break"></a>8.3 break</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;遇到e不打印&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h4 id="8-4-continue"><a href="#8-4-continue" class="headerlink" title="8.4 continue"></a>8.4 continue</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;遇到e不打印&#x27;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h2 id="十三、else"><a href="#十三、else" class="headerlink" title="十三、else"></a>十三、else</h2><p>循环可以和else配合使用，else下方缩进的代码指的是当循环正常结束之后要执行的代码。</p><h3 id="1-while…else"><a href="#1-while…else" class="headerlink" title="1. while…else"></a>1. while…else</h3><h4 id="1-1-语法"><a href="#1-1-语法" class="headerlink" title="1.1 语法"></a>1.1 语法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    条件成立重复执行的代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    循环正常结束之后要执行的代码</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h4 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;执行完毕&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="1-3-退出循环的方式"><a href="#1-3-退出循环的方式" class="headerlink" title="1.3 退出循环的方式"></a>1.3 退出循环的方式</h4><ol><li>break终止循环</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;提前结束&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;执行完毕&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>所谓else指的是循环正常结束之后要执行的代码，即如果是break终止循环的情况，else下方缩进的代码将不执行。</p></blockquote><ol><li>continue控制循环</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;打断一下&quot;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;执行完毕&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>因为continue是退出当前一次循环，继续下一次循环，所以该循环在continue控制下是可以正常结束的，当循环结束后，则执行了else缩进的代码。</p></blockquote><h3 id="2-for…else"><a href="#2-for…else" class="headerlink" title="2. for…else"></a>2. for…else</h3><h4 id="2-1-语法"><a href="#2-1-语法" class="headerlink" title="2.1 语法"></a>2.1 语法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 序列:</span><br><span class="line">    重复执行的代码</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    循环正常结束之后要执行的代码</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><blockquote><p>所谓else指的是循环正常结束之后要执行的代码，即如果是break终止循环的情况，else下方缩进的代码将不执行。</p></blockquote><h4 id="2-2-示例"><a href="#2-2-示例" class="headerlink" title="2.2 示例"></a>2.2 示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;循环正常结束之后执行的代码&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="2-3-退出循环的方式"><a href="#2-3-退出循环的方式" class="headerlink" title="2.3 退出循环的方式"></a>2.3 退出循环的方式</h4><ol><li>break终止循环</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;遇到e不打印&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;循环正常结束之后执行的代码&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>没有执行else缩进的代码。</p></blockquote><p>​    2 .continue控制循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;遇到e不打印&#x27;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;循环正常结束之后执行的代码&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>因为continue是退出当前一次循环，继续下一次循环，所以该循环在continue控制下是可以正常结束的，当循环结束后，则执行了else缩进的代码。</p></blockquote><h2 id="十四、字符串"><a href="#十四、字符串" class="headerlink" title="十四、字符串"></a>十四、字符串</h2><h3 id="1-认识字符串"><a href="#1-认识字符串" class="headerlink" title="1. 认识字符串"></a>1. 认识字符串</h3><p>字符串是 Python 中最常用的数据类型。我们一般使用引号来创建字符串。创建字符串很简单，只要为变量分配一个值即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">b = <span class="string">&quot;abcdefg&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：控制台显示结果为<code>&lt;class &#39;str&#39;&gt;</code>， 即数据类型为str(字符串)。</p></blockquote><h3 id="2-字符串特征"><a href="#2-字符串特征" class="headerlink" title="2. 字符串特征"></a>2. 字符串特征</h3><ul><li>一对引号字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name1 = <span class="string">&#x27;Tom&#x27;</span></span><br><span class="line">name2 = <span class="string">&quot;Rose&quot;</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><ul><li>三引号字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name3 = <span class="string">&#x27;&#x27;&#x27; Tom &#x27;&#x27;&#x27;</span></span><br><span class="line">name4 = <span class="string">&quot;&quot;&quot; Rose &quot;&quot;&quot;</span></span><br><span class="line">a = <span class="string">&#x27;&#x27;&#x27; i am Tom, </span></span><br><span class="line"><span class="string">        nice to meet you! &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">b = <span class="string">&quot;&quot;&quot; i am Rose, </span></span><br><span class="line"><span class="string">        nice to meet you! &quot;&quot;&quot;</span></span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><p><strong>注意：三引号形式的字符串支持换行。</strong></p><blockquote><p>思考：如果创建一个字符串<code>I&#39;m Tom</code>?</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="string">&quot;I&#x27;m Tom&quot;</span></span><br><span class="line">d = <span class="string">&#x27;I\&#x27;m Tom&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3-字符串输出"><a href="#3-字符串输出" class="headerlink" title="3. 字符串输出"></a>3. 字符串输出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;Tom&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我的名字是%s&#x27;</span> % name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;我的名字是<span class="subst">&#123;name&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><h3 id="4-字符串输入"><a href="#4-字符串输入" class="headerlink" title="4. 字符串输入"></a>4. 字符串输入</h3><p>在Python中，使用<code>input()</code>接收用户输入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的名字：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;您输入的名字是<span class="subst">&#123;name&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name))</span><br><span class="line"></span><br><span class="line">password = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的密码：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;您输入的密码是<span class="subst">&#123;password&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(password))</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><h3 id="5-下标"><a href="#5-下标" class="headerlink" title="5. 下标"></a>5. 下标</h3><h4 id="5-1-概念"><a href="#5-1-概念" class="headerlink" title="5.1 概念"></a>5.1 概念</h4><p><code>“下标”</code>又叫<code>“索引”</code>，就是编号。比如火车座位号，座位号的作用：按照编号快速找到对应的座位。同理，下标的作用即是通过下标快速找到对应的数据。</p><h4 id="5-2-快速体验"><a href="#5-2-快速体验" class="headerlink" title="5.2 快速体验"></a>5.2 快速体验</h4><p>需求：字符串<code>name = &quot;abcdef&quot;</code>，取到不同下标对应的数据。</p><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;abcdef&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><h3 id="6-切片"><a href="#6-切片" class="headerlink" title="6. 切片"></a>6. 切片</h3><p>切片是指对操作的对象截取其中一部分的操作。<strong>字符串、列表、元组</strong>都支持切片操作。</p><h4 id="6-1-语法"><a href="#6-1-语法" class="headerlink" title="6.1 语法"></a>6.1 语法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">序列[开始位置下标:结束位置下标:步长]<span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li>不包含结束位置下标对应的数据， 正负整数均可；<br>步长是选取间隔，正负整数均可，默认步长为1。</li></ul></blockquote><h4 id="6-2-示例"><a href="#6-2-示例" class="headerlink" title="6.2 示例"></a>6.2 示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;abcdefg&quot;</span><span class="built_in">print</span>(name[<span class="number">2</span>:<span class="number">5</span>:<span class="number">1</span>])  <span class="comment"># cdeprint(name[2:5])  # cdeprint(name[:5])  # abcdeprint(name[1:])  # bcdefgprint(name[:])  # abcdefgprint(name[::2])  # acegprint(name[:-1])  # abcdef, 负1表示倒数第一个数据print(name[-4:-1])  # defprint(name[::-1])  # gfedcba1234567891011</span></span><br></pre></td></tr></table></figure><h3 id="7-常用操作方法"><a href="#7-常用操作方法" class="headerlink" title="7. 常用操作方法"></a>7. 常用操作方法</h3><p>字符串的常用操作方法有查找、修改和判断三大类。</p><h4 id="7-1-查找"><a href="#7-1-查找" class="headerlink" title="7.1 查找"></a>7.1 查找</h4><p>所谓字符串查找方法即是查找子串在字符串中的位置或出现的次数。</p><ul><li>find()：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则返回-1。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字符串序列.find(子串, 开始位置下标, 结束位置下标)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p></blockquote><ol><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and buran and list and Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.find(<span class="string">&#x27;and&#x27;</span>))  <span class="comment"># 12</span></span><br><span class="line"><span class="built_in">print</span>(mystr.find(<span class="string">&#x27;and&#x27;</span>, <span class="number">15</span>, <span class="number">30</span>))  <span class="comment"># 22</span></span><br><span class="line"><span class="built_in">print</span>(mystr.find(<span class="string">&#x27;ands&#x27;</span>))  <span class="comment"># -1</span></span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><ul><li>index()：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则报异常。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字符串序列.index(子串, 开始位置下标, 结束位置下标)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p></blockquote><ol><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and buran and list and Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.index(<span class="string">&#x27;and&#x27;</span>))  <span class="comment"># 12</span></span><br><span class="line"><span class="built_in">print</span>(mystr.index(<span class="string">&#x27;and&#x27;</span>, <span class="number">15</span>, <span class="number">30</span>))  <span class="comment"># 22</span></span><br><span class="line"><span class="built_in">print</span>(mystr.index(<span class="string">&#x27;ands&#x27;</span>))  <span class="comment"># 报错</span></span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><ul><li>rfind()： 和find()功能相同，但查找方向为右侧开始。</li><li>rindex()：和index()功能相同，但查找方向为右侧开始。</li><li>count()：返回某个子串在字符串中出现的次数。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字符串序列.count(子串, 开始位置下标, 结束位置下标)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p></blockquote><ol><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and buran and list and Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mystr.count(<span class="string">&#x27;and&#x27;</span>))  <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(mystr.count(<span class="string">&#x27;ands&#x27;</span>))  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(mystr.count(<span class="string">&#x27;and&#x27;</span>, <span class="number">0</span>, <span class="number">20</span>))  <span class="comment"># 1</span></span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><h4 id="7-2-修改"><a href="#7-2-修改" class="headerlink" title="7.2 修改"></a>7.2 修改</h4><p>所谓修改字符串，指的就是通过函数的形式修改字符串中的数据。</p><ul><li>replace()：替换字符串。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串序列.replace(旧子串, 新子串, 替换次数)<span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：替换次数如果查出子串出现次数，则替换次数为该子串出现次数。</p></blockquote><ol><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and buran and list and Python&quot;</span><span class="built_in">print</span>(mystr.replace(<span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;he&#x27;</span>))<span class="comment"># 结果：hello world he buran he list he Pythonprint(mystr.replace(&#x27;and&#x27;, &#x27;he&#x27;, 10))# 结果：hello world he buran he list he Pythonprint(mystr)# 结果：hello world and buran and list and Python12345678</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：数据按照是否能直接修改分为可变类型和不可变类型两种。字符串类型的数据修改的时候不能改变原有字符串，属于不能直接修改数据的类型即是不可变类型。</p></blockquote><ul><li>split()：按照指定字符分割字符串。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串序列.split(分割字符, num)<span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：num表示的是分割字符出现的次数，即将来返回数据个数为num+1个。</p></blockquote><ol><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and buran and list and Python&quot;</span><span class="built_in">print</span>(mystr.split(<span class="string">&#x27;and&#x27;</span>))<span class="comment"># 结果：[&#x27;hello world &#x27;, &#x27; buran &#x27;, &#x27; list &#x27;, &#x27; Python&#x27;]print(mystr.split(&#x27;and&#x27;, 2))# 结果：[&#x27;hello world &#x27;, &#x27; buran &#x27;, &#x27; list and Python&#x27;]print(mystr.split(&#x27; &#x27;))# 结果：[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;and&#x27;, &#x27;buran&#x27;, &#x27;and&#x27;, &#x27;list&#x27;, &#x27;and&#x27;, &#x27;Python&#x27;]print(mystr.split(&#x27; &#x27;, 2))# 结果：[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;and buran and list and Python&#x27;]12345678910</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：如果分割字符是原有字符串中的子串，分割后则丢失该子串。</p></blockquote><ul><li>join()：用一个字符或子串合并字符串，即是将多个字符串合并为一个新的字符串。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符或子串.join(多字符串组成的序列)<span class="number">1</span></span><br></pre></td></tr></table></figure><ol><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;buran&#x27;</span>, <span class="string">&#x27;list&#x27;</span>]t1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;ddd&#x27;</span>)<span class="built_in">print</span>(<span class="string">&#x27;_&#x27;</span>.join(list1))<span class="comment"># hello_buran_listprint(&#x27;...&#x27;.join(t1))# 结果：aa...b...cc...ddd1234567</span></span><br></pre></td></tr></table></figure><ul><li>capitalize()：将字符串第一个字符转换成大写。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and buran and list and Python&quot;</span><span class="built_in">print</span>(mystr.capitalize())<span class="comment"># 结果：Hello world and buran and list and python1234</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：capitalize()函数转换后，只字符串第一个字符大写，其他的字符全都小写。</p></blockquote><ul><li>title()：将字符串每个单词首字母转换成大写。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and buran and list and Python&quot;</span><span class="built_in">print</span>(mystr.title())<span class="comment"># 结果：Hello World And Buran And List And Python1234</span></span><br></pre></td></tr></table></figure><ul><li>lower()：将字符串中大写转小写。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and buran and list and Python&quot;</span><span class="built_in">print</span>(mystr.lower())<span class="comment"># 结果：hello world and buran and list and python1234</span></span><br></pre></td></tr></table></figure><ul><li>upper()：将字符串中小写转大写。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and buran and list and Python&quot;</span><span class="built_in">print</span>(mystr.upper())<span class="comment"># 结果：HELLO WORLD AND BURAN AND LIST AND PYTHON1234</span></span><br></pre></td></tr></table></figure><ul><li>lstrip()：删除字符串左侧空白字符。</li><li>rstrip()：删除字符串右侧空白字符。</li><li>strip()：删除字符串两侧空白字符。</li><li>ljust()：返回一个原字符串左对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串。</li><li>rjust()：返回一个原字符串右对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串，语法和ljust()相同。</li><li>center()：返回一个原字符串居中对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串，语法和ljust()相同。</li></ul><h4 id="7-3-判断"><a href="#7-3-判断" class="headerlink" title="7.3 判断"></a>7.3 判断</h4><p>所谓判断即是判断真假，返回的结果是布尔型数据类型：True 或 False。</p><ul><li>startswith()：检查字符串是否是以指定子串开头，是则返回 True，否则返回 False。如果设置开始和结束位置下标，则在指定范围内检查。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串序列.startswith(子串, 开始位置下标, 结束位置下标)<span class="number">1</span></span><br></pre></td></tr></table></figure><ol><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and buran and list and Python&quot;</span><span class="built_in">print</span>(mystr.startswith(<span class="string">&#x27;hello&#x27;</span>))<span class="comment"># 结果：Trueprint(mystr.startswith(&#x27;hello&#x27;, 5, 20))# 结果：False123456</span></span><br></pre></td></tr></table></figure><ul><li>endswith()：：检查字符串是否是以指定子串结尾，是则返回 True，否则返回 False。如果设置开始和结束位置下标，则在指定范围内检查。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串序列.endswith(子串, 开始位置下标, 结束位置下标)<span class="number">1</span></span><br></pre></td></tr></table></figure><ol><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and buran and list and Python&quot;</span><span class="built_in">print</span>(mystr.endswith(<span class="string">&#x27;Python&#x27;</span>))<span class="comment"># 结果：Trueprint(mystr.endswith(&#x27;python&#x27;))# 结果：Falseprint(mystr.endswith(&#x27;Python&#x27;, 2, 20))# 结果：False12345678</span></span><br></pre></td></tr></table></figure><ul><li>isalpha()：如果字符串至少有一个字符并且所有字符都是字母则返回 True, 否则返回 False。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr1 = <span class="string">&#x27;hello&#x27;</span>mystr2 = <span class="string">&#x27;hello12345&#x27;</span><span class="built_in">print</span>(mystr1.isalpha())<span class="comment"># 结果：Trueprint(mystr2.isalpha())# 结果：False1234567</span></span><br></pre></td></tr></table></figure><ul><li>isdigit()：如果字符串只包含数字则返回 True 否则返回 False。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr1 = <span class="string">&#x27;aaa12345&#x27;</span>mystr2 = <span class="string">&#x27;12345&#x27;</span><span class="built_in">print</span>(mystr1.isdigit())<span class="comment"># 结果： Falseprint(mystr2.isdigit())# 结果：False1234567</span></span><br></pre></td></tr></table></figure><ul><li>isalnum()：如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True,否则返回 False。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr1 = <span class="string">&#x27;aaa12345&#x27;</span>mystr2 = <span class="string">&#x27;12345-&#x27;</span><span class="built_in">print</span>(mystr1.isalnum())<span class="comment"># 结果：Trueprint(mystr2.isalnum())# 结果：False1234567</span></span><br></pre></td></tr></table></figure><ul><li>isspace()：如果字符串中只包含空白，则返回 True，否则返回 False。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mystr1 = <span class="string">&#x27;1 2 3 4 5&#x27;</span>mystr2 = <span class="string">&#x27;     &#x27;</span><span class="built_in">print</span>(mystr1.isspace())<span class="comment"># 结果：Falseprint(mystr2.isspace())# 结果：True1234567</span></span><br></pre></td></tr></table></figure><h2 id="十五、列表"><a href="#十五、列表" class="headerlink" title="十五、列表"></a>十五、列表</h2><h3 id="1-列表的格式"><a href="#1-列表的格式" class="headerlink" title="1. 列表的格式"></a>1. 列表的格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[数据<span class="number">1</span>, 数据<span class="number">2</span>, 数据<span class="number">3</span>, 数据<span class="number">4.</span>.....]<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>列表可以一次性有序存储多个不同类型的数据。</strong></p><h3 id="2-列表的常用操作"><a href="#2-列表的常用操作" class="headerlink" title="2. 列表的常用操作"></a>2. 列表的常用操作</h3><p>列表的作用是一次性存储多个数据，程序员可以对这些数据进行的操作有：增、删、改、查。</p><h4 id="2-1-查找"><a href="#2-1-查找" class="headerlink" title="2.1 查找"></a>2.1 查找</h4><ol><li>下标</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]<span class="built_in">print</span>(name_list[<span class="number">0</span>])  <span class="comment"># Tomprint(name_list[1])  # Lilyprint(name_list[2])  # Rose12345</span></span><br></pre></td></tr></table></figure><ol><li>函数</li></ol><ul><li>index()：返回指定数据所在位置的下标 。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.index(数据, 开始位置下标, 结束位置下标)1name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]<span class="built_in">print</span>(name_list.index(<span class="string">&#x27;Lily&#x27;</span>, <span class="number">0</span>, <span class="number">2</span>))  <span class="comment"># 1123</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：如果查找的数据不存在则报错。</p></blockquote><ul><li>count()：统计指定数据在当前列表中出现的次数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]<span class="built_in">print</span>(name_list.count(<span class="string">&#x27;Lily&#x27;</span>))  <span class="comment"># 1123</span></span><br></pre></td></tr></table></figure><ul><li>len()：访问列表长度，即列表中数据的个数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]<span class="built_in">print</span>(<span class="built_in">len</span>(name_list))  <span class="comment"># 3123</span></span><br></pre></td></tr></table></figure><h4 id="2-2-判断是否存在"><a href="#2-2-判断是否存在" class="headerlink" title="2.2 判断是否存在"></a>2.2 判断是否存在</h4><ul><li>in：判断指定数据在某个列表序列，如果在返回True，否则返回False。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]<span class="comment"># 结果：Trueprint(&#x27;Lily&#x27; in name_list)# 结果：Falseprint(&#x27;Lilys&#x27; in name_list)1234567</span></span><br></pre></td></tr></table></figure><ul><li>not in：判断指定数据不在某个列表序列，如果不在返回True，否则返回False。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]<span class="comment"># 结果：Falseprint(&#x27;Lily&#x27; not in name_list)# 结果：Trueprint(&#x27;Lilys&#x27; not in name_list)1234567</span></span><br></pre></td></tr></table></figure><h4 id="2-2-增加"><a href="#2-2-增加" class="headerlink" title="2.2 增加"></a>2.2 增加</h4><p><strong>作用：增加指定数据到列表中。</strong></p><ul><li>append()：列表结尾追加数据。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.append(数据)1name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]name_list.append(<span class="string">&#x27;xiaoming&#x27;</span>)<span class="comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;, &#x27;xiaoming&#x27;]print(name_list)123456</span></span><br></pre></td></tr></table></figure><blockquote><p>列表追加数据的时候，直接在原列表里面追加了指定数据，即修改了原列表，故列表为可变类型数据。</p></blockquote><p><strong>注意点：如果append()追加的数据是一个序列，则追加整个序列到列表。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]name_list.append([<span class="string">&#x27;xiaoming&#x27;</span>, <span class="string">&#x27;xiaohong&#x27;</span>])<span class="comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;, [&#x27;xiaoming&#x27;, &#x27;xiaohong&#x27;]]print(name_list)123456</span></span><br></pre></td></tr></table></figure><ul><li>extend()：列表结尾追加数据，如果数据是一个序列，则将这个序列的数据逐一添加到列表。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.extend(数据)<span class="number">1</span></span><br></pre></td></tr></table></figure><p>单个数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]name_list.extend(<span class="string">&#x27;xiaoming&#x27;</span>)<span class="comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;, &#x27;x&#x27;, &#x27;i&#x27;, &#x27;a&#x27;, &#x27;o&#x27;, &#x27;m&#x27;, &#x27;i&#x27;, &#x27;n&#x27;, &#x27;g&#x27;]print(name_list)123456</span></span><br></pre></td></tr></table></figure><p>序列数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]name_list.extend([<span class="string">&#x27;xiaoming&#x27;</span>, <span class="string">&#x27;xiaohong&#x27;</span>])<span class="comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;, &#x27;xiaoming&#x27;, &#x27;xiaohong&#x27;]print(name_list)123456</span></span><br></pre></td></tr></table></figure><ul><li>insert()：指定位置新增数据。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.insert(位置下标, 数据)1name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]name_list.insert(<span class="number">1</span>, <span class="string">&#x27;xiaoming&#x27;</span>)<span class="comment"># 结果：[&#x27;Tom&#x27;, &#x27;xiaoming&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;]print(name_list)123456</span></span><br></pre></td></tr></table></figure><h4 id="2-3-删除"><a href="#2-3-删除" class="headerlink" title="2.3 删除"></a>2.3 删除</h4><ul><li>del</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> 目标<span class="comment"># del(目标)12</span></span><br></pre></td></tr></table></figure><p>删除列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]<span class="comment"># 结果：报错提示：name &#x27;name_list&#x27; is not defineddel name_listprint(name_list)12345</span></span><br></pre></td></tr></table></figure><p>删除指定数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]<span class="keyword">del</span> name_list[<span class="number">0</span>]<span class="comment"># 结果：[&#x27;Lily&#x27;, &#x27;Rose&#x27;]print(name_list)123456</span></span><br></pre></td></tr></table></figure><ul><li>pop()：删除指定下标的数据(默认为最后一个)，并返回该数据。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.pop(下标)1name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]del_name = name_list.pop(<span class="number">1</span>)<span class="comment"># 结果：Lilyprint(del_name)# 结果：[&#x27;Tom&#x27;, &#x27;Rose&#x27;]print(name_list)123456789</span></span><br></pre></td></tr></table></figure><ul><li>remove()：移除列表中某个数据的第一个匹配项。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.remove(数据)1name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]name_list.remove(<span class="string">&#x27;Rose&#x27;</span>)<span class="comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;]print(name_list)123456</span></span><br></pre></td></tr></table></figure><ul><li>clear()：清空列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]name_list.clear()<span class="built_in">print</span>(name_list) <span class="comment"># 结果： []1234</span></span><br></pre></td></tr></table></figure><h4 id="2-4-修改"><a href="#2-4-修改" class="headerlink" title="2.4 修改"></a>2.4 修改</h4><ul><li>修改指定下标数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]name_list[<span class="number">0</span>] = <span class="string">&#x27;aaa&#x27;</span><span class="comment"># 结果：[&#x27;aaa&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;]print(name_list)123456</span></span><br></pre></td></tr></table></figure><ul><li>逆置：reverse()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num_list = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>]num_list.reverse()<span class="comment"># 结果：[8, 6, 3, 2, 5, 1]print(num_list)123456</span></span><br></pre></td></tr></table></figure><ul><li>排序：sort()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表序列.sort( key=<span class="literal">None</span>, reverse=<span class="literal">False</span>)1num_list = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>]num_list.sort()<span class="comment"># 结果：[1, 2, 3, 5, 6, 8]print(num_list)123456</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：reverse表示排序规则，<strong>reverse = True</strong> 降序， <strong>reverse = False</strong> 升序（默认）</p></blockquote><h4 id="2-5-复制"><a href="#2-5-复制" class="headerlink" title="2.5 复制"></a>2.5 复制</h4><ul><li>函数：copy()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]name_li2 = name_list.copy()<span class="comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;]print(name_li2)123456</span></span><br></pre></td></tr></table></figure><h3 id="3-列表的循环遍历"><a href="#3-列表的循环遍历" class="headerlink" title="3. 列表的循环遍历"></a>3. 列表的循环遍历</h3><p>需求：依次打印列表中的各个数据。</p><h4 id="3-1-while"><a href="#3-1-while" class="headerlink" title="3.1 while"></a>3.1 while</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(name_list):</span><br><span class="line">    <span class="built_in">print</span>(name_list[i])</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><h4 id="3-2-for"><a href="#3-2-for" class="headerlink" title="3.2 for"></a>3.2 for</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name_list:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h3 id="4-列表嵌套"><a href="#4-列表嵌套" class="headerlink" title="4. 列表嵌套"></a>4. 列表嵌套</h3><p>所谓列表嵌套指的就是一个列表里面包含了其他的子列表。</p><p>应用场景：要存储班级一、二、三三个班级学生姓名，且每个班级的学生姓名在一个列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name_list = [[<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;小绿&#x27;</span>], [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>], [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>]]</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>思考： 如何查找到数据”李四”？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一步：按下标查找到李四所在的列表</span></span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步：从李四所在的列表里面，再按下标找到数据李四</span></span><br><span class="line"><span class="built_in">print</span>(name_list[<span class="number">2</span>][<span class="number">1</span>])</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><h2 id="十六、元组"><a href="#十六、元组" class="headerlink" title="十六、元组"></a>十六、元组</h2><p><strong>一个元组可以存储多个数据，元组内的数据是不能修改的。</strong></p><h3 id="1-定义元组"><a href="#1-定义元组" class="headerlink" title="1. 定义元组"></a>1. 定义元组</h3><p>元组特点：定义元组使用小括号，且逗号隔开各个数据，数据可以是不同的数据类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多个数据元组</span></span><br><span class="line">t1 = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单个数据元组</span></span><br><span class="line">t2 = (<span class="number">10</span>,)</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：如果定义的元组只有一个数据，那么这个数据后面也好添加逗号，否则数据类型为唯一的这个数据的数据类型。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">t2 = (<span class="number">10</span>,)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t2))  <span class="comment"># tuple</span></span><br><span class="line"></span><br><span class="line">t3 = (<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t3))  <span class="comment"># int</span></span><br><span class="line"></span><br><span class="line">t4 = (<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t4))  <span class="comment"># str</span></span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><h3 id="2-元组的常见操作"><a href="#2-元组的常见操作" class="headerlink" title="2. 元组的常见操作"></a>2. 元组的常见操作</h3><p>元组数据不支持修改，只支持查找，具体如下：</p><ul><li>按下标查找数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple1[<span class="number">0</span>])  <span class="comment"># aa</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><ul><li>index()：查找某个数据，如果数据存在返回对应的下标，否则报错，语法和列表、字符串的index方法相同。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple1.index(<span class="string">&#x27;aa&#x27;</span>))  <span class="comment"># 0</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><ul><li>count()：统计某个数据在当前元组出现的次数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple1.count(<span class="string">&#x27;bb&#x27;</span>))  <span class="comment"># 2</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><ul><li>len()：统计元组中数据的个数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(tuple1))  <span class="comment"># 4</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h3 id="3-元组的注意事项"><a href="#3-元组的注意事项" class="headerlink" title="3. 元组的注意事项"></a>3. 元组的注意事项</h3><p><strong>元组内的直接数据如果修改则立即报错。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line">tuple1[<span class="number">0</span>] = <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p><strong>但是如果元组里面有列表，修改列表里面的数据则是支持的，故自觉很重要。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuple2 = (<span class="number">10</span>, <span class="number">20</span>, [<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>], <span class="number">50</span>, <span class="number">30</span>)<span class="built_in">print</span>(tuple2[<span class="number">2</span>])  <span class="comment"># 访问到列表# 结果：(10, 20, [&#x27;aaaaa&#x27;, &#x27;bb&#x27;, &#x27;cc&#x27;], 50, 30)tuple2[2][0] = &#x27;aaaaa&#x27;print(tuple2)123456</span></span><br></pre></td></tr></table></figure><h2 id="十七、字典"><a href="#十七、字典" class="headerlink" title="十七、字典"></a>十七、字典</h2><p><strong>字典里面的数据是以“键值对”形式出现，字典数据和数据顺序没有关系，即字典不支持下标，后期无论数据如何变化，只需要按照对应的键的名字查找数据即可。</strong></p><h3 id="1-创建字典的语法"><a href="#1-创建字典的语法" class="headerlink" title="1. 创建字典的语法"></a>1. 创建字典的语法</h3><p>字典特点：</p><ul><li>符号为大括号</li><li>数据为键值对形式出现</li><li>各个键值对之间用逗号隔开</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有数据字典dict1 = &#123;&#x27;name&#x27;: &#x27;Tom&#x27;, &#x27;age&#x27;: 20, &#x27;gender&#x27;: &#x27;男&#x27;&#125;# 空字典dict2 = &#123;&#125;dict3 = dict()1234567</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：一般称冒号前面的为键(key)，简称k；冒号后面的为值(value)，简称v。</p></blockquote><h3 id="2-字典常见操作"><a href="#2-字典常见操作" class="headerlink" title="2. 字典常见操作"></a>2. 字典常见操作</h3><h4 id="2-1-增"><a href="#2-1-增" class="headerlink" title="2.1 增"></a>2.1 增</h4><p>写法：字典序列[key] = 值</p><blockquote><p>注意：如果key存在则修改这个key对应的值；如果key不存在则新增此键值对。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;dict1[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;Rose&#x27;</span><span class="comment"># 结果：&#123;&#x27;name&#x27;: &#x27;Rose&#x27;, &#x27;age&#x27;: 20, &#x27;gender&#x27;: &#x27;男&#x27;&#125;print(dict1)dict1[&#x27;id&#x27;] = 110# &#123;&#x27;name&#x27;: &#x27;Rose&#x27;, &#x27;age&#x27;: 20, &#x27;gender&#x27;: &#x27;男&#x27;, &#x27;id&#x27;: 110&#125;print(dict1)12345678910</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：字典为可变类型。</p></blockquote><h4 id="2-2-删"><a href="#2-2-删" class="headerlink" title="2.2 删"></a>2.2 删</h4><ul><li>del() / del：删除字典或删除字典中指定键值对。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;<span class="keyword">del</span> dict1[<span class="string">&#x27;gender&#x27;</span>]<span class="comment"># 结果：&#123;&#x27;name&#x27;: &#x27;Tom&#x27;, &#x27;age&#x27;: 20&#125;print(dict1)12345</span></span><br></pre></td></tr></table></figure><ul><li>clear()：清空字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;dict1.clear()<span class="built_in">print</span>(dict1)  <span class="comment"># &#123;&#125;1234</span></span><br></pre></td></tr></table></figure><h4 id="2-3-改"><a href="#2-3-改" class="headerlink" title="2.3 改"></a>2.3 改</h4><p>写法：字典序列[key] = 值</p><blockquote><p>注意：如果key存在则修改这个key对应的值 ；如果key不存在则新增此键值对。</p></blockquote><h4 id="2-4-查"><a href="#2-4-查" class="headerlink" title="2.4 查"></a>2.4 查</h4><ol><li>key值查找</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;<span class="built_in">print</span>(dict1[<span class="string">&#x27;name&#x27;</span>])  <span class="comment"># Tomprint(dict1[&#x27;id&#x27;])  # 报错123</span></span><br></pre></td></tr></table></figure><blockquote><p>如果当前查找的key存在，则返回对应的值；否则则报错。</p></blockquote><ol><li>get()</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字典序列.get(key, 默认值)<span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：如果当前查找的key不存在则返回第二个参数(默认值)，如果省略第二个参数，则返回None。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;<span class="built_in">print</span>(dict1.get(<span class="string">&#x27;name&#x27;</span>))  <span class="comment"># Tomprint(dict1.get(&#x27;id&#x27;, 110))  # 110print(dict1.get(&#x27;id&#x27;))  # None1234</span></span><br></pre></td></tr></table></figure><ol><li>keys()</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;<span class="built_in">print</span>(dict1.keys())  <span class="comment"># dict_keys([&#x27;name&#x27;, &#x27;age&#x27;, &#x27;gender&#x27;])12</span></span><br></pre></td></tr></table></figure><ol><li>values()</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;<span class="built_in">print</span>(dict1.values())  <span class="comment"># dict_values([&#x27;Tom&#x27;, 20, &#x27;男&#x27;])12</span></span><br></pre></td></tr></table></figure><ol><li>items()</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;<span class="built_in">print</span>(dict1.items())  <span class="comment"># dict_items([(&#x27;name&#x27;, &#x27;Tom&#x27;), (&#x27;age&#x27;, 20), (&#x27;gender&#x27;, &#x27;男&#x27;)])12</span></span><br></pre></td></tr></table></figure><h3 id="3-字典的循环遍历"><a href="#3-字典的循环遍历" class="headerlink" title="3. 字典的循环遍历"></a>3. 字典的循环遍历</h3><h4 id="3-1-遍历字典的key"><a href="#3-1-遍历字典的key" class="headerlink" title="3.1 遍历字典的key"></a>3.1 遍历字典的key</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;<span class="keyword">for</span> key <span class="keyword">in</span> dict1.keys():    <span class="built_in">print</span>(key)<span class="number">123</span></span><br></pre></td></tr></table></figure><h4 id="3-2-遍历字典的value"><a href="#3-2-遍历字典的value" class="headerlink" title="3.2 遍历字典的value"></a>3.2 遍历字典的value</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;<span class="keyword">for</span> value <span class="keyword">in</span> dict1.values():    <span class="built_in">print</span>(value)<span class="number">123</span></span><br></pre></td></tr></table></figure><h4 id="3-3-遍历字典的元素"><a href="#3-3-遍历字典的元素" class="headerlink" title="3.3 遍历字典的元素"></a>3.3 遍历字典的元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;<span class="keyword">for</span> item <span class="keyword">in</span> dict1.items():    <span class="built_in">print</span>(item)<span class="number">123</span></span><br></pre></td></tr></table></figure><h4 id="3-4-遍历字典的键值对"><a href="#3-4-遍历字典的键值对" class="headerlink" title="3.4 遍历字典的键值对"></a>3.4 遍历字典的键值对</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dict1.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;key&#125;</span> = <span class="subst">&#123;value&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h2 id="十八、集合"><a href="#十八、集合" class="headerlink" title="十八、集合"></a>十八、集合</h2><p><strong>集合具有确定性，无序性和去重性。</strong></p><h3 id="1-创建集合"><a href="#1-创建集合" class="headerlink" title="1. 创建集合"></a>1. 创建集合</h3><p>创建集合使用<code>&#123;&#125;</code>或<code>set()</code>， 但是如果要创建空集合只能使用<code>set()</code>，因为<code>&#123;&#125;</code>用来创建空字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"></span><br><span class="line">s2 = &#123;<span class="number">10</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">50</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line"></span><br><span class="line">s3 = <span class="built_in">set</span>(<span class="string">&#x27;abcdefg&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s3)</span><br><span class="line"></span><br><span class="line">s4 = <span class="built_in">set</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s4))  <span class="comment"># set</span></span><br><span class="line"></span><br><span class="line">s5 = &#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s5))  <span class="comment"># dict</span></span><br><span class="line"><span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure><blockquote><p>特点：</p><ol><li>集合可以去掉重复数据；</li><li>集合数据是无序的，故不支持下标。</li></ol></blockquote><h3 id="2-集合常见操作方法"><a href="#2-集合常见操作方法" class="headerlink" title="2. 集合常见操作方法"></a>2. 集合常见操作方法</h3><h4 id="2-1-增加数据"><a href="#2-1-增加数据" class="headerlink" title="2.1 增加数据"></a>2.1 增加数据</h4><ul><li>add()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;s1.add(<span class="number">100</span>)s1.add(<span class="number">10</span>)<span class="built_in">print</span>(s1)  <span class="comment"># &#123;100, 10, 20&#125;1234</span></span><br></pre></td></tr></table></figure><blockquote><p>因为集合有去重功能，所以，当向集合内追加的数据是当前集合已有数据的话，则不进行任何操作。</p></blockquote><ul><li>update(), 追加的数据是序列。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;<span class="comment"># s1.update(100)  # 报错s1.update([100, 200])s1.update(&#x27;abc&#x27;)print(s1)   # &#123;&#x27;a&#x27;, 100, 200, 10, &#x27;b&#x27;, &#x27;c&#x27;, 20&#125;12345</span></span><br></pre></td></tr></table></figure><h4 id="2-2-删除数据"><a href="#2-2-删除数据" class="headerlink" title="2.2 删除数据"></a>2.2 删除数据</h4><ul><li>remove()，删除集合中的指定数据，如果数据不存在则报错。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;s1.remove(<span class="number">10</span>)<span class="built_in">print</span>(s1)s1.remove(<span class="number">10</span>)  <span class="comment"># 报错print(s1)1234567</span></span><br></pre></td></tr></table></figure><ul><li>discard()，删除集合中的指定数据，如果数据不存在也不会报错。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line">s1.discard(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"></span><br><span class="line">s1.discard(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><ul><li>pop()，随机删除集合中的某个数据，并返回这个数据。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line"></span><br><span class="line">del_num = s1.pop()</span><br><span class="line"><span class="built_in">print</span>(del_num)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><h4 id="2-3-查找数据"><a href="#2-3-查找数据" class="headerlink" title="2.3 查找数据"></a>2.3 查找数据</h4><ul><li>in：判断数据在集合序列</li><li>not in：判断数据不在集合序列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">in</span> s1)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">not</span> <span class="keyword">in</span> s1)</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h2 id="十九、公共操作"><a href="#十九、公共操作" class="headerlink" title="十九、公共操作"></a>十九、公共操作</h2><h3 id="1-运算符"><a href="#1-运算符" class="headerlink" title="1. 运算符"></a>1. 运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>支持的容器类型</th></tr></thead><tbody><tr><td>+</td><td>合并</td><td>字符串、列表、元组</td></tr><tr><td>*</td><td>复制</td><td>字符串、列表、元组</td></tr><tr><td>in</td><td>元素是否存在</td><td>字符串、列表、元组、字典</td></tr><tr><td>not in</td><td>元素是否不存在</td><td>字符串、列表、元组、字典</td></tr></tbody></table><h4 id="1-1"><a href="#1-1" class="headerlink" title="1.1 +"></a>1.1 +</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串 </span></span><br><span class="line">str1 = <span class="string">&#x27;aa&#x27;</span></span><br><span class="line">str2 = <span class="string">&#x27;bb&#x27;</span></span><br><span class="line">str3 = str1 + str2</span><br><span class="line"><span class="built_in">print</span>(str3)  <span class="comment"># aabb</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 列表 </span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">list2 = [<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">list3 = list1 + list2</span><br><span class="line"><span class="built_in">print</span>(list3)  <span class="comment"># [1, 2, 10, 20]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 元组 </span></span><br><span class="line">t1 = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">t2 = (<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">t3 = t1 + t2</span><br><span class="line"><span class="built_in">print</span>(t3)  <span class="comment"># (10, 20, 100, 200)</span></span><br><span class="line"><span class="number">123456789101112131415161718</span></span><br></pre></td></tr></table></figure><h4 id="1-2"><a href="#1-2" class="headerlink" title="1.2 *"></a>1.2 *</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串print(&#x27;-&#x27; * 10)  # ----------# 2. 列表list1 = [&#x27;hello&#x27;]print(list1 * 4)  # [&#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;]# 3. 元组t1 = (&#x27;world&#x27;,)print(t1 * 4)  # (&#x27;world&#x27;, &#x27;world&#x27;, &#x27;world&#x27;, &#x27;world&#x27;)12345678910</span></span><br></pre></td></tr></table></figure><h4 id="1-3-in或not-in"><a href="#1-3-in或not-in" class="headerlink" title="1.3 in或not in"></a>1.3 in或not in</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串print(&#x27;a&#x27; in &#x27;abcd&#x27;)  # Trueprint(&#x27;a&#x27; not in &#x27;abcd&#x27;)  # False# 2. 列表list1 = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]print(&#x27;a&#x27; in list1)  # Trueprint(&#x27;a&#x27; not in list1)  # False# 3. 元组t1 = (&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;)print(&#x27;aa&#x27; in t1)  # Falseprint(&#x27;aa&#x27; not in t1)  # True12345678910111213</span></span><br></pre></td></tr></table></figure><h3 id="2-公共方法"><a href="#2-公共方法" class="headerlink" title="2. 公共方法"></a>2. 公共方法</h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>len()</td><td>计算容器中元素个数</td></tr><tr><td>del 或 del()</td><td>删除</td></tr><tr><td>max()</td><td>返回容器中元素最大值</td></tr><tr><td>min()</td><td>返回容器中元素最小值</td></tr><tr><td>range(start, end, step)</td><td>生成从start到end的数字，步长为 step，供for循环使用</td></tr><tr><td>enumerate()</td><td>函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</td></tr></tbody></table><h4 id="2-1-len"><a href="#2-1-len" class="headerlink" title="2.1 len()"></a>2.1 len()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串str1 = &#x27;abcdefg&#x27;print(len(str1))  # 7# 2. 列表list1 = [10, 20, 30, 40]print(len(list1))  # 4# 3. 元组t1 = (10, 20, 30, 40, 50)print(len(t1))  # 5# 4. 集合s1 = &#123;10, 20, 30&#125;print(len(s1))  # 3# 5. 字典dict1 = &#123;&#x27;name&#x27;: &#x27;Rose&#x27;, &#x27;age&#x27;: 18&#125;print(len(dict1))  # 212345678910111213141516171819</span></span><br></pre></td></tr></table></figure><h4 id="2-2-del"><a href="#2-2-del" class="headerlink" title="2.2 del()"></a>2.2 del()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串str1 = &#x27;abcdefg&#x27;del str1print(str1)# 2. 列表list1 = [10, 20, 30, 40]del(list1[0])print(list1)  # [20, 30, 40]123456789</span></span><br></pre></td></tr></table></figure><h4 id="2-3-max"><a href="#2-3-max" class="headerlink" title="2.3 max()"></a>2.3 max()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串str1 = &#x27;abcdefg&#x27;print(max(str1))  # g# 2. 列表list1 = [10, 20, 30, 40]print(max(list1))  # 401234567</span></span><br></pre></td></tr></table></figure><h4 id="2-4-min"><a href="#2-4-min" class="headerlink" title="2.4 min()"></a>2.4 min()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串</span></span><br><span class="line">str1 = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(str1))  <span class="comment"># a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(list1))  <span class="comment"># 10</span></span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><h4 id="2-5-range"><a href="#2-5-range" class="headerlink" title="2.5 range()"></a>2.5 range()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 3 5 7 9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="number">1234567891011</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：range()生成的序列不包含end数字。</p></blockquote><h4 id="2-6-enumerate"><a href="#2-6-enumerate" class="headerlink" title="2.6 enumerate()"></a>2.6 enumerate()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enumerate</span>(可遍历对象, start=<span class="number">0</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：start参数用来设置遍历数据的下标的起始值，默认为0。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">enumerate</span>(list1):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(list1, start=<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;下标是<span class="subst">&#123;index&#125;</span>, 对应的字符是<span class="subst">&#123;char&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-容器类型转换"><a href="#3-容器类型转换" class="headerlink" title="3. 容器类型转换"></a>3. 容器类型转换</h3><h4 id="3-1-tuple"><a href="#3-1-tuple" class="headerlink" title="3.1 tuple()"></a>3.1 tuple()</h4><p><strong>作用：将某个序列转换成元组。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">20</span>]</span><br><span class="line">s1 = &#123;<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(list1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(s1))</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><h4 id="3-2-list"><a href="#3-2-list" class="headerlink" title="3.2 list()"></a>3.2 list()</h4><p><strong>作用：将某个序列转换成列表。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">t1 = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">s1 = &#123;<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(t1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(s1))</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><h4 id="3-3-set"><a href="#3-3-set" class="headerlink" title="3.3 set()"></a>3.3 set()</h4><p><strong>作用：将某个序列转换成集合。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">20</span>]</span><br><span class="line">t1 = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(list1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(t1))</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li>集合可以快速完成列表去重。</li><li>集合不支持下标。</li></ol></blockquote><h2 id="二十、推导式"><a href="#二十、推导式" class="headerlink" title="二十、推导式"></a>二十、推导式</h2><h3 id="1-列表推导式"><a href="#1-列表推导式" class="headerlink" title="1. 列表推导式"></a>1. 列表推导式</h3><p><strong>作用：用一个表达式创建一个有规律的列表或控制一个有规律列表。</strong></p><p>列表推导式又叫列表生成式。</p><h4 id="1-1-快速体验"><a href="#1-1-快速体验" class="headerlink" title="1.1 快速体验"></a>1.1 快速体验</h4><p>需求：创建一个0-10的列表。</p><ul><li>while循环实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 准备一个空列表</span></span><br><span class="line">list1 = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 书写循环，依次追加数字到空列表list1中</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    list1.append(i)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="number">12345678910</span></span><br></pre></td></tr></table></figure><ul><li>for循环实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    list1.append(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><ul><li>列表推导式实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h4 id="1-2-带if的列表推导式"><a href="#1-2-带if的列表推导式" class="headerlink" title="1.2 带if的列表推导式"></a>1.2 带if的列表推导式</h4><p>需求：创建0-10的偶数列表</p><ul><li>方法一：range()步长实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><ul><li>方法二：if实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h4 id="1-3-多个for循环实现列表推导式"><a href="#1-3-多个for循环实现列表推导式" class="headerlink" title="1.3 多个for循环实现列表推导式"></a>1.3 多个for循环实现列表推导式</h4><p>需求：创建列表如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>)]</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>代码如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [(i, j) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h3 id="2-字典推导式"><a href="#2-字典推导式" class="headerlink" title="2. 字典推导式"></a>2. 字典推导式</h3><p><strong>字典推导式作用：快速合并列表为字典或提取字典中目标数据。</strong></p><h4 id="2-1-快速体验"><a href="#2-1-快速体验" class="headerlink" title="2.1 快速体验"></a>2.1 快速体验</h4><ol><li>创建一个字典：字典key是1-5数字，value是这个数字的2次方。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;i: i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1)  <span class="comment"># &#123;1: 1, 2: 4, 3: 9, 4: 16&#125;</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><ol><li>将两个列表合并为一个字典</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>]</span><br><span class="line">list2 = [<span class="string">&#x27;Tom&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;man&#x27;</span>]</span><br><span class="line"></span><br><span class="line">dict1 = &#123;list1[i]: list2[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list1))&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><ol><li>提取字典中目标数据</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">counts = &#123;<span class="string">&#x27;MBP&#x27;</span>: <span class="number">268</span>, <span class="string">&#x27;HP&#x27;</span>: <span class="number">125</span>, <span class="string">&#x27;DELL&#x27;</span>: <span class="number">201</span>, <span class="string">&#x27;Lenovo&#x27;</span>: <span class="number">199</span>, <span class="string">&#x27;acer&#x27;</span>: <span class="number">99</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需求：提取上述电脑数量大于等于200的字典数据</span></span><br><span class="line">count1 = &#123;key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> counts.items() <span class="keyword">if</span> value &gt;= <span class="number">200</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(count1)  <span class="comment"># &#123;&#x27;MBP&#x27;: 268, &#x27;DELL&#x27;: 201&#125;</span></span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><h3 id="3-集合推导式"><a href="#3-集合推导式" class="headerlink" title="3. 集合推导式"></a>3. 集合推导式</h3><p>需求：创建一个集合，数据为下方列表的2次方。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">set1 = &#123;i ** <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> list1&#125;</span><br><span class="line"><span class="built_in">print</span>(set1)  <span class="comment"># &#123;1, 4&#125;</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：集合有数据去重功能。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> py基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DFS &amp; BFS</title>
      <link href="2020/03/07/%E6%B7%B1%E6%90%9C%E5%B9%BF%E6%90%9C/"/>
      <url>2020/03/07/%E6%B7%B1%E6%90%9C%E5%B9%BF%E6%90%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="DFS-amp-BFS-详解及-Java实现"><a href="#DFS-amp-BFS-详解及-Java实现" class="headerlink" title="DFS &amp; BFS 详解及 Java实现"></a>DFS &amp; BFS 详解及 Java实现</h1><p>BFS和DFS是图的两种遍历方式，是最简单的图搜索算法。</p><p>本文将给出给出BFS和DFS的以下几种实现方式：</p><ul><li>1、使用队列Queue实现图的BFS遍历</li><li>2、递归实现图的DFS遍历</li><li>3、使用栈Stack迭代实现图的DFS遍历</li></ul><h2 id="一、BFS（广度优先搜索算法）"><a href="#一、BFS（广度优先搜索算法）" class="headerlink" title="一、BFS（广度优先搜索算法）"></a>一、BFS（广度优先搜索算法）</h2><blockquote><p>原理：宽度优先搜索算法（又称广度优先搜索）是最简便的图的搜索算法之一，这一算法也是很多重要的图的算法的原型。Dijkstra单源最短路径算法和Prim最小生成树算法都采用了和宽度优先搜索类似的思想。其别名又叫BFS，属于一种盲目搜寻法，目的是系统地展开并检查图中的所有节点，以找寻结果。换句话说，它并不考虑结果的可能位置，彻底地搜索整张图，直到找到结果为止。</p></blockquote><p>&nbsp;&nbsp;BFS算法之所以叫做广度优先搜索，是因为它始终将已发现的顶点和未发现的之间的边界，沿其广度方向向外扩展。亦即，算法首先会发现和s距离为k的所有顶点，然后才会发现和s距离为k+1的其他顶点。</p><p>&nbsp;&nbsp;同深度优先搜索相反，BFS宽度优先搜索每次选择深度最浅的节点优先扩展。并且当问题有解时，宽度优先算法一定能够找到解，并且在单位耗散时间的情况下，可以保证找到最优解。</p><blockquote><p>基于邻接矩阵的BFS：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS_Graph</span><span class="params">(GraphAMatrix G)</span></span>&#123;</span><br><span class="line">    <span class="comment">//图的广度优先遍历</span></span><br><span class="line">    <span class="keyword">int</span> i,j,e;<span class="comment">//i j 为循环控制变量 e为取队列元素变量</span></span><br><span class="line">    CQueue  Q;</span><br><span class="line">    <span class="keyword">int</span> *visited = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>)*G.numVertexes);<span class="comment">//标记数组</span></span><br><span class="line">    <span class="built_in">InitCQueue</span>(&amp;Q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G.numVertexes;i++)&#123;</span><br><span class="line">        <span class="comment">//遍历所有顶点 非连通图的情况化 要遍历全部加上循环</span></span><br><span class="line">        <span class="keyword">if</span>(!visited[i])&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">            visited[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">EnCQueue</span>(&amp;Q,i);<span class="comment">//起点入队列</span></span><br><span class="line">            <span class="keyword">while</span>(!<span class="built_in">CQueue</span>(Q))&#123;<span class="comment">//循环操作</span></span><br><span class="line">                <span class="built_in">DeQueue</span>(&amp;Q,&amp;e);<span class="comment">//出队列</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;G.numVertexes;j++)&#123;</span><br><span class="line">                    <span class="comment">//遍历顶点集合</span></span><br><span class="line">                    <span class="keyword">if</span>(!visited[j]&amp;&amp;G.edges[e][j])&#123;</span><br><span class="line">                        <span class="comment">//判断当前结点是否被访问过 且与出队结点是否相连</span></span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,j);</span><br><span class="line">                        visited[j] = <span class="number">1</span>;</span><br><span class="line">                        <span class="built_in">EnCQueue</span>(&amp;Q,j); </span><br><span class="line">                    &#125; </span><br><span class="line">                &#125; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">free</span>(visited);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>基于邻接表的BFS</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS_GraphADJList</span><span class="params">(GraphADJList G)</span></span>&#123;</span><br><span class="line">    <span class="comment">//图的广度优先遍历</span></span><br><span class="line">    <span class="keyword">int</span> i,j,e;<span class="comment">//i j 为循环控制变量 e为取队列元素变量</span></span><br><span class="line">    CQueue  Q;</span><br><span class="line">    EdgeNode *p; </span><br><span class="line">    <span class="keyword">int</span> *visited = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>)*G.numVertexes);<span class="comment">//标记数组</span></span><br><span class="line">    <span class="built_in">InitCQueue</span>(&amp;Q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G.numVertexes;i++)&#123;</span><br><span class="line">        <span class="comment">//遍历所有顶点 非连通图的情况化 要遍历全部加上循环</span></span><br><span class="line">        <span class="keyword">if</span>(!visited[i])&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">            visited[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">EnCQueue</span>(&amp;Q,i);<span class="comment">//起点入队列</span></span><br><span class="line">            <span class="keyword">while</span>(!<span class="built_in">CQueue</span>(Q))&#123;<span class="comment">//循环操作</span></span><br><span class="line">                <span class="built_in">DeQueue</span>(&amp;Q,&amp;e);<span class="comment">//出队列</span></span><br><span class="line">                p = G.adjList[e].firstedge;<span class="comment">//从顶点的链表的第一个边结点开始 </span></span><br><span class="line">                <span class="keyword">while</span>(p)&#123;</span><br><span class="line">                    j = p-&gt;adjvex;<span class="comment">//记录当前边的终点序号 </span></span><br><span class="line">                    <span class="keyword">if</span>(!visited[j])&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,j);</span><br><span class="line">                        visited[j] = <span class="number">1</span>;</span><br><span class="line">                        <span class="built_in">EnCQueue</span>(&amp;Q,j); </span><br><span class="line">                    &#125; </span><br><span class="line">                    p = p-&gt;next;<span class="comment">//移动到下一条边 </span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">free</span>(visited);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><hr><h2 id="二、DFS（深度优先搜索算法）"><a href="#二、DFS（深度优先搜索算法）" class="headerlink" title="二、DFS（深度优先搜索算法）"></a>二、DFS（深度优先搜索算法）</h2><blockquote><p>原理：深度优先搜索，顾名思义即为一条道走到黑的搜索策略，行不通退回来换另外一条道再走到黑，依次直到搜索完成。其过程简要来说是对每一个可能的分支路径深入到不能再深入为止，而且每个节点只能访问一次。</p></blockquote><p>&nbsp;&nbsp;DFS算法利用递归方式实现，和BFS不同的是BFS搜索产生的始终是一棵树，而DFS产生的可能会使一个森林。</p><p>&nbsp;&nbsp;对于深度优先搜索算法的思想。在一般情况下，当问题有解时，深度优先搜索不但不能够保证找到最优解，也不能保证找到解。如果问题状态空间有限，则可以保证找到解；但是当问题的状态空间无限时，则可能陷入“深渊”而找不到解。为此我们可以利用回溯算法中的思想，可以加上对搜索的深度限制。从而实现对于搜索深度的限制。当然深度限制设置必须合理，深度过深则影响搜索的效率，深度过浅时，则可能影响找到问题的解。</p><p><strong>使用栈实现DFS思路关键点：</strong></p><p>1、首先明确整个DFS主要便是对于栈进行操作，就是在顶点压栈和弹栈过程中我们需要进行的操作；</p><p>2、利用DFS的思想，深度遍历节点。直到栈内元素为空位置；</p><p>3、何时进行压栈：对于栈顶顶点，看其邻接顶点中是够存在未被遍历过得白色顶点，若有则对将其压栈，然后再对栈顶元素进行操作；</p><p>4、如果栈顶顶点的所有邻接顶点都是被遍历过的灰色顶点，则将栈顶元素弹栈，然后再对现在的栈顶元素进行操作；</p><p>5、算法结束时，所有元素均被遍历过即为灰色，并且栈已经为空。</p><blockquote><p>基于邻接矩阵的DFS算法代码实现</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(GraphAMatrix G,<span class="keyword">int</span> i,<span class="keyword">int</span> *visited)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">if</span>(visited[i])</span><br><span class="line">        <span class="keyword">return</span> ;<span class="comment">//若结点被遍历过 返回 </span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">        visited[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//遍历与该结点相邻的结点 (从第一个开始) </span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;G.numVertexs;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited[i]&amp;&amp;G.Edge[i][j])</span><br><span class="line">                <span class="built_in">DFS</span>(G,j,visited);<span class="comment">//从相邻结点的第一个进行递归式深搜遍历 </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS_GreahDG</span><span class="params">(GreapAMstrix G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,e;</span><br><span class="line">    <span class="keyword">int</span> *visited;<span class="comment">//为每一个结点设置一个初始标志为未遍历 </span></span><br><span class="line">    visited=(<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>)*G.numVertexs);</span><br><span class="line">    <span class="built_in">memset</span>(visited,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>)*G.numVertexs);</span><br><span class="line">    <span class="comment">//对每一个未被遍历结点进行DFS深度搜索 </span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G.numVertexs;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[i])</span><br><span class="line">            <span class="built_in">DFS</span>(G,i,visited);<span class="comment">//调用深搜算法 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(visited);<span class="comment">//释放指针 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>基于邻接表的DFS算法实现</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxvn 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义图的存储数据类型 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> adjvesx;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">nextarc</span>;</span></span><br><span class="line">    <span class="keyword">int</span> info;</span><br><span class="line">&#125;ArcNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VNode</span>&#123;</span></span><br><span class="line">    VertexType data;</span><br><span class="line">    ArcNode *firstarc; </span><br><span class="line">&#125;VNode,AdjList[maxvn];</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    AdjList vertices;</span><br><span class="line">    <span class="keyword">int</span> Vnum,Anum;</span><br><span class="line">&#125;AdjGraph;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个全局标识数组 </span></span><br><span class="line"><span class="keyword">int</span> visited[maxvn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateVex</span><span class="params">(<span class="keyword">char</span> u,AdjGraph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G.Vnum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(u==G.vertices[i].data)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i==G.Vnum)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;ERROR!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建图 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatAdjGraph_adjList</span><span class="params">(AdjGraph &amp;G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ArcNode *p;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Please input Vnum and Anum:&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;G.Vnum&gt;&gt;G.Anum;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Please input Vertices:&quot;</span>&lt;&lt;endl;<span class="comment">//创建表头 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G.Vnum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;G.vertices[i].data;</span><br><span class="line">        G.vertices[i].firstarc=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Please input Arc[i][j]:&quot;</span>&lt;&lt;endl;<span class="comment">//创建链表</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;G.Anum;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        p=(ArcNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(ArcNode));</span><br><span class="line">        <span class="keyword">char</span> v1,v2;</span><br><span class="line">        cin&gt;&gt;v1&gt;&gt;v2;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="built_in">LocateVex</span>(v1,G);</span><br><span class="line">        <span class="keyword">int</span> j=<span class="built_in">LocateVex</span>(v2,G);</span><br><span class="line">        <span class="keyword">int</span> w;</span><br><span class="line">        cin&gt;&gt;w;</span><br><span class="line">        p-&gt;adjvesx=j;</span><br><span class="line">        p-&gt;info=w;</span><br><span class="line">        p-&gt;nextarc=G.vertices[i].firstarc;</span><br><span class="line">        G.vertices[i].firstarc=p; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//深搜算法 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(AdjGraph G,<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ArcNode*p;</span><br><span class="line">    visited[i]=<span class="number">1</span>;</span><br><span class="line">    p=G.vertices[i].firstarc;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[p-&gt;adjvesx])</span><br><span class="line">        &#123;</span><br><span class="line">            visited[p-&gt;adjvesx]=<span class="number">1</span>;</span><br><span class="line">            cout&lt;&lt;p-&gt;adjvesx&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p=p-&gt;nextarc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用深搜算法 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTraverse</span><span class="params">(AdjGraph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G.Vnum;i++)</span><br><span class="line">        visited[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G.Vnum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[i])</span><br><span class="line">            <span class="built_in">DFS</span>(G,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AdjGraph G;</span><br><span class="line">    <span class="built_in">CreatAdjGraph_adjList</span>(G);</span><br><span class="line">    <span class="built_in">DFSTraverse</span>(G);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="三、BFS和DFS实现（java）"><a href="#三、BFS和DFS实现（java）" class="headerlink" title="三、BFS和DFS实现（java）"></a>三、BFS和DFS实现（java）</h2><p>1、Vertex对象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vertex1</span> </span>&#123;</span><br><span class="line">    String verName;</span><br><span class="line">    String color;  </span><br><span class="line">    <span class="keyword">int</span> discoverTime;</span><br><span class="line">    <span class="keyword">int</span> finishTime;</span><br><span class="line">    Vertex1 nextNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、Graph对象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Graph1</span> </span>&#123;</span><br><span class="line">    Vertex1[] vertexArray=<span class="keyword">new</span> Vertex1[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> verNum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> edgeNum=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、核心实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;无权有向图和无向图的构建以及实现了图的BFS遍历和DFS遍历:</span></span><br><span class="line"><span class="comment"> * 1&gt;.使用队列Queue实现图的BFS遍历;</span></span><br><span class="line"><span class="comment"> * 2&gt;.递归实现图的DFS遍历;</span></span><br><span class="line"><span class="comment"> * 3&gt;.使用栈Stack迭代实现图的DFS遍历。&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> King</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateGraph1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> time=<span class="number">0</span>;</span><br><span class="line">    Stack&lt;Vertex1&gt; stackVertex=<span class="keyword">new</span> Stack&lt;Vertex1&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Graph1 graph=<span class="keyword">new</span> Graph1();</span><br><span class="line">        CreateGraph1 createGraph=<span class="keyword">new</span> CreateGraph1();</span><br><span class="line">        createGraph.initialGraph(graph);</span><br><span class="line">        createGraph.outputGraph(graph);</span><br><span class="line"><span class="comment">//      System.out.println(&quot;DFS搜索路径为(递归实现)：&quot;);</span></span><br><span class="line"><span class="comment">//      createGraph.DFS(graph);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;DFS搜索路径为(栈实现):&quot;</span>);</span><br><span class="line">        createGraph.stackMain(graph);</span><br><span class="line"><span class="comment">//      System.out.println(&quot;BFS搜索路径为：&quot;);</span></span><br><span class="line"><span class="comment">//      createGraph.BFS(graph);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户输入的string类型的顶点返回该顶点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> graph 图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 输入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>返回一个顶点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Vertex1 <span class="title">getVertex</span><span class="params">(Graph1 graph,String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;graph.verNum;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(graph.vertexArray[i].verName.equals(str))&#123;</span><br><span class="line">                <span class="keyword">return</span> graph.vertexArray[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户输入的数据初始化一个图，以邻接表的形式构建!</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> graph 生成的图</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialGraph</span><span class="params">(Graph1 graph)</span></span>&#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line">        Scanner scan=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入顶点数和边数：&quot;</span>);</span><br><span class="line">        graph.verNum=scan.nextInt();</span><br><span class="line">        graph.edgeNum=scan.nextInt();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请依次输入定点名称：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;graph.verNum;i++)&#123;</span><br><span class="line">            Vertex1 vertex=<span class="keyword">new</span> Vertex1();</span><br><span class="line">            String name=scan.next();</span><br><span class="line">            vertex.verName=name;</span><br><span class="line">            vertex.color=<span class="string">&quot;white&quot;</span>;</span><br><span class="line">            vertex.discoverTime=<span class="number">0</span>;</span><br><span class="line">            vertex.finishTime=<span class="number">0</span>;</span><br><span class="line">            vertex.nextNode=<span class="keyword">null</span>;</span><br><span class="line">            graph.vertexArray[i]=vertex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请依次输入图的便边：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;graph.edgeNum;i++)&#123;</span><br><span class="line">            String preV=scan.next();</span><br><span class="line">            String folV=scan.next();</span><br><span class="line"></span><br><span class="line">            Vertex1 v1=getVertex(graph,preV);</span><br><span class="line">            <span class="keyword">if</span>(v1==<span class="keyword">null</span>)</span><br><span class="line">                System.out.println(<span class="string">&quot;输入边存在图中没有的顶点！&quot;</span>);</span><br><span class="line">            Vertex1 v2=<span class="keyword">new</span> Vertex1();</span><br><span class="line">            v2.verName=folV;</span><br><span class="line">            v2.nextNode=v1.nextNode;</span><br><span class="line">            v1.nextNode=v2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//          紧接着下面注释的代码加上便是构建无向图的，不加则是构建有向图的！</span></span><br><span class="line"><span class="comment">//          Vertex1 reV2=getVertex(graph,folV);</span></span><br><span class="line"><span class="comment">//          if(reV2==null)</span></span><br><span class="line"><span class="comment">//              System.out.println(&quot;输入边存在图中没有的顶点！&quot;);</span></span><br><span class="line"><span class="comment">//          Vertex1 reV1=new Vertex1();</span></span><br><span class="line"><span class="comment">//          reV1.verName=preV;</span></span><br><span class="line"><span class="comment">//          reV1.nextNode=reV2.nextNode;</span></span><br><span class="line"><span class="comment">//          reV2.nextNode=reV1;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输入图的邻接表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> graph 待输出的图</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outputGraph</span><span class="params">(Graph1 graph)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;输出图的邻接链表为：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;graph.verNum;i++)&#123;</span><br><span class="line">            Vertex1 vertex=graph.vertexArray[i];</span><br><span class="line">            System.out.print(vertex.verName);</span><br><span class="line"></span><br><span class="line">            Vertex1 current=vertex.nextNode;</span><br><span class="line">            <span class="keyword">while</span>(current!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;--&gt;&quot;</span>+current.verName);</span><br><span class="line">                current=current.nextNode;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DFS遍历辅助函数，标记颜色是辅助，即根据顶点返回其下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> vertex 顶点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> graph 图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>返回下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">index</span><span class="params">(Vertex1 vertex,Graph1 graph)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;graph.verNum;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vertex.verName.equals(graph.vertexArray[i].verName))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DFS深度优先遍历初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> graph 图</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DFS</span><span class="params">(Graph1 graph)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;graph.verNum;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(graph.vertexArray[i].color.equals(<span class="string">&quot;white&quot;</span>))&#123;</span><br><span class="line">                DfsVisit(graph.vertexArray[i],graph);</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DFS递归函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> vertex 顶点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> graph 图</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DfsVisit</span><span class="params">(Vertex1 vertex,Graph1 graph)</span></span>&#123;</span><br><span class="line">        vertex.color=<span class="string">&quot;gray&quot;</span>;</span><br><span class="line">        time=time+<span class="number">1</span>;</span><br><span class="line">        vertex.discoverTime=time;</span><br><span class="line">        System.out.print(vertex.verName+<span class="string">&quot;--&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Vertex1 current=vertex.nextNode;</span><br><span class="line">        <span class="keyword">while</span>(current!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            Vertex1 currentNow=getVertex(graph, current.verName);</span><br><span class="line">            <span class="keyword">if</span>(currentNow.color.equals(<span class="string">&quot;white&quot;</span>))</span><br><span class="line">                DfsVisit(currentNow,graph);</span><br><span class="line">            current=current.nextNode;</span><br><span class="line">        &#125;</span><br><span class="line">        vertex.color=<span class="string">&quot;black&quot;</span>;</span><br><span class="line">        time=time+<span class="number">1</span>;</span><br><span class="line">        vertex.finishTime=time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 寻找一个节点的邻接点中是否还有白色节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> vertex 顶点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> graph 图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回白色节点或是null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Vertex1 <span class="title">getAdj</span><span class="params">(Graph1 graph,Vertex1 vertex)</span></span>&#123;</span><br><span class="line">        Vertex1 ver=getVertex(graph, vertex.verName);</span><br><span class="line">        Vertex1 current=ver.nextNode;</span><br><span class="line">        <span class="keyword">if</span>(current==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            Vertex1 cur=getVertex(graph, current.verName);</span><br><span class="line">            <span class="keyword">while</span>(current!=<span class="keyword">null</span> &amp;&amp; cur.color.equals(<span class="string">&quot;gray&quot;</span>))&#123;</span><br><span class="line">                current=current.nextNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cur.color.equals(<span class="string">&quot;white&quot;</span>))&#123;</span><br><span class="line">                Vertex1 currentNow=getVertex(graph, current.verName);</span><br><span class="line">                <span class="keyword">return</span> currentNow;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过栈实现dfs遍历</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> graph 图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> vertex 顶点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stackOperator</span><span class="params">(Graph1 graph,Vertex1 vertex)</span></span>&#123;</span><br><span class="line">        vertex.color=<span class="string">&quot;gray&quot;</span>;</span><br><span class="line">        stackVertex.push(vertex);</span><br><span class="line">        System.out.print(vertex.verName+<span class="string">&quot;--&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!stackVertex.isEmpty())&#123;</span><br><span class="line">            Vertex1 ver=stackVertex.peek();</span><br><span class="line">            Vertex1 current=getAdj(graph,ver);</span><br><span class="line">            <span class="keyword">if</span>(current!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                stackVertex.push(current);</span><br><span class="line">                current.color=<span class="string">&quot;gray&quot;</span>;</span><br><span class="line">                System.out.print(current.verName+<span class="string">&quot;--&gt;&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stackVertex.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DFS遍历主函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> graph</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stackMain</span><span class="params">(Graph1 graph)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;graph.verNum;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(graph.vertexArray[i].color.equals(<span class="string">&quot;white&quot;</span>))&#123;</span><br><span class="line">                stackOperator(graph,graph.vertexArray[i]);</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BFS广度优先搜索实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> graph 图</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BFS</span><span class="params">(Graph1 graph)</span></span>&#123;</span><br><span class="line">        Vertex1 current=graph.vertexArray[<span class="number">0</span>];</span><br><span class="line">        current.color=<span class="string">&quot;gray&quot;</span>;</span><br><span class="line">        time=time+<span class="number">1</span>;</span><br><span class="line">        current.discoverTime=time;</span><br><span class="line"></span><br><span class="line">        Queue&lt;Vertex1&gt; queue=<span class="keyword">new</span> LinkedList&lt;Vertex1&gt;();</span><br><span class="line">        queue.offer(current);</span><br><span class="line">        <span class="keyword">while</span>(queue.peek()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            Vertex1 ver=queue.poll();</span><br><span class="line">            time=time+<span class="number">1</span>;</span><br><span class="line">            ver.finishTime=time;</span><br><span class="line">            System.out.print(ver.verName+<span class="string">&quot;--&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Vertex1 cur=ver.nextNode;</span><br><span class="line">            <span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                Vertex1 curNow=getVertex(graph, cur.verName);</span><br><span class="line">                <span class="keyword">if</span>(curNow.color.equals(<span class="string">&quot;white&quot;</span>))&#123;</span><br><span class="line">                    curNow.color=<span class="string">&quot;gray&quot;</span>;</span><br><span class="line">                    time=time+<span class="number">1</span>;</span><br><span class="line">                    curNow.discoverTime=time;</span><br><span class="line">                    queue.offer(curNow);</span><br><span class="line">                &#125;</span><br><span class="line">                cur=cur.nextNode;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">DFS测试图的边：</span></span><br><span class="line"><span class="comment">v1 v2</span></span><br><span class="line"><span class="comment">v1 v3</span></span><br><span class="line"><span class="comment">v2 v3</span></span><br><span class="line"><span class="comment">v3 v4</span></span><br><span class="line"><span class="comment">v4 v2</span></span><br><span class="line"><span class="comment">v5 v4</span></span><br><span class="line"><span class="comment">v5 v6</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">BFS测试图的边(10)：</span></span><br><span class="line"><span class="comment">v1 v2</span></span><br><span class="line"><span class="comment">v1 v4</span></span><br><span class="line"><span class="comment">v2 v3</span></span><br><span class="line"><span class="comment">v4 v5</span></span><br><span class="line"><span class="comment">v4 v8</span></span><br><span class="line"><span class="comment">v5 v6</span></span><br><span class="line"><span class="comment">v5 v7</span></span><br><span class="line"><span class="comment">v5 v8</span></span><br><span class="line"><span class="comment">v6 v7</span></span><br><span class="line"><span class="comment">v7 v8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="四、DFS与BFS比较"><a href="#四、DFS与BFS比较" class="headerlink" title="四、DFS与BFS比较"></a>四、DFS与BFS比较</h2><blockquote><p>DFS深度优先搜索，空间需求较低，不需要BFS需要一个队列保存搜索过程中搜索记录；其次，深搜在搜索过程中要考虑回溯，在搜索HTML链接，爬取数据方面适用颇多；多用于解决连通性问题。</p></blockquote><blockquote><p>BFS广度优先搜索，空间需求较高，根据其搜索模式，便于求解最短路径问题，上文提到的Dijkstral和prim算法均基于其思想，因为是按层进行搜索，所以很容易求得最短路径。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法</title>
      <link href="2020/01/14/%E5%9B%9E%E6%BA%AF%E6%B3%95/"/>
      <url>2020/01/14/%E5%9B%9E%E6%BA%AF%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h1><h2 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h2><p>&nbsp;&nbsp;回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。</p><p>&nbsp;&nbsp;回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。</p><p>&nbsp;&nbsp;许多复杂的，规模较大的问题都可以使用回溯法，有“通用解题方法”的美称。</p><h2 id="2、基本思想"><a href="#2、基本思想" class="headerlink" title="2、基本思想"></a>2、基本思想</h2><p>&nbsp;&nbsp;在包含问题的所有解的解空间树中，按照深度优先搜索的策略，从根结点出发深度探索解空间树。当探索到某一结点时，要先判断该结点是否包含问题的解，如果包含，就从该结点出发继续探索下去，如果该结点不包含问题的解，则逐层向其祖先结点回溯。（其实回溯法就是对隐式图的深度优先搜索算法）。</p><p>&nbsp;&nbsp;若用回溯法求问题的所有解时，要回溯到根，且根结点的所有可行的子树都要已被搜索遍才结束。</p><p>&nbsp;&nbsp;而若使用回溯法求任一个解时，只要搜索到问题的一个解就可以结束。</p><h2 id="3、用回溯法解题的一般步骤："><a href="#3、用回溯法解题的一般步骤：" class="headerlink" title="3、用回溯法解题的一般步骤："></a>3、用回溯法解题的一般步骤：</h2><p>（1）针对所给问题，确定问题的解空间：<br>首先应明确定义问题的解空间，问题的解空间应至少包含问题的一个（最优）解。</p><p>（2）确定结点的扩展搜索规则</p><p>（3）以深度优先方式搜索解空间，并在搜索过程中用剪枝函数避免无效搜索。</p><h2 id="4、算法框架"><a href="#4、算法框架" class="headerlink" title="4、算法框架"></a>4、算法框架</h2><p>（1）问题框架</p><p>设问题的解是一个n维向量(a1,a2,………,an),约束条件是ai(i=1,2,3,……,n)之间满足某种条件，记为f(ai)。</p><p>（2）非递归回溯框架</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span>: <span class="keyword">int</span> a[n],i;</span><br><span class="line"> <span class="number">2</span>: 初始化数组a[];</span><br><span class="line"> <span class="number">3</span>: i = <span class="number">1</span>;</span><br><span class="line"> <span class="number">4</span>: <span class="keyword">while</span> (i&gt;<span class="number">0</span>(有路可走)   <span class="built_in"><span class="keyword">and</span></span>  (未达到目标))  <span class="comment">// 还未回溯到头</span></span><br><span class="line"> <span class="number">5</span>: &#123;</span><br><span class="line"> <span class="number">6</span>:     <span class="keyword">if</span>(i &gt; n)                                              <span class="comment">// 搜索到叶结点</span></span><br><span class="line"> <span class="number">7</span>:     &#123;   </span><br><span class="line"> <span class="number">8</span>:           搜索到一个解，输出；</span><br><span class="line"> <span class="number">9</span>:     &#125;</span><br><span class="line"><span class="number">10</span>:     <span class="keyword">else</span>                                                   <span class="comment">// 处理第i个元素</span></span><br><span class="line"><span class="number">11</span>:     &#123; </span><br><span class="line"><span class="number">12</span>:           a[i]第一个可能的值；</span><br><span class="line"><span class="number">13</span>:           <span class="keyword">while</span>(a[i]在不满足约束条件且在搜索空间内)</span><br><span class="line"><span class="number">14</span>:           &#123;</span><br><span class="line"><span class="number">15</span>:               a[i]下一个可能的值；</span><br><span class="line"><span class="number">16</span>:           &#125;</span><br><span class="line"><span class="number">17</span>:           <span class="keyword">if</span>(a[i]在搜索空间内)</span><br><span class="line"><span class="number">18</span>:          &#123;</span><br><span class="line"><span class="number">19</span>:               标识占用的资源；</span><br><span class="line"><span class="number">20</span>:               i = i+<span class="number">1</span>;                              <span class="comment">// 扩展下一个结点</span></span><br><span class="line"><span class="number">21</span>:          &#125;</span><br><span class="line"><span class="number">22</span>:          <span class="keyword">else</span> </span><br><span class="line"><span class="number">23</span>:         &#123;</span><br><span class="line"><span class="number">24</span>:               清理所占的状态空间；            <span class="comment">// 回溯</span></span><br><span class="line"><span class="number">25</span>:               i = i –<span class="number">1</span>; </span><br><span class="line"><span class="number">26</span>:          &#125;</span><br><span class="line"><span class="number">27</span>: &#125;</span><br></pre></td></tr></table></figure><p>（3）递归的算法框架</p><p>回溯法是对解空间的深度优先搜索，在一般情况下使用递归函数来实现回溯法比较简单，其中i为搜索的深度，框架如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span>: <span class="keyword">int</span> a[n];</span><br><span class="line"> <span class="number">2</span>: <span class="built_in"><span class="keyword">try</span></span>(<span class="keyword">int</span> i)</span><br><span class="line"> <span class="number">3</span>: &#123;</span><br><span class="line"> <span class="number">4</span>:     <span class="keyword">if</span>(i&gt;n)</span><br><span class="line"> <span class="number">5</span>:        输出结果;</span><br><span class="line"> <span class="number">6</span>:      <span class="keyword">else</span></span><br><span class="line"> <span class="number">7</span>:     &#123;</span><br><span class="line"> <span class="number">8</span>:        <span class="keyword">for</span>(j = 下界; j &lt;= 上界; j=j+<span class="number">1</span>)  <span class="comment">// 枚举i所有可能的路径</span></span><br><span class="line"> <span class="number">9</span>:        &#123;</span><br><span class="line"><span class="number">10</span>:            <span class="keyword">if</span>(<span class="built_in">fun</span>(j))                 <span class="comment">// 满足限界函数和约束条件</span></span><br><span class="line"><span class="number">11</span>:              &#123;</span><br><span class="line"><span class="number">12</span>:                 a[i] = j;</span><br><span class="line"><span class="number">13</span>:               ...                         <span class="comment">// 其他操作</span></span><br><span class="line"><span class="number">14</span>:                 <span class="built_in"><span class="keyword">try</span></span>(i+<span class="number">1</span>);</span><br><span class="line"><span class="number">15</span>:               回溯前的清理工作（如a[i]置空值等）;</span><br><span class="line"><span class="number">16</span>:               &#125;</span><br><span class="line"><span class="number">17</span>:          &#125;</span><br><span class="line"><span class="number">18</span>:      &#125;</span><br><span class="line"><span class="number">19</span>: &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法</title>
      <link href="2020/01/13/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
      <url>2020/01/13/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><h2 id="一、基本概念："><a href="#一、基本概念：" class="headerlink" title="一、基本概念："></a>一、基本概念：</h2><p>&nbsp;&nbsp;所谓贪心算法是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的仅是在某种意义上的局部最优解。</p><p>&nbsp;&nbsp;贪心算法没有固定的算法框架，算法设计的关键是贪心策略的选择。必须注意的是，贪心算法不是对所有问题都能得到整体最优解，选择的贪心策略必须具备无后效性，即某个状态以后的过程不会影响以前的状态，只与当前状态有关。</p><p>所以对所采用的贪心策略一定要仔细分析其是否满足无后效性。</p><h2 id="二、贪心算法的基本思路："><a href="#二、贪心算法的基本思路：" class="headerlink" title="二、贪心算法的基本思路："></a>二、贪心算法的基本思路：</h2><ul><li><p>1.建立数学模型来描述问题。</p></li><li><p>2.把求解的问题分成若干个子问题。</p></li><li><p>3.对每一子问题求解，得到子问题的局部最优解。</p></li><li><p>4.把子问题的解局部最优解合成原来解问题的一个解。</p></li></ul><h2 id="三、贪心算法适用的问题"><a href="#三、贪心算法适用的问题" class="headerlink" title="三、贪心算法适用的问题"></a>三、贪心算法适用的问题</h2><p>&nbsp;&nbsp;贪心策略适用的前提是：局部最优策略能导致产生全局最优解。<br>实际上，贪心算法适用的情况很少。一般，对一个问题分析是否适用于贪心算法，可以先选择该问题下的几个实际数据进行分析，就可做出判断。</p><h2 id="四、贪心算法的实现框架"><a href="#四、贪心算法的实现框架" class="headerlink" title="四、贪心算法的实现框架"></a>四、贪心算法的实现框架</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">从问题的某一初始解出发；</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> （能朝给定总目标前进一步）</span><br><span class="line">&#123;</span><br><span class="line">    利用可行的决策，求出可行解的一个解元素；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">由所有解元素组合成问题的一个可行解；</span><br></pre></td></tr></table></figure><h2 id="五、贪心策略的选择"><a href="#五、贪心策略的选择" class="headerlink" title="五、贪心策略的选择"></a>五、贪心策略的选择</h2><p>&nbsp;&nbsp;因为用贪心算法只能通过解局部最优解的策略来达到全局最优解，因此，一定要注意判断问题是否适合采用贪心算法策略，找到的解是否一定是问题的最优解。</p><h2 id="六、例题分析"><a href="#六、例题分析" class="headerlink" title="六、例题分析"></a>六、例题分析</h2><p>下面是一个可以试用贪心算法解的题目，贪心解的确不错，可惜不是最优解。</p><p>[背包问题]有一个背包，背包容量是M=150。有7个物品，物品可以分割成任意大小。</p><p>要求尽可能让装入背包中的物品总价值最大，但不能超过总容量。</p><p>物品 A B C D E F G</p><p>重量 35 30 60 50 40 10 25</p><p>价值 10 40 30 50 35 40 30</p><p>分析：</p><p>目标函数： ∑pi最大</p><p>约束条件是装入的物品总重量不超过背包容量：∑wi&lt;=M( M=150)</p><ul><li>（1）根据贪心的策略，每次挑选价值最大的物品装入背包，得到的结果是否最优？</li><li>（2）每次挑选所占重量最小的物品装入是否能得到最优解？</li><li>（3）每次选取单位重量价值最大的物品，成为解本题的策略。<br>值得注意的是，贪心算法并不是完全不可以使用，贪心策略一旦经过证明成立后，它就是一种高效的算法。</li></ul><p>贪心算法还是很常见的算法之一，这是由于它简单易行，构造贪心策略不是很困难。</p><p>可惜的是，它需要证明后才能真正运用到题目的算法中。</p><p>一般来说，贪心算法的证明围绕着：整个问题的最优解一定由在贪心策略中存在的子问题的最优解得来的。</p><p>对于例题中的3种贪心策略，都是无法成立（无法被证明）的，解释如下：</p><p>（1）贪心策略：选取价值最大者。反例：</p><p>W=30<br>物品：A B C<br>重量：28 12 12<br>价值：30 20 20<br>根据策略，首先选取物品A，接下来就无法再选取了，可是，选取B、C则更好。</p><p>（2）贪心策略：选取重量最小。它的反例与第一种策略的反例差不多。</p><p>（3）贪心策略：选取单位重量价值最大的物品。反例：</p><p>W=30<br>物品：A B C<br>重量：28 20 10<br>价值：28 20 10<br>根据策略，三种物品单位重量价值一样，程序无法依据现有策略作出判断，如果选择A，则答案错误。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分治算法</title>
      <link href="2020/01/10/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/"/>
      <url>2020/01/10/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><p>&nbsp;&nbsp;在计算机科学中，分治法是一种很重要的算法。字面上的解释是“分而治之”，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题……直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。这个技巧是很多高效算法的基础，如排序算法(快速排序，归并排序)，傅立叶变换(快速傅立叶变换)……</p><h2 id="二、基本思想及策略"><a href="#二、基本思想及策略" class="headerlink" title="二、基本思想及策略"></a>二、基本思想及策略</h2><p>&nbsp;&nbsp;分治法的设计思想是：将一个难以直接解决的大问题，分割成一些规模较小的相同问题，以便各个击破，分而治之。<br>分治策略是：对于一个规模为n的问题，若该问题可以容易地解决（比如说规模n较小）则直接解决，否则将其分解为k个规模较小的子问题，这些子问题互相独立且与原问题形式相同，递归地解这些子问题，然后将各子问题的解合并得到原问题的解。这种算法设计策略叫做分治法。</p><p>&nbsp;&nbsp;如果原问题可分割成k个子问题，1&lt;k≤n，且这些子问题都可解并可利用这些子问题的解求出原问题的解，那么这种分治法就是可行的。由分治法产生的子问题往往是原问题的较小模式，这就为使用递归技术提供了方便。在这种情况下，反复应用分治手段，可以使子问题与原问题类型一致而其规模却不断缩小，最终使子问题缩小到很容易直接求出其解。这自然导致递归过程的产生。分治与递归像一对孪生兄弟，经常同时应用在算法设计之中，并由此产生许多高效算法。</p><h2 id="三、分治法适用的情况"><a href="#三、分治法适用的情况" class="headerlink" title="三、分治法适用的情况"></a>三、分治法适用的情况</h2><p>分治法所能解决的问题一般具有以下几个特征：</p><ul><li><p>该问题的规模缩小到一定的程度就可以容易地解决</p></li><li><p>该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质。</p></li><li><p>利用该问题分解出的子问题的解可以合并为该问题的解；</p></li><li><p>该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子子问题。</p></li></ul><p>第一条特征是绝大多数问题都可以满足的，因为问题的计算复杂性一般是随着问题规模的增加而增加；</p><p>第二条特征是应用分治法的前提它也是大多数问题可以满足的，此特征反映了递归思想的应用；</p><p>第三条特征是关键，能否利用分治法完全取决于问题是否具有第三条特征，如果具备了第一条和第二条特征，而不具备第三条特征，则可以考虑用贪心法或动态规划法。</p><p>第四条特征涉及到分治法的效率，如果各子问题是不独立的则分治法要做许多不必要的工作，重复地解公共的子问题，此时虽然可用分治法，但一般用动态规划法较好。</p><h2 id="四、分治法的基本步骤"><a href="#四、分治法的基本步骤" class="headerlink" title="四、分治法的基本步骤"></a>四、分治法的基本步骤</h2><p>分治法在每一层递归上都有三个步骤：</p><ul><li><p>step1 分解：将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题；</p></li><li><p>step2 解决：若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题;</p></li><li><p>step3 合并：将各个子问题的解合并为原问题的解。<br>它的一般的算法设计模式如下：</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> Divide-<span class="keyword">and</span>-<span class="built_in">Conquer</span>(P)</span><br><span class="line"><span class="number">1.</span> <span class="keyword">if</span> |P|≤n0</span><br><span class="line"><span class="number">2.</span> <span class="function">then <span class="title">return</span><span class="params">(ADHOC(P))</span></span></span><br><span class="line"><span class="function">3. 将P分解为较小的子问题 P1 ,P2 ,...,Pk</span></span><br><span class="line"><span class="function">4. <span class="keyword">for</span> i←1 to k</span></span><br><span class="line"><span class="function">5. <span class="keyword">do</span> yi ← Divide-<span class="keyword">and</span>-<span class="title">Conquer</span><span class="params">(Pi)</span> △ 递归解决Pi</span></span><br><span class="line"><span class="function">6. T ← <span class="title">MERGE</span><span class="params">(y1,y2,...,yk)</span> △ 合并子问题</span></span><br><span class="line"><span class="function">7. <span class="title">return</span><span class="params">(T)</span></span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;其中|P|表示问题P的规模；n0为一阈值，表示当问题P的规模不超过n0时，问题已容易直接解出，不必再继续分解。ADHOC§是该分治法中的基本子算法，用于直接解小规模的问题P。因此，当P的规模不超过n0时直接用算法ADHOC§求解。算法MERGE(y1,y2,…,yk)是该分治法中的合并子算法，用于将P的子问题P1,P2<br>,…,Pk的相应的解y1,y2,…,yk合并为P的解。</p><h2 id="五、分治法的复杂性分析"><a href="#五、分治法的复杂性分析" class="headerlink" title="五、分治法的复杂性分析"></a>五、分治法的复杂性分析</h2><p>&nbsp;&nbsp;一个分治法将规模为n的问题分成k个规模为n／m的子问题去解。设分解阀值n0=1，且adhoc解规模为1的问题耗费1个单位时间。再设将原问题分解为k个子问题以及用merge将k个子问题的解合并为原问题的解需用f(n)个单位时间。用T(n)表示该分治法解规模为|P|=n的问题所需的计算时间，则有：<br>T（n）= k T(n/m)+f(n) 通过迭代法求得方程的解：<br>递归方程及其解只给出n等于m的方幂时T(n)的值，但是如果认为T(n)足够平滑，那么由n等于m的方幂时T(n)的值可以估计T(n)的增长速度。通常假定T(n)是单调上升的，从而当<br>mi≤n&lt;mi+1时，T(mi)≤T(n)&lt;T(mi+1)。</p><p>六、可使用分治法求解的一些经典问题</p><ul><li>二分搜索</li><li>大整数乘法</li><li>Strassen矩阵乘法</li><li>棋盘覆盖</li><li>合并排序</li><li>快速排序</li><li>线性时间选择</li><li>最接近点对问题</li><li>循环赛日程表</li><li>汉诺塔</li></ul><p>七、依据分治法设计程序时的思维过程</p><p>实际上就是类似于数学归纳法，找到解决本问题的求解方程公式，然后根据方程公式设计递归程序。</p><ul><li>1、一定是先找到最小问题规模时的求解方法</li><li>2、然后考虑随着问题规模增大时的求解方法</li><li>3、找到求解的递归函数式后（各种规模或因子），设计递归程序即可。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="2020/01/09/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>2020/01/09/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划算法"><a href="#动态规划算法" class="headerlink" title="动态规划算法"></a>动态规划算法</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><p>&nbsp;&nbsp;动态规划过程是：每次决策依赖于当前状态，又随即引起状态的转移。一个决策序列就是在变化的状态中产生出来的，所以，这种多阶段最优化决策解决问题的过程就称为动态规划。</p><h2 id="二、基本思想与策略"><a href="#二、基本思想与策略" class="headerlink" title="二、基本思想与策略"></a>二、基本思想与策略</h2><p>&nbsp;&nbsp;基本思想与分治法类似，也是将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各子问题，最后一个子问题就是初始问题的解。</p><p>&nbsp;&nbsp;由于动态规划解决的问题多数有重叠子问题这个特点，为减少重复计算，对每一个子问题只解一次，将其不同阶段的不同状态保存在一个二维数组中。</p><p>&nbsp;&nbsp;与分治法最大的差别是：适合于用动态规划法求解的问题，经分解后得到的子问题往往不是互相独立的（即下一个子阶段的求解是建立在上一个子阶段的解的基础上，进行进一步的求解）。</p><h2 id="三、适用的情况"><a href="#三、适用的情况" class="headerlink" title="三、适用的情况"></a>三、适用的情况</h2><p>能采用动态规划求解的问题的一般要具有3个性质：</p><ul><li><p>(1) 最优化原理：如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。</p></li><li><p>(2) 无后效性：即某阶段状态一旦确定，就不受这个状态以后决策的影响。也就是说，某状态以后的过程不会影响以前的状态，只与当前状态有关。</p></li><li><p>(3)有重叠子问题：即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。（该性质并不是动态规划适用的必要条件，但是如果没有这条性质，动态规划算法同其他算法相比就不具备优势）</p></li></ul><h2 id="四、求解的基本步骤"><a href="#四、求解的基本步骤" class="headerlink" title="四、求解的基本步骤"></a>四、求解的基本步骤</h2><p>&nbsp;&nbsp;动态规划所处理的问题是一个多阶段决策问题，一般由初始状态开始，通过对中间阶段决策的选择，达到结束状态。这些决策形成了一个决策序列，同时确定了完成整个过程的一条活动路线(通常是求最优的活动路线)。如图所示。动态规划的设计都有着一定的模式，一般要经历以下几个步骤。</p><p>&nbsp;&nbsp;初始状态→│决策１│→│决策２│→…→│决策ｎ│→结束状态</p><p>(1)划分阶段：按照问题的时间或空间特征，把问题分为若干个阶段。在划分阶段时，注意划分后的阶段一定要是有序的或者是可排序的，否则问题就无法求解。</p><p>(2)确定状态和状态变量：将问题发展到各个阶段时所处于的各种客观情况用不同的状态表示出来。当然，状态的选择要满足无后效性。</p><p>(3)确定决策并写出状态转移方程：因为决策和状态转移有着天然的联系，状态转移就是根据上一阶段的状态和决策来导出本阶段的状态。所以如果确定了决策，状态转移方程也就可写出。但事实上常常是反过来做，根据相邻两个阶段的状态之间的关系来确定决策方法和状态转移方程。</p><p>(4)寻找边界条件：给出的状态转移方程是一个递推式，需要一个递推的终止条件或边界条件。</p><p>一般，只要解决问题的阶段、状态和状态转移决策确定了，就可以写出状态转移方程（包括边界条件）。</p><p>实际应用中可以按以下几个简化的步骤进行设计：</p><ul><li><p>（1）分析最优解的性质，并刻画其结构特征。</p></li><li><p>（2）递归的定义最优解。</p></li><li><p>（3）以自底向上或自顶向下的记忆化方式（备忘录法）计算出最优值</p></li><li><p>（4）根据计算最优值时得到的信息，构造问题的最优解</p></li></ul><h2 id="五、算法实现的说明"><a href="#五、算法实现的说明" class="headerlink" title="五、算法实现的说明"></a>五、算法实现的说明</h2><p>&nbsp;&nbsp;动态规划的主要难点在于理论上的设计，也就是上面4个步骤的确定，一旦设计完成，实现部分就会非常简单。</p><p>使用动态规划求解问题，最重要的就是确定动态规划三要素：</p><ul><li><p>（1）问题的阶段</p></li><li><p>（2）每个阶段的状态</p></li><li><p>（3）从前一个阶段转化到后一个阶段之间的递推关系。</p></li></ul><p>&nbsp;&nbsp;递推关系必须是从次小的问题开始到较大的问题之间的转化，从这个角度来说，动态规划往往可以用递归程序来实现，不过因为递推可以充分利用前面保存的子问题的解来减少重复计算，所以对于大规模问题来说，有递归不可比拟的优势，这也是动态规划算法的核心之处。</p><p>&nbsp;&nbsp;确定了动态规划的这三要素，整个求解过程就可以用一个最优决策表来描述，最优决策表是一个二维表，其中行表示决策的阶段，列表示问题状态，表格需要填写的数据一般对应此问题的在某个阶段某个状态下的最优值（如最短路径，最长公共子序列，最大价值等），填表的过程就是根据递推关系，从1行1列开始，以行或者列优先的顺序，依次填写表格，最后根据整个表格的数据通过简单的取舍或者运算求得问题的最优解。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f(n,m)=max&#123;f(n-1,m), f(n-1,m-w[n])+P(n,m)&#125;</span><br></pre></td></tr></table></figure><p>六、动态规划算法基本框架</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=m; j=j+<span class="number">1</span>) <span class="comment">// 第一个阶段</span></span><br><span class="line">   xn[j] = 初始值;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span>(i=n<span class="number">-1</span>; i&gt;=<span class="number">1</span>; i=i<span class="number">-1</span>)<span class="comment">// 其他n-1个阶段</span></span><br><span class="line">   <span class="keyword">for</span>(j=<span class="number">1</span>; j&gt;=<span class="built_in">f</span>(i); j=j+<span class="number">1</span>)<span class="comment">//f(i)与i有关的表达式</span></span><br><span class="line">     xi[j]=j=max（或min）&#123;<span class="built_in">g</span>(xi<span class="number">-1</span>[j1:j2]), ......, <span class="built_in">g</span>(xi<span class="number">-1</span>[jk:jk+<span class="number">1</span>])&#125;;</span><br><span class="line"></span><br><span class="line">t = <span class="built_in">g</span>(x1[j1:j2]); <span class="comment">// 由子问题的最优解求解整个问题的最优解的方案</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x1[j1]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>; i&lt;=n<span class="number">-1</span>; i=i+<span class="number">1</span>）</span><br><span class="line">&#123;  </span><br><span class="line">     t = t-xi<span class="number">-1</span>[ji];</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span>(j=<span class="number">1</span>; j&gt;=<span class="built_in">f</span>(i); j=j+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span>(t=xi[ji])</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About me</title>
      <link href="2019/06/19/About%20me/"/>
      <url>2019/06/19/About%20me/</url>
      
        <content type="html"><![CDATA[<h1 id="飞鸟与鱼不同路，从此山海不相逢"><a href="#飞鸟与鱼不同路，从此山海不相逢" class="headerlink" title="飞鸟与鱼不同路，从此山海不相逢"></a><a href=""><center>飞鸟与鱼不同路，从此山海不相逢</center></a></h1><p><font size=4 color="#443D5C"><center>哈啰！我是 YUSU (鱼溯)，很荣幸能与你相遇。</center></font></p><p><font size=4 color="#443D5C"><center>本人是一名大学生在读（正准备考研…），</center></font></p><p><font size=4 color="#443D5C"><center>但由于不常参加讨论也不喜与人争辩，上网过程中也逐渐觉得闷得慌，</center></font></p><p><font size=4 color="#443D5C"><center>再加上被网上许多并不准确也不简洁的教程误导导致浪费了大把时间，</center></font></p><p><font size=4 color="#443D5C"><center>于是决定凭着自己还不错的搜索、整理、总结和表达能力，来记录自己的足迹，</center></font></p><p><font size=4 color="#443D5C"><center>网络世界是丰富多彩的，在她面前我们人人平等，</font></p><p><font size=4 color="#443D5C"><center>我们每个人都可以去享用她丰富的资源，也都可以用上最便利的工具来进行探索，</center></font></p><p><font size=4 color="#443D5C"><center>希望能带给你最优质的上网体验。</font></p><p><font size=4 color="#443D5C"><center>如果博客内容有能帮助到你，还请点个关注支持一下，或者推荐给身边需要的人。</center></font></p><p><font size=4 color="#443D5C"><center>从始至终我都是一个人在摸索探寻，你的回复和陪伴将会成为我不竭的动力。</center></font></p><p><img "" class="lazyload placeholder" data-original="https://img14.360buyimg.com/ddimg/jfs/t1/182607/2/9588/2047442/60cb0458E07091758/487715521bd3170d.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="Birds and fish do not go the same way, since then the mountains and seas do not meet"></p>]]></content>
      
      
      <categories>
          
          <category> Person </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Me </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从前</title>
      <link href="2019/06/07/Before/"/>
      <url>2019/06/07/Before/</url>
      
        <content type="html"><![CDATA[<h1 id="愿君前程似锦-再见依旧如故"><a href="#愿君前程似锦-再见依旧如故" class="headerlink" title="愿君前程似锦 再见依旧如故"></a><a href=""><center>愿君前程似锦 再见依旧如故</center></a></h1><hr><blockquote><ul><li><font face="STCAIYUN" color="#533957" size=4><center>记得早先少年时</center><center>Remember the old days</center></li><li><center>大家诚诚恳恳</center><center>when everyone was sincere</center></li><li><center>说一句 是一句</center><center>one's word is one's bond</center></li><li><center>清早上火车站</center><center>The dawn of the train station</center></li><li><center>长街黑暗无行人</center><center>the dark street with no sign of pedestrian</center></li><li><center>卖豆浆的小店冒着热气</center><center>and the steam from the soy-milk stall</center></li><li><center>从前的日色变得慢</center><center>The nightfalls used to come late in the past</center></li><li><center>车，马，邮件都慢</center><center>Everything was slow, the bike, the horse, and the post</center></li><li><center>一生只够爱一个人</center><center>a lifetime was all but enough to be in love with one</center></li><li><center>从前的锁也好看</center><center>The old-school lock was beautiful</center></li><li><center>钥匙精美有样子</center><center>and the key exquisite looking</center></li><li><center>你锁了 人家就懂了</center><center>once locked, the others understood</center></font></li></ul></blockquote><hr><p><img "" class="lazyload placeholder" data-original="https://img10.360buyimg.com/ddimg/jfs/t1/168772/8/24481/2622740/6176215fEf9d29ea4/2f9f389651f1924c.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></p>]]></content>
      
      
      <categories>
          
          <category> Person </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Before </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
